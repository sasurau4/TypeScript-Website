{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/jsx.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"016d22d8-36da-566c-91f5-b401f6ce23f0","excerpt":"{% raw %}# Table of contents Introduction Basic Usage The as operator Type Checking Intrinsic elements Value-based elements Function Component Class Component…","html":"<p>{% raw %}# Table of contents</p>\n<p><a href=\"#introduction\">Introduction</a></p>\n<p><a href=\"#basic-usage\">Basic Usage</a></p>\n<p><a href=\"#the-as-operator\">The as operator</a></p>\n<p><a href=\"#type-checking\">Type Checking</a></p>\n<ul>\n<li><a href=\"#intrinsic-elements\">Intrinsic elements</a></li>\n<li><a href=\"#value-based-elements\">Value-based elements</a></li>\n<li><a href=\"#function-component\">Function Component</a></li>\n<li><a href=\"#class-component\">Class Component</a></li>\n<li><a href=\"#attribute-type-checking\">Attribute type checking</a></li>\n<li><a href=\"#children-type-checking\">Children Type Checking</a></li>\n</ul>\n<p><a href=\"#the-jsx-result-type\">The JSX result type</a></p>\n<p><a href=\"#embedding-expressions\">Embedding Expressions</a></p>\n<p><a href=\"#react-integration\">React integration</a></p>\n<p><a href=\"#factory-functions\">Factory Functions</a></p>\n<h1>Introduction</h1>\n<p><b><a href=\"#table-of-contents\">↥ back to top</a></b></p>\n<p><a href=\"https://facebook.github.io/jsx/\">JSX</a> is an embeddable XML-like syntax.\nIt is meant to be transformed into valid JavaScript, though the semantics of that transformation are implementation-specific.\nJSX rose to popularity with the <a href=\"https://reactjs.org/\">React</a> framework, but has since seen other implementations as well.\nTypeScript supports embedding, type checking, and compiling JSX directly to JavaScript.</p>\n<h1>Basic usage</h1>\n<p><b><a href=\"#table-of-contents\">↥ back to top</a></b></p>\n<p>In order to use JSX you must do two things.</p>\n<ol>\n<li>Name your files with a <code class=\"language-text\">.tsx</code> extension</li>\n<li>Enable the <code class=\"language-text\">jsx</code> option</li>\n</ol>\n<p>TypeScript ships with three JSX modes: <code class=\"language-text\">preserve</code>, <code class=\"language-text\">react</code>, and <code class=\"language-text\">react-native</code>.\nThese modes only affect the emit stage - type checking is unaffected.\nThe <code class=\"language-text\">preserve</code> mode will keep the JSX as part of the output to be further consumed by another transform step (e.g. <a href=\"https://babeljs.io/\">Babel</a>).\nAdditionally the output will have a <code class=\"language-text\">.jsx</code> file extension.\nThe <code class=\"language-text\">react</code> mode will emit <code class=\"language-text\">React.createElement</code>, does not need to go through a JSX transformation before use, and the output will have a <code class=\"language-text\">.js</code> file extension.\nThe <code class=\"language-text\">react-native</code> mode is the equivalent of <code class=\"language-text\">preserve</code> in that it keeps all JSX, but the output will instead have a <code class=\"language-text\">.js</code> file extension.</p>\n<table>\n<thead>\n<tr>\n<th>Mode</th>\n<th>Input</th>\n<th>Output</th>\n<th>Output File Extension</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">preserve</code></td>\n<td><code class=\"language-text\">&lt;div /&gt;</code></td>\n<td><code class=\"language-text\">&lt;div /&gt;</code></td>\n<td><code class=\"language-text\">.jsx</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">react</code></td>\n<td><code class=\"language-text\">&lt;div /&gt;</code></td>\n<td><code class=\"language-text\">React.createElement(&quot;div&quot;)</code></td>\n<td><code class=\"language-text\">.js</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">react-native</code></td>\n<td><code class=\"language-text\">&lt;div /&gt;</code></td>\n<td><code class=\"language-text\">&lt;div /&gt;</code></td>\n<td><code class=\"language-text\">.js</code></td>\n</tr>\n</tbody>\n</table>\n<p>You can specify this mode using either the <code class=\"language-text\">--jsx</code> command line flag or the corresponding option in your <a href=\"./tsconfig.json.md\">tsconfig.json</a> file.</p>\n<blockquote>\n<p>*Note: You can specify the JSX factory function to use when targeting react JSX emit with <code class=\"language-text\">--jsxFactory</code> option (defaults to <code class=\"language-text\">React.createElement</code>)</p>\n</blockquote>\n<h1>The <code class=\"language-text\">as</code> operator</h1>\n<p><b><a href=\"#table-of-contents\">↥ back to top</a></b></p>\n<p>Recall how to write a type assertion:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>foo<span class=\"token operator\">></span>bar<span class=\"token punctuation\">;</span></code></pre></div>\n<p>This asserts the variable <code class=\"language-text\">bar</code> to have the type <code class=\"language-text\">foo</code>.\nSince TypeScript also uses angle brackets for type assertions, combining it with JSX’s syntax would introduce certain parsing difficulties. As a result, TypeScript disallows angle bracket type assertions in <code class=\"language-text\">.tsx</code> files.</p>\n<p>Since the above syntax cannot be used in <code class=\"language-text\">.tsx</code> files, an alternate type assertion operator should be used: <code class=\"language-text\">as</code>.\nThe example can easily be rewritten with the <code class=\"language-text\">as</code> operator.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> bar <span class=\"token keyword\">as</span> foo<span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">as</code> operator is available in both <code class=\"language-text\">.ts</code> and <code class=\"language-text\">.tsx</code> files, and is identical in behavior to the angle-bracket type assertion style.</p>\n<h1>Type Checking</h1>\n<p><b><a href=\"#table-of-contents\">↥ back to top</a></b></p>\n<p>In order to understand type checking with JSX, you must first understand the difference between intrinsic elements and value-based elements.\nGiven a JSX expression <code class=\"language-text\">&lt;expr /&gt;</code>, <code class=\"language-text\">expr</code> may either refer to something intrinsic to the environment (e.g. a <code class=\"language-text\">div</code> or <code class=\"language-text\">span</code> in a DOM environment) or to a custom component that you’ve created.\nThis is important for two reasons:</p>\n<ol>\n<li>For React, intrinsic elements are emitted as strings (<code class=\"language-text\">React.createElement(&quot;div&quot;)</code>), whereas a component you’ve created is not (<code class=\"language-text\">React.createElement(MyComponent)</code>).</li>\n<li>The types of the attributes being passed in the JSX element should be looked up differently.\nIntrinsic element attributes should be known <em>intrinsically</em> whereas components will likely want to specify their own set of attributes.</li>\n</ol>\n<p>TypeScript uses the <a href=\"http://facebook.github.io/react/docs/jsx-in-depth.html#html-tags-vs.-react-components\">same convention that React does</a> for distinguishing between these.\nAn intrinsic element always begins with a lowercase letter, and a value-based element always begins with an uppercase letter.</p>\n<h2>Intrinsic elements</h2>\n<p><b><a href=\"#table-of-contents\">↥ back to top</a></b></p>\n<p>Intrinsic elements are looked up on the special interface <code class=\"language-text\">JSX.IntrinsicElements</code>.\nBy default, if this interface is not specified, then anything goes and intrinsic elements will not be type checked.\nHowever, if this interface <em>is</em> present, then the name of the intrinsic element is looked up as a property on the <code class=\"language-text\">JSX.IntrinsicElements</code> interface.\nFor example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> <span class=\"token constant\">JSX</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IntrinsicElements</span> <span class=\"token punctuation\">{</span>\n        foo<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">&lt;</span>foo <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span>\n<span class=\"token operator\">&lt;</span>bar <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error</span></code></pre></div>\n<p>In the above example, <code class=\"language-text\">&lt;foo /&gt;</code> will work fine but <code class=\"language-text\">&lt;bar /&gt;</code> will result in an error since it has not been specified on <code class=\"language-text\">JSX.IntrinsicElements</code>.</p>\n<blockquote>\n<p>Note: You can also specify a catch-all string indexer on <code class=\"language-text\">JSX.IntrinsicElements</code> as follows:</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> <span class=\"token constant\">JSX</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IntrinsicElements</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">[</span>elemName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Value-based elements</h2>\n<p><b><a href=\"#table-of-contents\">↥ back to top</a></b></p>\n<p>Value-based elements are simply looked up by identifiers that are in scope.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> MyComponent <span class=\"token keyword\">from</span> <span class=\"token string\">\"./myComponent\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&lt;</span>MyComponent <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span>\n<span class=\"token operator\">&lt;</span>SomeOtherComponent <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error</span></code></pre></div>\n<p>There are two ways to define a value-based element:</p>\n<ol>\n<li>Function Component (FC)</li>\n<li>Class Component</li>\n</ol>\n<p>Because these two types of value-based elements are indistinguishable from each other in a JSX expression, first TS tries to resolve the expression as a Function Component using overload resolution. If the process succeeds, then TS finishes resolving the expression to its declaration. If the value fails to resolve as a Function Component, TS will then try to resolve it as a class component. If that fails, TS will report an error.</p>\n<h3>Function Component</h3>\n<p><b><a href=\"#table-of-contents\">↥ back to top</a></b></p>\n<p>As the name suggests, the component is defined as a JavaScript function where its first argument is a <code class=\"language-text\">props</code> object.\nTS enforces that its return type must be assignable to <code class=\"language-text\">JSX.Element</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">FooProp</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token constant\">X</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token constant\">Y</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">AnotherComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prop<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ComponentFoo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prop<span class=\"token punctuation\">:</span> FooProp</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>AnotherComponent name<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>prop<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">prop<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> color<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>Because a Function Component is simply a JavaScript function, function overloads may be used here as well:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ClickableProps</span> <span class=\"token punctuation\">{</span>\n  children<span class=\"token punctuation\">:</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>Element<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>Element\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">HomeProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ClickableProps</span> <span class=\"token punctuation\">{</span>\n  home<span class=\"token punctuation\">:</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>Element<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">SideProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ClickableProps</span> <span class=\"token punctuation\">{</span>\n  side<span class=\"token punctuation\">:</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>Element <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MainButton</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prop<span class=\"token punctuation\">:</span> HomeProps</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>Element<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">MainButton</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prop<span class=\"token punctuation\">:</span> SideProps</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>Element <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>Note: Function Components were formerly known as Stateless Function Components (SFC). As Function Components can no longer be considered stateless in recent versions of react, the type <code class=\"language-text\">SFC</code> and its alias <code class=\"language-text\">StatelessComponent</code> were deprecated.</p>\n</blockquote>\n<h3>Class Component</h3>\n<p><b><a href=\"#table-of-contents\">↥ back to top</a></b></p>\n<p>It is possible to define the type of a class component.\nHowever, to do so it is best to understand two new terms: the <em>element class type</em> and the <em>element instance type</em>.</p>\n<p>Given <code class=\"language-text\">&lt;Expr /&gt;</code>, the <em>element class type</em> is the type of <code class=\"language-text\">Expr</code>.\nSo in the example above, if <code class=\"language-text\">MyComponent</code> was an ES6 class the class type would be that class’s constructor and statics.\nIf <code class=\"language-text\">MyComponent</code> was a factory function, the class type would be that function.</p>\n<p>Once the class type is established, the instance type is determined by the union of the return types of the class type’s construct or call signatures (whichever is present).\nSo again, in the case of an ES6 class, the instance type would be the type of an instance of that class, and in the case of a factory function, it would be the type of the value returned from the function.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// use a construct signature</span>\n<span class=\"token keyword\">var</span> myComponent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// element class type => MyComponent</span>\n<span class=\"token comment\">// element instance type => { render: () => void }</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyFactoryFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">render</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// use a call signature</span>\n<span class=\"token keyword\">var</span> myComponent <span class=\"token operator\">=</span> <span class=\"token function\">MyFactoryFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// element class type => FactoryFunction</span>\n<span class=\"token comment\">// element instance type => { render: () => void }</span></code></pre></div>\n<p>The element instance type is interesting because it must be assignable to <code class=\"language-text\">JSX.ElementClass</code> or it will result in an error.\nBy default <code class=\"language-text\">JSX.ElementClass</code> is <code class=\"language-text\">{}</code>, but it can be augmented to limit the use of JSX to only those types that conform to the proper interface.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> <span class=\"token constant\">JSX</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ElementClass</span> <span class=\"token punctuation\">{</span>\n    render<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyFactoryFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">render</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">&lt;</span>MyComponent <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span>\n<span class=\"token operator\">&lt;</span>MyFactoryFunction <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NotAValidComponent</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">NotAValidFactoryFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">&lt;</span>NotAValidComponent <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error</span>\n<span class=\"token operator\">&lt;</span>NotAValidFactoryFunction <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error</span></code></pre></div>\n<h2>Attribute type checking</h2>\n<p><b><a href=\"#table-of-contents\">↥ back to top</a></b></p>\n<p>The first step to type checking attributes is to determine the <em>element attributes type</em>.\nThis is slightly different between intrinsic and value-based elements.</p>\n<p>For intrinsic elements, it is the type of the property on <code class=\"language-text\">JSX.IntrinsicElements</code></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> <span class=\"token constant\">JSX</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IntrinsicElements</span> <span class=\"token punctuation\">{</span>\n    foo<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> bar<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// element attributes type for 'foo' is '{bar?: boolean}'</span>\n<span class=\"token operator\">&lt;</span>foo bar <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>For value-based elements, it is a bit more complex.\nIt is determined by the type of a property on the <em>element instance type</em> that was previously determined.\nWhich property to use is determined by <code class=\"language-text\">JSX.ElementAttributesProperty</code>.\nIt should be declared with a single property.\nThe name of that property is then used.\nAs of TypeScript 2.8, if <code class=\"language-text\">JSX.ElementAttributesProperty</code> is not provided, the type of first parameter of the class element’s constructor or Function Component’s call will be used instead.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> <span class=\"token constant\">JSX</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ElementAttributesProperty</span> <span class=\"token punctuation\">{</span>\n    props<span class=\"token punctuation\">;</span> <span class=\"token comment\">// specify the property name to use</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// specify the property on the element instance type</span>\n  props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    foo<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// element attributes type for 'MyComponent' is '{foo?: string}'</span>\n<span class=\"token operator\">&lt;</span>MyComponent foo<span class=\"token operator\">=</span><span class=\"token string\">\"bar\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>The element attribute type is used to type check the attributes in the JSX.\nOptional and required properties are supported.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> <span class=\"token constant\">JSX</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IntrinsicElements</span> <span class=\"token punctuation\">{</span>\n    foo<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> requiredProp<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> optionalProp<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">&lt;</span>foo requiredProp<span class=\"token operator\">=</span><span class=\"token string\">\"bar\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span>\n<span class=\"token operator\">&lt;</span>foo requiredProp<span class=\"token operator\">=</span><span class=\"token string\">\"bar\"</span> optionalProp<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span>\n<span class=\"token operator\">&lt;</span>foo <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error, requiredProp is missing</span>\n<span class=\"token operator\">&lt;</span>foo requiredProp<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error, requiredProp should be a string</span>\n<span class=\"token operator\">&lt;</span>foo requiredProp<span class=\"token operator\">=</span><span class=\"token string\">\"bar\"</span> unknownProp <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error, unknownProp does not exist</span>\n<span class=\"token operator\">&lt;</span>foo requiredProp<span class=\"token operator\">=</span><span class=\"token string\">\"bar\"</span> some<span class=\"token operator\">-</span><span class=\"token builtin\">unknown</span><span class=\"token operator\">-</span>prop <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok, because 'some-unknown-prop' is not a valid identifier</span></code></pre></div>\n<blockquote>\n<p>Note: If an attribute name is not a valid JS identifier (like a <code class=\"language-text\">data-*</code> attribute), it is not considered to be an error if it is not found in the element attributes type.</p>\n</blockquote>\n<p>Additionally, the <code class=\"language-text\">JSX.IntrinsicAttributes</code> interface can be used to specify extra properties used by the JSX framework which are not generally used by the components’ props or arguments - for instance <code class=\"language-text\">key</code> in React. Specializing further, the generic <code class=\"language-text\">JSX.IntrinsicClassAttributes&lt;T&gt;</code> type may also be used to specify the same kind of extra attributes just for class components (and not Function Components). In this type, the generic parameter corresponds to the class instance type. In React, this is used to allow the <code class=\"language-text\">ref</code> attribute of type <code class=\"language-text\">Ref&lt;T&gt;</code>. Generally speaking, all of the properties on these interfaces should be optional, unless you intend that users of your JSX framework need to provide some attribute on every tag.</p>\n<p>The spread operator also works:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> requiredProp<span class=\"token punctuation\">:</span> <span class=\"token string\">\"bar\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>foo</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span>\n\n<span class=\"token keyword\">var</span> badProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>foo</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">badProps</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error</span></code></pre></div>\n<h2>Children Type Checking</h2>\n<p><b><a href=\"#table-of-contents\">↥ back to top</a></b></p>\n<p>In TypeScript 2.3, TS introduced type checking of <em>children</em>. <em>children</em> is a special property in an <em>element attributes type</em> where child <em>JSXExpression</em>s are taken to be inserted into the attributes.\nSimilar to how TS uses <code class=\"language-text\">JSX.ElementAttributesProperty</code> to determine the name of <em>props</em>, TS uses <code class=\"language-text\">JSX.ElementChildrenAttribute</code> to determine the name of <em>children</em> within those props.\n<code class=\"language-text\">JSX.ElementChildrenAttribute</code> should be declared with a single property.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> <span class=\"token constant\">JSX</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ElementChildrenAttribute</span> <span class=\"token punctuation\">{</span>\n    children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// specify children name to use</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hello<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hello<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n  World\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">CustomComp</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>CustomComp<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Hello World<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span><span class=\"token string\">\"This is just a JS expression...\"</span> <span class=\"token operator\">+</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>CustomComp<span class=\"token operator\">></span></code></pre></div>\n<p>You can specify the type of <em>children</em> like any other attribute. This will override the default type from, eg the <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react\">React typings</a> if you use them.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">PropsType</span> <span class=\"token punctuation\">{</span>\n  children<span class=\"token punctuation\">:</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>Element\n  name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token operator\">&lt;</span>PropsType<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// OK</span>\n<span class=\"token operator\">&lt;</span>Component name<span class=\"token operator\">=</span><span class=\"token string\">\"foo\"</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hello World<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Component<span class=\"token operator\">></span>\n\n<span class=\"token comment\">// Error: children is of type JSX.Element not array of JSX.Element</span>\n<span class=\"token operator\">&lt;</span>Component name<span class=\"token operator\">=</span><span class=\"token string\">\"bar\"</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hello World<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Hello World<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Component<span class=\"token operator\">></span>\n\n<span class=\"token comment\">// Error: children is of type JSX.Element not array of JSX.Element or string.</span>\n<span class=\"token operator\">&lt;</span>Component name<span class=\"token operator\">=</span><span class=\"token string\">\"baz\"</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hello<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n  World\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Component<span class=\"token operator\">></span></code></pre></div>\n<h1>The JSX result type</h1>\n<p><b><a href=\"#table-of-contents\">↥ back to top</a></b></p>\n<p>By default the result of a JSX expression is typed as <code class=\"language-text\">any</code>.\nYou can customize the type by specifying the <code class=\"language-text\">JSX.Element</code> interface.\nHowever, it is not possible to retrieve type information about the element, attributes or children of the JSX from this interface.\nIt is a black box.</p>\n<h1>Embedding Expressions</h1>\n<p><b><a href=\"#table-of-contents\">↥ back to top</a></b></p>\n<p>JSX allows you to embed expressions between tags by surrounding the expressions with curly braces (<code class=\"language-text\">{ }</code>).</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>i <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>The above code will result in an error since you cannot divide a string by a number.\nThe output, when using the <code class=\"language-text\">preserve</code> option, looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>i <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h1>React integration</h1>\n<p><b><a href=\"#table-of-contents\">↥ back to top</a></b></p>\n<p>To use JSX with React you should use the <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react\">React typings</a>.\nThese typings define the <code class=\"language-text\">JSX</code> namespace appropriately for use with React.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/// &lt;reference path=\"react.d.ts\" /></span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token operator\">&lt;</span>Props<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">&lt;</span>MyComponent foo<span class=\"token operator\">=</span><span class=\"token string\">\"bar\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span>\n<span class=\"token operator\">&lt;</span>MyComponent foo<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error</span></code></pre></div>\n<h1>Factory Functions</h1>\n<p><b><a href=\"#table-of-contents\">↥ back to top</a></b></p>\n<p>The exact factory function used by the <code class=\"language-text\">jsx: react</code> compiler option is configurable. It may be set using either the <code class=\"language-text\">jsxFactory</code> command line option, or an inline <code class=\"language-text\">@jsx</code> comment pragma to set it on a per-file basis. For example, if you set <code class=\"language-text\">jsxFactory</code> to <code class=\"language-text\">createElement</code>, <code class=\"language-text\">&lt;div /&gt;</code> will emit as <code class=\"language-text\">createElement(&quot;div&quot;)</code> instead of <code class=\"language-text\">React.createElement(&quot;div&quot;)</code>.</p>\n<p>The comment pragma version may be used like so (in TypeScript 2.8):</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> preact <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"preact\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* @jsx preact.h */</span>\n<span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>div <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>emits as:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> preact <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"preact\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> preact<span class=\"token punctuation\">.</span><span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The factory chosen will also affect where the <code class=\"language-text\">JSX</code> namespace is looked up (for type checking information) before falling back to the global one. If the factory is defined as <code class=\"language-text\">React.createElement</code> (the default), the compiler will check for <code class=\"language-text\">React.JSX</code> before checking for a global <code class=\"language-text\">JSX</code>. If the factory is defined as <code class=\"language-text\">h</code>, it will check for <code class=\"language-text\">h.JSX</code> before a global <code class=\"language-text\">JSX</code>.</p>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/jsx.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/jsx.html","isOldHandbook":true}}}