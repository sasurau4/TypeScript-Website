{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/functions.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"63955a11-72b7-54d9-9ddd-9ee9869dc267","excerpt":"{% raw %}# Introduction Functions are the fundamental building block of any application in JavaScript.\nThey’re how you build up layers of abstraction, mimicking…","html":"<p>{% raw %}# Introduction</p>\n<p>Functions are the fundamental building block of any application in JavaScript.\nThey’re how you build up layers of abstraction, mimicking classes, information hiding, and modules.\nIn TypeScript, while there are classes, namespaces, and modules, functions still play the key role in describing how to <em>do</em> things.\nTypeScript also adds some new capabilities to the standard JavaScript functions to make them easier to work with.</p>\n<h1>Functions</h1>\n<p>To begin, just as in JavaScript, TypeScript functions can be created both as a named function or as an anonymous function.\nThis allows you to choose the most appropriate approach for your application, whether you’re building a list of functions in an API or a one-off function to hand off to another function.</p>\n<p>To quickly recap what these two approaches look like in JavaScript:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Named function</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Anonymous function</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">myAdd</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Just as in JavaScript, functions can refer to variables outside of the function body.\nWhen they do so, they’re said to <em>capture</em> these variables.\nWhile understanding how this works (and the trade-offs when using this technique) is outside of the scope of this article, having a firm understanding how this mechanic works is an important piece of working with JavaScript and TypeScript.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> z <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">addToZ</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">+</span> z<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>Function Types</h1>\n<h2>Typing the function</h2>\n<p>Let’s add types to our simple examples from earlier:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">myAdd</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We can add types to each of the parameters and then to the function itself to add a return type.\nTypeScript can figure the return type out by looking at the return statements, so we can also optionally leave this off in many cases.</p>\n<h2>Writing the function type</h2>\n<p>Now that we’ve typed the function, let’s write the full type of the function out by looking at each piece of the function type.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">myAdd</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function-variable function\">number</span> <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>A function’s type has the same two parts: the type of the arguments and the return type.\nWhen writing out the whole function type, both parts are required.\nWe write out the parameter types just like a parameter list, giving each parameter a name and a type.\nThis name is just to help with readability.\nWe could have instead written:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">myAdd</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">baseValue<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> increment<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function-variable function\">number</span> <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As long as the parameter types line up, it’s considered a valid type for the function, regardless of the names you give the parameters in the function type.</p>\n<p>The second part is the return type.\nWe make it clear which is the return type by using a fat arrow (<code class=\"language-text\">=&gt;</code>) between the parameters and the return type.\nAs mentioned before, this is a required part of the function type, so if the function doesn’t return a value, you would use <code class=\"language-text\">void</code> instead of leaving it off.</p>\n<p>Of note, only the parameters and the return type make up the function type.\nCaptured variables are not reflected in the type.\nIn effect, captured variables are part of the “hidden state” of any function and do not make up its API.</p>\n<h2>Inferring the types</h2>\n<p>In playing with the example, you may notice that the TypeScript compiler can figure out the type even if you only have types on one side of the equation:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// myAdd has the full function type</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">myAdd</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span>  x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The parameters 'x' and 'y' have the type number</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">myAdd</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">baseValue<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> increment<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function-variable function\">number</span> <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is called “contextual typing”, a form of type inference.\nThis helps cut down on the amount of effort to keep your program typed.</p>\n<h1>Optional and Default Parameters</h1>\n<p>In TypeScript, every parameter is assumed to be required by the function.\nThis doesn’t mean that it can’t be given <code class=\"language-text\">null</code> or <code class=\"language-text\">undefined</code>, but rather, when the function is called, the compiler will check that the user has provided a value for each parameter.\nThe compiler also assumes that these parameters are the only parameters that will be passed to the function.\nIn short, the number of arguments given to a function has to match the number of parameters the function expects.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">firstName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> lastName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> lastName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> result1 <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// error, too few parameters</span>\n<span class=\"token keyword\">let</span> result2 <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Adams\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Sr.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// error, too many parameters</span>\n<span class=\"token keyword\">let</span> result3 <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Adams\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// ah, just right</span></code></pre></div>\n<p>In JavaScript, every parameter is optional, and users may leave them off as they see fit.\nWhen they do, their value is <code class=\"language-text\">undefined</code>.\nWe can get this functionality in TypeScript by adding a <code class=\"language-text\">?</code> to the end of parameters we want to be optional.\nFor example, let’s say we want the last name parameter from above to be optional:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">firstName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> lastName<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastName<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> lastName<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">return</span> firstName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> result1 <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// works correctly now</span>\n<span class=\"token keyword\">let</span> result2 <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Adams\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Sr.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// error, too many parameters</span>\n<span class=\"token keyword\">let</span> result3 <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Adams\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// ah, just right</span></code></pre></div>\n<p>Any optional parameters must follow required parameters.\nHad we wanted to make the first name optional, rather than the last name, we would need to change the order of parameters in the function, putting the first name last in the list.</p>\n<p>In TypeScript, we can also set a value that a parameter will be assigned if the user does not provide one, or if the user passes <code class=\"language-text\">undefined</code> in its place.\nThese are called default-initialized parameters.\nLet’s take the previous example and default the last name to <code class=\"language-text\">&quot;Smith&quot;</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> lastName <span class=\"token operator\">=</span> <span class=\"token string\">\"Smith\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> lastName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> result1 <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// works correctly now, returns \"Bob Smith\"</span>\n<span class=\"token keyword\">let</span> result2 <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span> undefined<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// still works, also returns \"Bob Smith\"</span>\n<span class=\"token keyword\">let</span> result3 <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Adams\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Sr.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// error, too many parameters</span>\n<span class=\"token keyword\">let</span> result4 <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Adams\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// ah, just right</span></code></pre></div>\n<p>Default-initialized parameters that come after all required parameters are treated as optional, and just like optional parameters, can be omitted when calling their respective function.\nThis means optional parameters and trailing default parameters will share commonality in their types, so both</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">firstName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> lastName<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>and</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> lastName <span class=\"token operator\">=</span> <span class=\"token string\">\"Smith\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>share the same type <code class=\"language-text\">(firstName: string, lastName?: string) =&gt; string</code>.\nThe default value of <code class=\"language-text\">lastName</code> disappears in the type, only leaving behind the fact that the parameter is optional.</p>\n<p>Unlike plain optional parameters, default-initialized parameters don’t <em>need</em> to occur after required parameters.\nIf a default-initialized parameter comes before a required parameter, users need to explicitly pass <code class=\"language-text\">undefined</code> to get the default initialized value.\nFor example, we could write our last example with only a default initializer on <code class=\"language-text\">firstName</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span>firstName <span class=\"token operator\">=</span> <span class=\"token string\">\"Will\"</span><span class=\"token punctuation\">,</span> lastName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> lastName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> result1 <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// error, too few parameters</span>\n<span class=\"token keyword\">let</span> result2 <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Adams\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Sr.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// error, too many parameters</span>\n<span class=\"token keyword\">let</span> result3 <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Adams\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// okay and returns \"Bob Adams\"</span>\n<span class=\"token keyword\">let</span> result4 <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span>undefined<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Adams\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// okay and returns \"Will Adams\"</span></code></pre></div>\n<h1>Rest Parameters</h1>\n<p>Required, optional, and default parameters all have one thing in common: they talk about one parameter at a time.\nSometimes, you want to work with multiple parameters as a group, or you may not know how many parameters a function will ultimately take.\nIn JavaScript, you can work with the arguments directly using the <code class=\"language-text\">arguments</code> variable that is visible inside every function body.</p>\n<p>In TypeScript, you can gather these arguments together into a variable:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">firstName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>restOfName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> restOfName<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// employeeName will be \"Joseph Samuel Lucas MacKinzie\"</span>\n<span class=\"token keyword\">let</span> employeeName <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Joseph\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Samuel\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Lucas\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"MacKinzie\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><em>Rest parameters</em> are treated as a boundless number of optional parameters.\nWhen passing arguments for a rest parameter, you can use as many as you want; you can even pass none.\nThe compiler will build an array of the arguments passed in with the name given after the ellipsis (<code class=\"language-text\">...</code>), allowing you to use it in your function.</p>\n<p>The ellipsis is also used in the type of the function with rest parameters:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">firstName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>restOfName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> restOfName<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">buildNameFun</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fname<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> buildName<span class=\"token punctuation\">;</span></code></pre></div>\n<h1><code class=\"language-text\">this</code></h1>\n<p>Learning how to use <code class=\"language-text\">this</code> in JavaScript is something of a rite of passage.\nSince TypeScript is a superset of JavaScript, TypeScript developers also need to learn how to use <code class=\"language-text\">this</code> and how to spot when it’s not being used correctly.\nFortunately, TypeScript lets you catch incorrect uses of <code class=\"language-text\">this</code> with a couple of techniques.\nIf you need to learn how <code class=\"language-text\">this</code> works in JavaScript, though, first read Yehuda Katz’s <a href=\"http://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/\">Understanding JavaScript Function Invocation and “this”</a>.\nYehuda’s article explains the inner workings of <code class=\"language-text\">this</code> very well, so we’ll just cover the basics here.</p>\n<h2><code class=\"language-text\">this</code> and arrow functions</h2>\n<p>In JavaScript, <code class=\"language-text\">this</code> is a variable that’s set when a function is called.\nThis makes it a very powerful and flexible feature, but it comes at the cost of always having to know about the context that a function is executing in.\nThis is notoriously confusing, especially when returning a function or passing a function as an argument.</p>\n<p>Let’s look at an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> deck <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    suits<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hearts\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"spades\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"clubs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"diamonds\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    cards<span class=\"token punctuation\">:</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">52</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">createCardPicker</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> pickedCard <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">52</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> pickedSuit <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>pickedCard <span class=\"token operator\">/</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>suit<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>suits<span class=\"token punctuation\">[</span>pickedSuit<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> card<span class=\"token punctuation\">:</span> pickedCard <span class=\"token operator\">%</span> <span class=\"token number\">13</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> cardPicker <span class=\"token operator\">=</span> deck<span class=\"token punctuation\">.</span><span class=\"token function\">createCardPicker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> pickedCard <span class=\"token operator\">=</span> <span class=\"token function\">cardPicker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"card: \"</span> <span class=\"token operator\">+</span> pickedCard<span class=\"token punctuation\">.</span>card <span class=\"token operator\">+</span> <span class=\"token string\">\" of \"</span> <span class=\"token operator\">+</span> pickedCard<span class=\"token punctuation\">.</span>suit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Notice that <code class=\"language-text\">createCardPicker</code> is a function that itself returns a function.\nIf we tried to run the example, we would get an error instead of the expected alert box.\nThis is because the <code class=\"language-text\">this</code> being used in the function created by <code class=\"language-text\">createCardPicker</code> will be set to <code class=\"language-text\">window</code> instead of our <code class=\"language-text\">deck</code> object.\nThat’s because we call <code class=\"language-text\">cardPicker()</code> on its own.\nA top-level non-method syntax call like this will use <code class=\"language-text\">window</code> for <code class=\"language-text\">this</code>.\n(Note: under strict mode, <code class=\"language-text\">this</code> will be <code class=\"language-text\">undefined</code> rather than <code class=\"language-text\">window</code>).</p>\n<p>We can fix this by making sure the function is bound to the correct <code class=\"language-text\">this</code> before we return the function to be used later.\nThis way, regardless of how it’s later used, it will still be able to see the original <code class=\"language-text\">deck</code> object.\nTo do this, we change the function expression to use the ECMAScript 6 arrow syntax.\nArrow functions capture the <code class=\"language-text\">this</code> where the function is created rather than where it is invoked:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> deck <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    suits<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hearts\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"spades\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"clubs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"diamonds\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    cards<span class=\"token punctuation\">:</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">52</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">createCardPicker</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// NOTE: the line below is now an arrow function, allowing us to capture 'this' right here</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> pickedCard <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">52</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> pickedSuit <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>pickedCard <span class=\"token operator\">/</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>suit<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>suits<span class=\"token punctuation\">[</span>pickedSuit<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> card<span class=\"token punctuation\">:</span> pickedCard <span class=\"token operator\">%</span> <span class=\"token number\">13</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> cardPicker <span class=\"token operator\">=</span> deck<span class=\"token punctuation\">.</span><span class=\"token function\">createCardPicker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> pickedCard <span class=\"token operator\">=</span> <span class=\"token function\">cardPicker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"card: \"</span> <span class=\"token operator\">+</span> pickedCard<span class=\"token punctuation\">.</span>card <span class=\"token operator\">+</span> <span class=\"token string\">\" of \"</span> <span class=\"token operator\">+</span> pickedCard<span class=\"token punctuation\">.</span>suit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Even better, TypeScript will warn you when you make this mistake if you pass the <code class=\"language-text\">--noImplicitThis</code> flag to the compiler.\nIt will point out that <code class=\"language-text\">this</code> in <code class=\"language-text\">this.suits[pickedSuit]</code> is of type <code class=\"language-text\">any</code>.</p>\n<h2><code class=\"language-text\">this</code> parameters</h2>\n<p>Unfortunately, the type of <code class=\"language-text\">this.suits[pickedSuit]</code> is still <code class=\"language-text\">any</code>.\nThat’s because <code class=\"language-text\">this</code> comes from the function expression inside the object literal.\nTo fix this, you can provide an explicit <code class=\"language-text\">this</code> parameter.\n<code class=\"language-text\">this</code> parameters are fake parameters that come first in the parameter list of a function:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// make sure `this` is unusable in this standalone function</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let’s add a couple of interfaces to our example above, <code class=\"language-text\">Card</code> and <code class=\"language-text\">Deck</code>, to make the types clearer and easier to reuse:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Card</span> <span class=\"token punctuation\">{</span>\n    suit<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    card<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Deck</span> <span class=\"token punctuation\">{</span>\n    suits<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    cards<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">createCardPicker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">:</span> Deck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Card<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> deck<span class=\"token punctuation\">:</span> Deck <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    suits<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hearts\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"spades\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"clubs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"diamonds\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    cards<span class=\"token punctuation\">:</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">52</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// NOTE: The function now explicitly specifies that its callee must be of type Deck</span>\n    <span class=\"token function-variable function\">createCardPicker</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">:</span> Deck</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> pickedCard <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">52</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> pickedSuit <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>pickedCard <span class=\"token operator\">/</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>suit<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>suits<span class=\"token punctuation\">[</span>pickedSuit<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> card<span class=\"token punctuation\">:</span> pickedCard <span class=\"token operator\">%</span> <span class=\"token number\">13</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> cardPicker <span class=\"token operator\">=</span> deck<span class=\"token punctuation\">.</span><span class=\"token function\">createCardPicker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> pickedCard <span class=\"token operator\">=</span> <span class=\"token function\">cardPicker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"card: \"</span> <span class=\"token operator\">+</span> pickedCard<span class=\"token punctuation\">.</span>card <span class=\"token operator\">+</span> <span class=\"token string\">\" of \"</span> <span class=\"token operator\">+</span> pickedCard<span class=\"token punctuation\">.</span>suit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now TypeScript knows that <code class=\"language-text\">createCardPicker</code> expects to be called on a <code class=\"language-text\">Deck</code> object.\nThat means that <code class=\"language-text\">this</code> is of type <code class=\"language-text\">Deck</code> now, not <code class=\"language-text\">any</code>, so <code class=\"language-text\">--noImplicitThis</code> will not cause any errors.</p>\n<h3><code class=\"language-text\">this</code> parameters in callbacks</h3>\n<p>You can also run into errors with <code class=\"language-text\">this</code> in callbacks, when you pass functions to a library that will later call them.\nBecause the library that calls your callback will call it like a normal function, <code class=\"language-text\">this</code> will be <code class=\"language-text\">undefined</code>.\nWith some work you can use <code class=\"language-text\">this</code> parameters to prevent errors with callbacks too.\nFirst, the library author needs to annotate the callback type with <code class=\"language-text\">this</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">UIElement</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">addClickListener</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">onclick</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">:</span> Event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">this: void</code> means that <code class=\"language-text\">addClickListener</code> expects <code class=\"language-text\">onclick</code> to be a function that does not require a <code class=\"language-text\">this</code> type.\nSecond, annotate your calling code with <code class=\"language-text\">this</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Handler</span> <span class=\"token punctuation\">{</span>\n    info<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">onClickBad</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">:</span> Handler<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">:</span> Event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// oops, used `this` here. using this callback would crash at runtime</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>info <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> h <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Handler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuiElement<span class=\"token punctuation\">.</span><span class=\"token function\">addClickListener</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">.</span>onClickBad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error!</span></code></pre></div>\n<p>With <code class=\"language-text\">this</code> annotated, you make it explicit that <code class=\"language-text\">onClickBad</code> must be called on an instance of <code class=\"language-text\">Handler</code>.\nThen TypeScript will detect that <code class=\"language-text\">addClickListener</code> requires a function that has <code class=\"language-text\">this: void</code>.\nTo fix the error, change the type of <code class=\"language-text\">this</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Handler</span> <span class=\"token punctuation\">{</span>\n    info<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">onClickGood</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">:</span> Event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// can't use `this` here because it's of type void!</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clicked!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> h <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Handler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuiElement<span class=\"token punctuation\">.</span><span class=\"token function\">addClickListener</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">.</span>onClickGood<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Because <code class=\"language-text\">onClickGood</code> specifies its <code class=\"language-text\">this</code> type as <code class=\"language-text\">void</code>, it is legal to pass to <code class=\"language-text\">addClickListener</code>.\nOf course, this also means that it can’t use <code class=\"language-text\">this.info</code>.\nIf you want both then you’ll have to use an arrow function:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Handler</span> <span class=\"token punctuation\">{</span>\n    info<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function-variable function\">onClickGood</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">:</span> Event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>info <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>message <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This works because arrow functions use the outer <code class=\"language-text\">this</code>, so you can always pass them to something that expects <code class=\"language-text\">this: void</code>.\nThe downside is that one arrow function is created per object of type Handler.\nMethods, on the other hand, are only created once and attached to Handler’s prototype.\nThey are shared between all objects of type Handler.</p>\n<h1>Overloads</h1>\n<p>JavaScript is inherently a very dynamic language.\nIt’s not uncommon for a single JavaScript function to return different types of objects based on the shape of the arguments passed in.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> suits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hearts\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"spades\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"clubs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"diamonds\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">pickCard</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Check to see if we're working with an object/array</span>\n    <span class=\"token comment\">// if so, they gave us the deck and we'll pick the card</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x <span class=\"token operator\">==</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> pickedCard <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> pickedCard<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Otherwise just let them pick the card</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x <span class=\"token operator\">==</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> pickedSuit <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">/</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> suit<span class=\"token punctuation\">:</span> suits<span class=\"token punctuation\">[</span>pickedSuit<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> card<span class=\"token punctuation\">:</span> x <span class=\"token operator\">%</span> <span class=\"token number\">13</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> myDeck <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> suit<span class=\"token punctuation\">:</span> <span class=\"token string\">\"diamonds\"</span><span class=\"token punctuation\">,</span> card<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> suit<span class=\"token punctuation\">:</span> <span class=\"token string\">\"spades\"</span><span class=\"token punctuation\">,</span> card<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> suit<span class=\"token punctuation\">:</span> <span class=\"token string\">\"hearts\"</span><span class=\"token punctuation\">,</span> card<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> pickedCard1 <span class=\"token operator\">=</span> myDeck<span class=\"token punctuation\">[</span><span class=\"token function\">pickCard</span><span class=\"token punctuation\">(</span>myDeck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"card: \"</span> <span class=\"token operator\">+</span> pickedCard1<span class=\"token punctuation\">.</span>card <span class=\"token operator\">+</span> <span class=\"token string\">\" of \"</span> <span class=\"token operator\">+</span> pickedCard1<span class=\"token punctuation\">.</span>suit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> pickedCard2 <span class=\"token operator\">=</span> <span class=\"token function\">pickCard</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"card: \"</span> <span class=\"token operator\">+</span> pickedCard2<span class=\"token punctuation\">.</span>card <span class=\"token operator\">+</span> <span class=\"token string\">\" of \"</span> <span class=\"token operator\">+</span> pickedCard2<span class=\"token punctuation\">.</span>suit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here, the <code class=\"language-text\">pickCard</code> function will return two different things based on what the user has passed in.\nIf the users passes in an object that represents the deck, the function will pick the card.\nIf the user picks the card, we tell them which card they’ve picked.\nBut how do we describe this to the type system?</p>\n<p>The answer is to supply multiple function types for the same function as a list of overloads.\nThis list is what the compiler will use to resolve function calls.\nLet’s create a list of overloads that describe what our <code class=\"language-text\">pickCard</code> accepts and what it returns.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> suits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hearts\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"spades\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"clubs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"diamonds\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">pickCard</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>suit<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> card<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">pickCard</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>suit<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> card<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">pickCard</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Check to see if we're working with an object/array</span>\n    <span class=\"token comment\">// if so, they gave us the deck and we'll pick the card</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x <span class=\"token operator\">==</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> pickedCard <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> pickedCard<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Otherwise just let them pick the card</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x <span class=\"token operator\">==</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> pickedSuit <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">/</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> suit<span class=\"token punctuation\">:</span> suits<span class=\"token punctuation\">[</span>pickedSuit<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> card<span class=\"token punctuation\">:</span> x <span class=\"token operator\">%</span> <span class=\"token number\">13</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> myDeck <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> suit<span class=\"token punctuation\">:</span> <span class=\"token string\">\"diamonds\"</span><span class=\"token punctuation\">,</span> card<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> suit<span class=\"token punctuation\">:</span> <span class=\"token string\">\"spades\"</span><span class=\"token punctuation\">,</span> card<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> suit<span class=\"token punctuation\">:</span> <span class=\"token string\">\"hearts\"</span><span class=\"token punctuation\">,</span> card<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> pickedCard1 <span class=\"token operator\">=</span> myDeck<span class=\"token punctuation\">[</span><span class=\"token function\">pickCard</span><span class=\"token punctuation\">(</span>myDeck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"card: \"</span> <span class=\"token operator\">+</span> pickedCard1<span class=\"token punctuation\">.</span>card <span class=\"token operator\">+</span> <span class=\"token string\">\" of \"</span> <span class=\"token operator\">+</span> pickedCard1<span class=\"token punctuation\">.</span>suit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> pickedCard2 <span class=\"token operator\">=</span> <span class=\"token function\">pickCard</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"card: \"</span> <span class=\"token operator\">+</span> pickedCard2<span class=\"token punctuation\">.</span>card <span class=\"token operator\">+</span> <span class=\"token string\">\" of \"</span> <span class=\"token operator\">+</span> pickedCard2<span class=\"token punctuation\">.</span>suit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>With this change, the overloads now give us type checked calls to the <code class=\"language-text\">pickCard</code> function.</p>\n<p>In order for the compiler to pick the correct type check, it follows a similar process to the underlying JavaScript.\nIt looks at the overload list and, proceeding with the first overload, attempts to call the function with the provided parameters.\nIf it finds a match, it picks this overload as the correct overload.\nFor this reason, it’s customary to order overloads from most specific to least specific.</p>\n<p>Note that the <code class=\"language-text\">function pickCard(x): any</code> piece is not part of the overload list, so it only has two overloads: one that takes an object and one that takes a number.\nCalling <code class=\"language-text\">pickCard</code> with any other parameter types would cause an error.</p>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/functions.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/functions.html","isOldHandbook":true}}}