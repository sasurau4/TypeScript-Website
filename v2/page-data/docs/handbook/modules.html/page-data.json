{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/modules.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"cc9084cf-90ce-52cf-ac0f-643134a6c8d8","excerpt":"{% raw %}> A note about terminology:\nIt’s important to note that in TypeScript 1.5, the nomenclature has changed.\n“Internal modules” are now “namespaces…","html":"<p>{% raw %}> <strong>A note about terminology:</strong>\nIt’s important to note that in TypeScript 1.5, the nomenclature has changed.\n“Internal modules” are now “namespaces”.\n“External modules” are now simply “modules”, as to align with <a href=\"http://www.ecma-international.org/ecma-262/6.0/\">ECMAScript 2015</a>’s terminology, (namely that <code class=\"language-text\">module X {</code> is equivalent to the now-preferred <code class=\"language-text\">namespace X {</code>).</p>\n<h1>Introduction</h1>\n<p>Starting with ECMAScript 2015, JavaScript has a concept of modules. TypeScript shares this concept.</p>\n<p>Modules are executed within their own scope, not in the global scope; this means that variables, functions, classes, etc. declared in a module are not visible outside the module unless they are explicitly exported using one of the <a href=\"#export\"><code class=\"language-text\">export</code> forms</a>.\nConversely, to consume a variable, function, class, interface, etc. exported from a different module, it has to be imported using one of the <a href=\"#import\"><code class=\"language-text\">import</code> forms</a>.</p>\n<p>Modules are declarative; the relationships between modules are specified in terms of imports and exports at the file level.</p>\n<p>Modules import one another using a module loader.\nAt runtime the module loader is responsible for locating and executing all dependencies of a module before executing it.\nWell-known module loaders used in JavaScript are Node.js’s loader for <a href=\"https://en.wikipedia.org/wiki/CommonJS\">CommonJS</a> modules and the <a href=\"http://requirejs.org/\">RequireJS</a> loader for <a href=\"https://github.com/amdjs/amdjs-api/blob/master/AMD.md\">AMD</a> modules in Web applications.</p>\n<p>In TypeScript, just as in ECMAScript 2015, any file containing a top-level <code class=\"language-text\">import</code> or <code class=\"language-text\">export</code> is considered a module.\nConversely, a file without any top-level <code class=\"language-text\">import</code> or <code class=\"language-text\">export</code> declarations is treated as a script whose contents are available in the global scope (and therefore to modules as well).</p>\n<h1>Export</h1>\n<h2>Exporting a declaration</h2>\n<p>Any declaration (such as a variable, function, class, type alias, or interface) can be exported by adding the <code class=\"language-text\">export</code> keyword.</p>\n<h5>StringValidator.ts</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">StringValidator</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>ZipCodeValidator.ts</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> StringValidator <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./StringValidator\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> numberRegexp <span class=\"token operator\">=</span> <span class=\"token regex\">/^[0-9]+$/</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ZipCodeValidator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">StringValidator</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">5</span> <span class=\"token operator\">&amp;&amp;</span> numberRegexp<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Export statements</h2>\n<p>Export statements are handy when exports need to be renamed for consumers, so the above example can be written as:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ZipCodeValidator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">StringValidator</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">5</span> <span class=\"token operator\">&amp;&amp;</span> numberRegexp<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> ZipCodeValidator <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> ZipCodeValidator <span class=\"token keyword\">as</span> mainValidator <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Re-exports</h2>\n<p>Often modules extend other modules, and partially expose some of their features.\nA re-export does not import it locally, or introduce a local variable.</p>\n<h5>ParseIntBasedZipCodeValidator.ts</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ParseIntBasedZipCodeValidator</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">5</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> s<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Export original validator but rename it</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>ZipCodeValidator <span class=\"token keyword\">as</span> RegExpBasedZipCodeValidator<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./ZipCodeValidator\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Optionally, a module can wrap one or more modules and combine all their exports using <code class=\"language-text\">export * from &quot;module&quot;</code> syntax.</p>\n<h5>AllValidators.ts</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./StringValidator\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// exports 'StringValidator' interface</span>\n<span class=\"token keyword\">export</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./ZipCodeValidator\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// exports 'ZipCodeValidator' and const 'numberRegexp' class</span>\n<span class=\"token keyword\">export</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./ParseIntBasedZipCodeValidator\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//  exports the 'ParseIntBasedZipCodeValidator' class</span>\n                                                 <span class=\"token comment\">// and re-exports 'RegExpBasedZipCodeValidator' as alias</span>\n                                                 <span class=\"token comment\">// of the 'ZipCodeValidator' class from 'ZipCodeValidator.ts'</span>\n                                                 <span class=\"token comment\">// module.</span></code></pre></div>\n<h1>Import</h1>\n<p>Importing is just about as easy as exporting from a module.\nImporting an exported declaration is done through using one of the <code class=\"language-text\">import</code> forms below:</p>\n<h2>Import a single export from a module</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ZipCodeValidator <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./ZipCodeValidator\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> myValidator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ZipCodeValidator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>imports can also be renamed</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ZipCodeValidator <span class=\"token keyword\">as</span> <span class=\"token constant\">ZCV</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./ZipCodeValidator\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> myValidator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ZCV</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Import the entire module into a single variable, and use it to access the module exports</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> validator <span class=\"token keyword\">from</span> <span class=\"token string\">\"./ZipCodeValidator\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> myValidator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">validator<span class=\"token punctuation\">.</span>ZipCodeValidator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Import a module for side-effects only</h2>\n<p>Though not recommended practice, some modules set up some global state that can be used by other modules.\nThese modules may not have any exports, or the consumer is not interested in any of their exports.\nTo import these modules, use:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token string\">\"./my-module.js\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>Default exports</h1>\n<p>Each module can optionally export a <code class=\"language-text\">default</code> export.\nDefault exports are marked with the keyword <code class=\"language-text\">default</code>; and there can only be one <code class=\"language-text\">default</code> export per module.\n<code class=\"language-text\">default</code> exports are imported using a different import form.</p>\n<p><code class=\"language-text\">default</code> exports are really handy.\nFor instance, a library like jQuery might have a default export of <code class=\"language-text\">jQuery</code> or <code class=\"language-text\">$</code>, which we’d probably also import under the name <code class=\"language-text\">$</code> or <code class=\"language-text\">jQuery</code>.</p>\n<h5><a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/jquery/JQuery.d.ts\">JQuery.d.ts</a></h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">let</span> $<span class=\"token punctuation\">:</span> JQuery<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> $<span class=\"token punctuation\">;</span></code></pre></div>\n<h5>App.ts</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> $ <span class=\"token keyword\">from</span> <span class=\"token string\">\"jquery\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button.continue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Next Step...\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Classes and function declarations can be authored directly as default exports.\nDefault export class and function declaration names are optional.</p>\n<h5>ZipCodeValidator.ts</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ZipCodeValidator</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> numberRegexp <span class=\"token operator\">=</span> <span class=\"token regex\">/^[0-9]+$/</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">5</span> <span class=\"token operator\">&amp;&amp;</span> ZipCodeValidator<span class=\"token punctuation\">.</span>numberRegexp<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>Test.ts</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> validator <span class=\"token keyword\">from</span> <span class=\"token string\">\"./ZipCodeValidator\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> myValidator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">validator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>or</p>\n<h5>StaticZipCodeValidator.ts</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> numberRegexp <span class=\"token operator\">=</span> <span class=\"token regex\">/^[0-9]+$/</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">5</span> <span class=\"token operator\">&amp;&amp;</span> numberRegexp<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>Test.ts</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> validate <span class=\"token keyword\">from</span> <span class=\"token string\">\"./StaticZipCodeValidator\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> strings <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"98052\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"101\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Use function validate</span>\nstrings<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>s<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"matches\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"does not match\"</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">default</code> exports can also be just values:</p>\n<h5>OneTwoThree.ts</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h5>Log.ts</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> num <span class=\"token keyword\">from</span> <span class=\"token string\">\"./OneTwoThree\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"123\"</span></code></pre></div>\n<h1><code class=\"language-text\">export =</code> and <code class=\"language-text\">import = require()</code></h1>\n<p>Both CommonJS and AMD generally have the concept of an <code class=\"language-text\">exports</code> object which contains all exports from a module.</p>\n<p>They also support replacing the <code class=\"language-text\">exports</code> object with a custom single object.\nDefault exports are meant to act as a replacement for this behavior; however, the two are incompatible.\nTypeScript supports <code class=\"language-text\">export =</code> to model the traditional CommonJS and AMD workflow.</p>\n<p>The <code class=\"language-text\">export =</code> syntax specifies a single object that is exported from the module.\nThis can be a class, interface, namespace, function, or enum.</p>\n<p>When exporting a module using <code class=\"language-text\">export =</code>, TypeScript-specific <code class=\"language-text\">import module = require(&quot;module&quot;)</code> must be used to import the module.</p>\n<h5>ZipCodeValidator.ts</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> numberRegexp <span class=\"token operator\">=</span> <span class=\"token regex\">/^[0-9]+$/</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ZipCodeValidator</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">5</span> <span class=\"token operator\">&amp;&amp;</span> numberRegexp<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token operator\">=</span> ZipCodeValidator<span class=\"token punctuation\">;</span></code></pre></div>\n<h5>Test.ts</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> zip <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./ZipCodeValidator\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Some samples to try</span>\n<span class=\"token keyword\">let</span> strings <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"98052\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"101\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Validators to use</span>\n<span class=\"token keyword\">let</span> validator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">zip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Show whether each string passed each validator</span>\nstrings<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> s <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" - </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> validator<span class=\"token punctuation\">.</span><span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"matches\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"does not match\"</span> <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>Code Generation for Modules</h1>\n<p>Depending on the module target specified during compilation, the compiler will generate appropriate code for Node.js (<a href=\"http://wiki.commonjs.org/wiki/CommonJS\">CommonJS</a>), require.js (<a href=\"https://github.com/amdjs/amdjs-api/wiki/AMD\">AMD</a>), <a href=\"https://github.com/umdjs/umd\">UMD</a>, <a href=\"https://github.com/systemjs/systemjs\">SystemJS</a>, or <a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-modules\">ECMAScript 2015 native modules</a> (ES6) module-loading systems.\nFor more information on what the <code class=\"language-text\">define</code>, <code class=\"language-text\">require</code> and <code class=\"language-text\">register</code> calls in the generated code do, consult the documentation for each module loader.</p>\n<p>This simple example shows how the names used during importing and exporting get translated into the module loading code.</p>\n<h5>SimpleModule.ts</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> m <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mod\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span>something <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h5>AMD / RequireJS SimpleModule.js</h5>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"require\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"exports\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./mod\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">require<span class=\"token punctuation\">,</span> exports<span class=\"token punctuation\">,</span> mod_1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    exports<span class=\"token punctuation\">.</span>t <span class=\"token operator\">=</span> mod_1<span class=\"token punctuation\">.</span>something <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h5>CommonJS / Node SimpleModule.js</h5>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> mod_1 <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./mod\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span>t <span class=\"token operator\">=</span> mod_1<span class=\"token punctuation\">.</span>something <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h5>UMD SimpleModule.js</h5>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">factory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> module <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> v <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span>require<span class=\"token punctuation\">,</span> exports<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> define <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span> <span class=\"token operator\">&amp;&amp;</span> define<span class=\"token punctuation\">.</span>amd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"require\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"exports\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./mod\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">require<span class=\"token punctuation\">,</span> exports</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> mod_1 <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./mod\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    exports<span class=\"token punctuation\">.</span>t <span class=\"token operator\">=</span> mod_1<span class=\"token punctuation\">.</span>something <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h5>System SimpleModule.js</h5>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">System<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"./mod\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">exports_1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> mod_1<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> t<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        setters<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>\n            <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">mod_1_1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                mod_1 <span class=\"token operator\">=</span> mod_1_1<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">execute</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">exports_1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t\"</span><span class=\"token punctuation\">,</span> t <span class=\"token operator\">=</span> mod_1<span class=\"token punctuation\">.</span>something <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h5>Native ECMAScript 2015 modules SimpleModule.js</h5>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> something <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./mod\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">var</span> t <span class=\"token operator\">=</span> something <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>Simple Example</h1>\n<p>Below, we’ve consolidated the Validator implementations used in previous examples to only export a single named export from each module.</p>\n<p>To compile, we must specify a module target on the command line. For Node.js, use <code class=\"language-text\">--module commonjs</code>;\nfor require.js, use <code class=\"language-text\">--module amd</code>. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">tsc --module commonjs Test.ts</code></pre></div>\n<p>When compiled, each module will become a separate <code class=\"language-text\">.js</code> file.\nAs with reference tags, the compiler will follow <code class=\"language-text\">import</code> statements to compile dependent files.</p>\n<h5>Validation.ts</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">StringValidator</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>LettersOnlyValidator.ts</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> StringValidator <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Validation\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> lettersRegexp <span class=\"token operator\">=</span> <span class=\"token regex\">/^[A-Za-z]+$/</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LettersOnlyValidator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">StringValidator</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> lettersRegexp<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>ZipCodeValidator.ts</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> StringValidator <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Validation\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> numberRegexp <span class=\"token operator\">=</span> <span class=\"token regex\">/^[0-9]+$/</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ZipCodeValidator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">StringValidator</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">5</span> <span class=\"token operator\">&amp;&amp;</span> numberRegexp<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>Test.ts</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> StringValidator <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Validation\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ZipCodeValidator <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./ZipCodeValidator\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> LettersOnlyValidator <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./LettersOnlyValidator\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Some samples to try</span>\n<span class=\"token keyword\">let</span> strings <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"98052\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"101\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Validators to use</span>\n<span class=\"token keyword\">let</span> validators<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> StringValidator<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nvalidators<span class=\"token punctuation\">[</span><span class=\"token string\">\"ZIP code\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ZipCodeValidator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvalidators<span class=\"token punctuation\">[</span><span class=\"token string\">\"Letters only\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LettersOnlyValidator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Show whether each string passed each validator</span>\nstrings<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> name <span class=\"token keyword\">in</span> validators<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> s <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" - </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> validators<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"matches\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"does not match\"</span> <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> name <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>Optional Module Loading and Other Advanced Loading Scenarios</h1>\n<p>In some cases, you may want to only load a module under some conditions.\nIn TypeScript, we can use the pattern shown below to implement this and other advanced loading scenarios to directly invoke the module loaders without losing type safety.</p>\n<p>The compiler detects whether each module is used in the emitted JavaScript.\nIf a module identifier is only ever used as part of a type annotations and never as an expression, then no <code class=\"language-text\">require</code> call is emitted for that module.\nThis elision of unused references is a good performance optimization, and also allows for optional loading of those modules.</p>\n<p>The core idea of the pattern is that the <code class=\"language-text\">import id = require(&quot;...&quot;)</code> statement gives us access to the types exposed by the module.\nThe module loader is invoked (through <code class=\"language-text\">require</code>) dynamically, as shown in the <code class=\"language-text\">if</code> blocks below.\nThis leverages the reference-elision optimization so that the module is only loaded when needed.\nFor this pattern to work, it’s important that the symbol defined via an <code class=\"language-text\">import</code> is only used in type positions (i.e. never in a position that would be emitted into the JavaScript).</p>\n<p>To maintain type safety, we can use the <code class=\"language-text\">typeof</code> keyword.\nThe <code class=\"language-text\">typeof</code> keyword, when used in a type position, produces the type of a value, in this case the type of the module.</p>\n<h5>Dynamic Module Loading in Node.js</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">moduleName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ZipCodeValidator <span class=\"token keyword\">as</span> Zip <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./ZipCodeValidator\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>needZipValidation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> ZipCodeValidator<span class=\"token punctuation\">:</span> <span class=\"token keyword\">typeof</span> Zip <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./ZipCodeValidator\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> validator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ZipCodeValidator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>validator<span class=\"token punctuation\">.</span><span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>Sample: Dynamic Module Loading in require.js</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>moduleNames<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">onLoad</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> Zip <span class=\"token keyword\">from</span> <span class=\"token string\">\"./ZipCodeValidator\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>needZipValidation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"./ZipCodeValidator\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ZipCodeValidator<span class=\"token punctuation\">:</span> <span class=\"token keyword\">typeof</span> Zip</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> validator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ZipCodeValidator<span class=\"token punctuation\">.</span>ZipCodeValidator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>validator<span class=\"token punctuation\">.</span><span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>Sample: Dynamic Module Loading in System.js</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">const</span> System<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ZipCodeValidator <span class=\"token keyword\">as</span> Zip <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./ZipCodeValidator\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>needZipValidation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    System<span class=\"token punctuation\">.</span><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./ZipCodeValidator\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ZipCodeValidator<span class=\"token punctuation\">:</span> <span class=\"token keyword\">typeof</span> Zip</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ZipCodeValidator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>Working with Other JavaScript Libraries</h1>\n<p>To describe the shape of libraries not written in TypeScript, we need to declare the API that the library exposes.</p>\n<p>We call declarations that don’t define an implementation “ambient”.\nTypically, these are defined in <code class=\"language-text\">.d.ts</code> files.\nIf you’re familiar with C/C++, you can think of these as <code class=\"language-text\">.h</code> files.\nLet’s look at a few examples.</p>\n<h2>Ambient Modules</h2>\n<p>In Node.js, most tasks are accomplished by loading one or more modules.\nWe could define each module in its own <code class=\"language-text\">.d.ts</code> file with top-level export declarations, but it’s more convenient to write them as one larger <code class=\"language-text\">.d.ts</code> file.\nTo do so, we use a construct similar to ambient namespaces, but we use the <code class=\"language-text\">module</code> keyword and the quoted name of the module which will be available to a later import.\nFor example:</p>\n<h5>node.d.ts (simplified excerpt)</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">\"url\"</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Url</span> <span class=\"token punctuation\">{</span>\n        protocol<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n        hostname<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n        pathname<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">urlStr<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> parseQueryString<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> slashesDenoteHost<span class=\"token operator\">?</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Url<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">\"path\"</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>paths<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">var</span> sep<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we can <code class=\"language-text\">/// &lt;reference&gt;</code> <code class=\"language-text\">node.d.ts</code> and then load the modules using <code class=\"language-text\">import url = require(&quot;url&quot;);</code> or <code class=\"language-text\">import * as URL from &quot;url&quot;</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/// &lt;reference path=\"node.d.ts\"/></span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">URL</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"url\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> myUrl <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://www.typescriptlang.org\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Shorthand ambient modules</h3>\n<p>If you don’t want to take the time to write out declarations before using a new module, you can use a shorthand declaration to get started quickly.</p>\n<h5>declarations.d.ts</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">\"hot-new-module\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>All imports from a shorthand module will have the <code class=\"language-text\">any</code> type.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>y<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"hot-new-module\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">x</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Wildcard module declarations</h3>\n<p>Some module loaders such as <a href=\"https://github.com/systemjs/systemjs/blob/master/docs/overview.md#plugin-syntax\">SystemJS</a>\nand <a href=\"https://github.com/amdjs/amdjs-api/blob/master/LoaderPlugins.md\">AMD</a> allow non-JavaScript content to be imported.\nThese typically use a prefix or suffix to indicate the special loading semantics.\nWildcard module declarations can be used to cover these cases.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">\"*!text\"</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> content<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> content<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Some do it the other way around.</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">\"json!*\"</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now you can import things that match <code class=\"language-text\">&quot;*!text&quot;</code> or <code class=\"language-text\">&quot;json!*&quot;</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> fileContent <span class=\"token keyword\">from</span> <span class=\"token string\">\"./xyz.txt!text\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> data <span class=\"token keyword\">from</span> <span class=\"token string\">\"json!http://example.com/data.json\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> fileContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>UMD modules</h3>\n<p>Some libraries are designed to be used in many module loaders, or with no module loading (global variables).\nThese are known as <a href=\"https://github.com/umdjs/umd\">UMD</a> modules.\nThese libraries can be accessed through either an import or a global variable.\nFor example:</p>\n<h5>math-lib.d.ts</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">namespace</span> mathLib<span class=\"token punctuation\">;</span></code></pre></div>\n<p>The library can then be used as an import within modules:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> isPrime <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"math-lib\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmathLib<span class=\"token punctuation\">.</span><span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ERROR: can't use the global definition from inside a module</span></code></pre></div>\n<p>It can also be used as a global variable, but only inside of a script.\n(A script is a file with no imports or exports.)</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">mathLib<span class=\"token punctuation\">.</span><span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>Guidance for structuring modules</h1>\n<h2>Export as close to top-level as possible</h2>\n<p>Consumers of your module should have as little friction as possible when using things that you export.\nAdding too many levels of nesting tends to be cumbersome, so think carefully about how you want to structure things.</p>\n<p>Exporting a namespace from your module is an example of adding too many layers of nesting.\nWhile namespaces sometime have their uses, they add an extra level of indirection when using modules.\nThis can quickly become a pain point for users, and is usually unnecessary.</p>\n<p>Static methods on an exported class have a similar problem - the class itself adds a layer of nesting.\nUnless it increases expressivity or intent in a clearly useful way, consider simply exporting a helper function.</p>\n<h3>If you’re only exporting a single <code class=\"language-text\">class</code> or <code class=\"language-text\">function</code>, use <code class=\"language-text\">export default</code></h3>\n<p>Just as “exporting near the top-level” reduces friction on your module’s consumers, so does introducing a default export.\nIf a module’s primary purpose is to house one specific export, then you should consider exporting it as a default export.\nThis makes both importing and actually using the import a little easier.\nFor example:</p>\n<h4>MyClass.ts</h4>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeType</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>MyFunc.ts</h4>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getThing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"thing\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Consumer.ts</h4>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> t <span class=\"token keyword\">from</span> <span class=\"token string\">\"./MyClass\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> f <span class=\"token keyword\">from</span> <span class=\"token string\">\"./MyFunc\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">t</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is optimal for consumers. They can name your type whatever they want (<code class=\"language-text\">t</code> in this case) and don’t have to do any excessive dotting to find your objects.</p>\n<h3>If you’re exporting multiple objects, put them all at top-level</h3>\n<h4>MyThings.ts</h4>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeType</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">someFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Conversely when importing:</p>\n<h3>Explicitly list imported names</h3>\n<h4>Consumer.ts</h4>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> SomeType<span class=\"token punctuation\">,</span> someFunc <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./MyThings\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SomeType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token function\">someFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Use the namespace import pattern if you’re importing a large number of things</h3>\n<h4>MyLargeModule.ts</h4>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Tree</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Flower</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Consumer.ts</h4>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> myLargeModule <span class=\"token keyword\">from</span> <span class=\"token string\">\"./MyLargeModule.ts\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">myLargeModule<span class=\"token punctuation\">.</span>Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Re-export to extend</h2>\n<p>Often you will need to extend functionality on a module.\nA common JS pattern is to augment the original object with <em>extensions</em>, similar to how JQuery extensions work.\nAs we’ve mentioned before, modules do not <em>merge</em> like global namespace objects would.\nThe recommended solution is to <em>not</em> mutate the original object, but rather export a new entity that provides the new functionality.</p>\n<p>Consider a simple calculator implementation defined in module <code class=\"language-text\">Calculator.ts</code>.\nThe module also exports a helper function to test the calculator functionality by passing a list of input strings and writing the result at the end.</p>\n<h4>Calculator.ts</h4>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Calculator</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> current <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> memory <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> operator<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token function\">processDigit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">digit<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> currentValue<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>digit <span class=\"token operator\">>=</span> <span class=\"token string\">\"0\"</span> <span class=\"token operator\">&amp;&amp;</span> digit <span class=\"token operator\">&lt;=</span> <span class=\"token string\">\"9\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> currentValue <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>digit<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token function\">processOperator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">operator<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"+\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>operator<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> operator<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token function\">evaluateOperator</span><span class=\"token punctuation\">(</span>operator<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>operator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> left <span class=\"token operator\">-</span> right<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> left <span class=\"token operator\">*</span> right<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> left <span class=\"token operator\">/</span> right<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>operator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>memory <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">evaluateOperator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>operator<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>memory<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>memory <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">handleChar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">char<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>char <span class=\"token operator\">===</span> <span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">processDigit</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">!==</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">processOperator</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">!==</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>operator <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Unsupported input: '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>char<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">'</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>memory<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c<span class=\"token punctuation\">:</span> Calculator<span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> input<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        c<span class=\"token punctuation\">.</span><span class=\"token function\">handleChar</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">result of '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>input<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">' is '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">'</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here is a simple test for the calculator using the exposed <code class=\"language-text\">test</code> function.</p>\n<h4>TestCalculator.ts</h4>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Calculator<span class=\"token punctuation\">,</span> test <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Calculator\"</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Calculator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token string\">\"1+2*33/11=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints 9</span></code></pre></div>\n<p>Now to extend this to add support for input with numbers in bases other than 10, let’s create <code class=\"language-text\">ProgrammerCalculator.ts</code></p>\n<h4>ProgrammerCalculator.ts</h4>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Calculator <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Calculator\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ProgrammerCalculator</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Calculator</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> digits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"5\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"6\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"7\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"8\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"9\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"D\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"E\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"F\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">public</span> base<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> maxBase <span class=\"token operator\">=</span> ProgrammerCalculator<span class=\"token punctuation\">.</span>digits<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>base <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> base <span class=\"token operator\">></span> maxBase<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">base has to be within 0 to </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>maxBase<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> inclusive.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token function\">processDigit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">digit<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> currentValue<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ProgrammerCalculator<span class=\"token punctuation\">.</span>digits<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>digit<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> currentValue <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>base <span class=\"token operator\">+</span> ProgrammerCalculator<span class=\"token punctuation\">.</span>digits<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>digit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Export the new extended calculator as Calculator</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> ProgrammerCalculator <span class=\"token keyword\">as</span> Calculator <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Also, export the helper function</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> test <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Calculator\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The new module <code class=\"language-text\">ProgrammerCalculator</code> exports an API shape similar to that of the original <code class=\"language-text\">Calculator</code> module, but does not augment any objects in the original module.\nHere is a test for our ProgrammerCalculator class:</p>\n<h4>TestProgrammerCalculator.ts</h4>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Calculator<span class=\"token punctuation\">,</span> test <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./ProgrammerCalculator\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Calculator</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token string\">\"001+010=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints 3</span></code></pre></div>\n<h2>Do not use namespaces in modules</h2>\n<p>When first moving to a module-based organization, a common tendency is to wrap exports in an additional layer of namespaces.\nModules have their own scope, and only exported declarations are visible from outside the module.\nWith this in mind, namespace provide very little, if any, value when working with modules.</p>\n<p>On the organization front, namespaces are handy for grouping together logically-related objects and types in the global scope.\nFor example, in C#, you’re going to find all the collection types in System.Collections.\nBy organizing our types into hierarchical namespaces, we provide a good “discovery” experience for users of those types.\nModules, on the other hand, are already present in a file system, necessarily.\nWe have to resolve them by path and filename, so there’s a logical organization scheme for us to use.\nWe can have a /collections/generic/ folder with a list module in it.</p>\n<p>Namespaces are important to avoid naming collisions in the global scope.\nFor example, you might have <code class=\"language-text\">My.Application.Customer.AddForm</code> and <code class=\"language-text\">My.Application.Order.AddForm</code> — two types with the same name, but a different namespace.\nThis, however, is not an issue with modules.\nWithin a module, there’s no plausible reason to have two objects with the same name.\nFrom the consumption side, the consumer of any given module gets to pick the name that they will use to refer to the module, so accidental naming conflicts are impossible.</p>\n<blockquote>\n<p>For more discussion about modules and namespaces see <a href=\"./Namespaces%20and%20Modules.md\">Namespaces and Modules</a>.</p>\n</blockquote>\n<h2>Red Flags</h2>\n<p>All of the following are red flags for module structuring. Double-check that you’re not trying to namespace your external modules if any of these apply to your files:</p>\n<ul>\n<li>A file whose only top-level declaration is <code class=\"language-text\">export namespace Foo { ... }</code> (remove <code class=\"language-text\">Foo</code> and move everything ‘up’ a level)</li>\n<li>Multiple files that have the same <code class=\"language-text\">export namespace Foo {</code> at top-level (don’t think that these are going to combine into one <code class=\"language-text\">Foo</code>!)</li>\n</ul>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/modules.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/modules.html","isOldHandbook":true}}}