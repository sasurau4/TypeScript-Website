{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/iterators-and-generators.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"59a10f2a-9630-5281-a482-571f8c5e3e74","excerpt":"{% raw %}# Iterables An object is deemed iterable if it has an implementation for the  property.\nSome built-in types like , , , , , , etc. have their  propertyâ€¦","html":"<p>{% raw %}# Iterables</p>\n<p>An object is deemed iterable if it has an implementation for the <a href=\"Symbols.md#symboliterator\"><code class=\"language-text\">Symbol.iterator</code></a> property.\nSome built-in types like <code class=\"language-text\">Array</code>, <code class=\"language-text\">Map</code>, <code class=\"language-text\">Set</code>, <code class=\"language-text\">String</code>, <code class=\"language-text\">Int32Array</code>, <code class=\"language-text\">Uint32Array</code>, etc. have their <code class=\"language-text\">Symbol.iterator</code> property already implemented.\n<code class=\"language-text\">Symbol.iterator</code> function on an object is responsible for returning the list of values to iterate on.</p>\n<h2><code class=\"language-text\">for..of</code> statements</h2>\n<p><code class=\"language-text\">for..of</code> loops over an iterable object, invoking the <code class=\"language-text\">Symbol.iterator</code> property on the object.\nHere is a simple <code class=\"language-text\">for..of</code> loop on an array:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> someArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> entry <span class=\"token keyword\">of</span> someArray<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1, \"string\", false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3><code class=\"language-text\">for..of</code> vs. <code class=\"language-text\">for..in</code> statements</h3>\n<p>Both <code class=\"language-text\">for..of</code> and <code class=\"language-text\">for..in</code> statements iterate over lists; the values iterated on are different though, <code class=\"language-text\">for..in</code> returns a list of <em>keys</em> on the object being iterated, whereas <code class=\"language-text\">for..of</code> returns a list of <em>values</em> of the numeric properties of the object being iterated.</p>\n<p>Here is an example that demonstrates this distinction:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">in</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"0\", \"1\", \"2\",</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">of</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"4\", \"5\", \"6\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Another distinction is that <code class=\"language-text\">for..in</code> operates on any object; it serves as a way to inspect properties on this object.\n<code class=\"language-text\">for..of</code> on the other hand, is mainly interested in values of iterable objects. Built-in objects like <code class=\"language-text\">Map</code> and <code class=\"language-text\">Set</code> implement <code class=\"language-text\">Symbol.iterator</code> property allowing access to stored values.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> pets <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"Cat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Dog\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hamster\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npets<span class=\"token punctuation\">[</span><span class=\"token string\">\"species\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"mammals\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> pet <span class=\"token keyword\">in</span> pets<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"species\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> pet <span class=\"token keyword\">of</span> pets<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Cat\", \"Dog\", \"Hamster\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Code generation</h3>\n<h4>Targeting ES5 and ES3</h4>\n<p>When targeting an ES5 or ES3-compliant engine, iterators are only allowed on values of <code class=\"language-text\">Array</code> type.\nIt is an error to use <code class=\"language-text\">for..of</code> loops on non-Array values, even if these non-Array values implement the <code class=\"language-text\">Symbol.iterator</code> property.</p>\n<p>The compiler will generate a simple <code class=\"language-text\">for</code> loop for a <code class=\"language-text\">for..of</code> loop, for instance:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> num <span class=\"token keyword\">of</span> numbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>will be generated as:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> _i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> _i <span class=\"token operator\">&lt;</span> numbers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> _i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">[</span>_i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Targeting ECMAScript 2015 and higher</h4>\n<p>When targeting an ECMAScipt 2015-compliant engine, the compiler will generate <code class=\"language-text\">for..of</code> loops to target the built-in iterator implementation in the engine.</p>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/iterators-and-generators.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/iterators-and-generators.html","isOldHandbook":true}}}