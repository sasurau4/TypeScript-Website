{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/namespaces-and-modules.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"acfc8383-2e1c-5db7-9de3-9a8fd67fa21e","excerpt":"{% raw %}> A note about terminology:\nIt’s important to note that in TypeScript 1.5, the nomenclature has changed.\n“Internal modules” are now “namespaces…","html":"<p>{% raw %}> <strong>A note about terminology:</strong>\nIt’s important to note that in TypeScript 1.5, the nomenclature has changed.\n“Internal modules” are now “namespaces”.\n“External modules” are now simply “modules”, as to align with <a href=\"http://www.ecma-international.org/ecma-262/6.0/\">ECMAScript 2015</a>’s terminology, (namely that <code class=\"language-text\">module X {</code> is equivalent to the now-preferred <code class=\"language-text\">namespace X {</code>).</p>\n<h1>Introduction</h1>\n<p>This post outlines the various ways to organize your code using namespaces and modules in TypeScript.\nWe’ll also go over some advanced topics of how to use namespaces and modules, and address some common pitfalls when using them in TypeScript.</p>\n<p>See the <a href=\"/553f6b4de5b5158344ac98a247a45b6b/Modules.md\">Modules</a> documentation for more information about modules.\nSee the <a href=\"/6af9afe3ba88fb85cd6cb8b6cbc08358/Namespaces.md\">Namespaces</a> documentation for more information about namespaces.</p>\n<h1>Using Namespaces</h1>\n<p>Namespaces are simply named JavaScript objects in the global namespace.\nThis makes namespaces a very simple construct to use.\nThey can span multiple files, and can be concatenated using <code class=\"language-text\">--outFile</code>.\nNamespaces can be a good way to structure your code in a Web Application, with all dependencies included as <code class=\"language-text\">&lt;script&gt;</code> tags in your HTML page.</p>\n<p>Just like all global namespace pollution, it can be hard to identify component dependencies, especially in a large application.</p>\n<h1>Using Modules</h1>\n<p>Just like namespaces, modules can contain both code and declarations.\nThe main difference is that modules <em>declare</em> their dependencies.</p>\n<p>Modules also have a dependency on a module loader (such as CommonJs/Require.js).\nFor a small JS application this might not be optimal, but for larger applications, the cost comes with long term modularity and maintainability benefits.\nModules provide for better code reuse, stronger isolation and better tooling support for bundling.</p>\n<p>It is also worth noting that, for Node.js applications, modules are the default and the recommended approach to structure your code.</p>\n<p>Starting with ECMAScript 2015, modules are native part of the language, and should be supported by all compliant engine implementations.\nThus, for new projects modules would be the recommended code organization mechanism.</p>\n<h1>Pitfalls of Namespaces and Modules</h1>\n<p>In this section we’ll describe various common pitfalls in using namespaces and modules, and how to avoid them.</p>\n<h2><code class=\"language-text\">/// &lt;reference&gt;</code>-ing a module</h2>\n<p>A common mistake is to try to use the <code class=\"language-text\">/// &lt;reference ... /&gt;</code> syntax to refer to a module file, rather than using an <code class=\"language-text\">import</code> statement.\nTo understand the distinction, we first need to understand how the compiler can locate the type information for a module based on the path of an <code class=\"language-text\">import</code> (e.g. the <code class=\"language-text\">...</code> in <code class=\"language-text\">import x from &quot;...&quot;;</code>, <code class=\"language-text\">import x = require(&quot;...&quot;);</code>, etc.) path.</p>\n<p>The compiler will try to find a <code class=\"language-text\">.ts</code>, <code class=\"language-text\">.tsx</code>, and then a <code class=\"language-text\">.d.ts</code> with the appropriate path.\nIf a specific file could not be found, then the compiler will look for an <em>ambient module declaration</em>.\nRecall that these need to be declared in a <code class=\"language-text\">.d.ts</code> file.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">myModules.d.ts</code></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// In a .d.ts file or .ts file that is not a module:</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">\"SomeModule\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">myOtherModule.ts</code></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/// &lt;reference path=\"myModules.d.ts\" /></span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> m <span class=\"token keyword\">from</span> <span class=\"token string\">\"SomeModule\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<p>The reference tag here allows us to locate the declaration file that contains the declaration for the ambient module.\nThis is how the <code class=\"language-text\">node.d.ts</code> file that several of the TypeScript samples use is consumed.</p>\n<h2>Needless Namespacing</h2>\n<p>If you’re converting a program from namespaces to modules, it can be easy to end up with a file that looks like this:</p>\n<ul>\n<li>\n<p><code class=\"language-text\">shapes.ts</code></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">namespace</span> Shapes <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Triangle</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<p>The top-level module here <code class=\"language-text\">Shapes</code> wraps up <code class=\"language-text\">Triangle</code> and <code class=\"language-text\">Square</code> for no reason.\nThis is confusing and annoying for consumers of your module:</p>\n<ul>\n<li>\n<p><code class=\"language-text\">shapeConsumer.ts</code></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> shapes <span class=\"token keyword\">from</span> <span class=\"token string\">\"./shapes\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">shapes<span class=\"token punctuation\">.</span>Shapes<span class=\"token punctuation\">.</span>Triangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// shapes.Shapes?</span></code></pre></div>\n</li>\n</ul>\n<p>A key feature of modules in TypeScript is that two different modules will never contribute names to the same scope.\nBecause the consumer of a module decides what name to assign it, there’s no need to proactively wrap up the exported symbols in a namespace.</p>\n<p>To reiterate why you shouldn’t try to namespace your module contents, the general idea of namespacing is to provide logical grouping of constructs and to prevent name collisions.\nBecause the module file itself is already a logical grouping, and its top-level name is defined by the code that imports it, it’s unnecessary to use an additional module layer for exported objects.</p>\n<p>Here’s a revised example:</p>\n<ul>\n<li>\n<p><code class=\"language-text\">shapes.ts</code></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Triangle</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">shapeConsumer.ts</code></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> shapes <span class=\"token keyword\">from</span> <span class=\"token string\">\"./shapes\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">shapes<span class=\"token punctuation\">.</span>Triangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h2>Trade-offs of Modules</h2>\n<p>Just as there is a one-to-one correspondence between JS files and modules, TypeScript has a one-to-one correspondence between module source files and their emitted JS files.\nOne effect of this is that it’s not possible to concatenate multiple module source files depending on the module system you target.\nFor instance, you can’t use the <code class=\"language-text\">outFile</code> option while targeting <code class=\"language-text\">commonjs</code> or <code class=\"language-text\">umd</code>, but with TypeScript 1.8 and later, <a href=\"./release%20notes/TypeScript%201.8.md#concatenate-amd-and-system-modules-with---outfile\">it’s possible</a> to use <code class=\"language-text\">outFile</code> when targeting <code class=\"language-text\">amd</code> or <code class=\"language-text\">system</code>.</p>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/namespaces-and-modules.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/namespaces-and-modules.html","isOldHandbook":true}}}