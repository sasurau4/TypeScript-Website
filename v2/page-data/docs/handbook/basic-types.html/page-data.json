{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/basic-types.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"a612612d-3fa1-5ade-a6fb-e6b501b2806e","excerpt":"{% raw %}# Introduction For programs to be useful, we need to be able to work with some of the simplest units of data: numbers, strings, structures, boolean…","html":"<p>{% raw %}# Introduction</p>\n<p>For programs to be useful, we need to be able to work with some of the simplest units of data: numbers, strings, structures, boolean values, and the like.\nIn TypeScript, we support much the same types as you would expect in JavaScript, with a convenient enumeration type thrown in to help things along.</p>\n<h1>Boolean</h1>\n<p>The most basic datatype is the simple true/false value, which JavaScript and TypeScript call a <code class=\"language-text\">boolean</code> value.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> isDone<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>Number</h1>\n<p>As in JavaScript, all numbers in TypeScript are floating point values.\nThese floating point numbers get the type <code class=\"language-text\">number</code>.\nIn addition to hexadecimal and decimal literals, TypeScript also supports binary and octal literals introduced in ECMAScript 2015.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> decimal<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> hex<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xf00d</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> binary<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0b1010</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> octal<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0o744</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>String</h1>\n<p>Another fundamental part of creating programs in JavaScript for webpages and servers alike is working with textual data.\nAs in other languages, we use the type <code class=\"language-text\">string</code> to refer to these textual datatypes.\nJust like JavaScript, TypeScript also uses double quotes (<code class=\"language-text\">&quot;</code>) or single quotes (<code class=\"language-text\">&#39;</code>) to surround string data.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> color<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">;</span>\ncolor <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can also use <em>template strings</em>, which can span multiple lines and have embedded expressions.\nThese strings are surrounded by the backtick/backquote (<code class=\"language-text\">`</code>) character, and embedded expressions are of the form <code class=\"language-text\">${ expr }</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> fullName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bob Bobbington</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">37</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> sentence<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, my name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> fullName <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.\n\nI'll be </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> age <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> years old next month.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is equivalent to declaring <code class=\"language-text\">sentence</code> like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> sentence<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, my name is \"</span> <span class=\"token operator\">+</span> fullName <span class=\"token operator\">+</span> <span class=\"token string\">\".\\n\\n\"</span> <span class=\"token operator\">+</span>\n    <span class=\"token string\">\"I'll be \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>age <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" years old next month.\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>Array</h1>\n<p>TypeScript, like JavaScript, allows you to work with arrays of values.\nArray types can be written in one of two ways.\nIn the first, you use the type of the elements followed by <code class=\"language-text\">[]</code> to denote an array of that element type:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> list<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The second way uses a generic array type, <code class=\"language-text\">Array&lt;elemType&gt;</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> list<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>Tuple</h1>\n<p>Tuple types allow you to express an array with a fixed number of elements whose types are known, but need not be the same. For example, you may want to represent a value as a pair of a <code class=\"language-text\">string</code> and a <code class=\"language-text\">number</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Declare a tuple type</span>\n<span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Initialize it</span>\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\n<span class=\"token comment\">// Initialize it incorrectly</span>\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></code></pre></div>\n<p>When accessing an element with a known index, the correct type is retrieved:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error, 'number' does not have 'substring'</span></code></pre></div>\n<p>Accessing an element outside the set of known indices fails with an error:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">x<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error, Property '3' does not exist on type '[string, number]'.</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error, Property '5' does not exist on type '[string, number]'.</span></code></pre></div>\n<h1>Enum</h1>\n<p>A helpful addition to the standard set of datatypes from JavaScript is the <code class=\"language-text\">enum</code>.\nAs in languages like C#, an enum is a way of giving more friendly names to sets of numeric values.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> Color <span class=\"token punctuation\">{</span>Red<span class=\"token punctuation\">,</span> Green<span class=\"token punctuation\">,</span> Blue<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> c<span class=\"token punctuation\">:</span> Color <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Green<span class=\"token punctuation\">;</span></code></pre></div>\n<p>By default, enums begin numbering their members starting at <code class=\"language-text\">0</code>.\nYou can change this by manually setting the value of one of its members.\nFor example, we can start the previous example at <code class=\"language-text\">1</code> instead of <code class=\"language-text\">0</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> Color <span class=\"token punctuation\">{</span>Red <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Green<span class=\"token punctuation\">,</span> Blue<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> c<span class=\"token punctuation\">:</span> Color <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Green<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Or, even manually set all the values in the enum:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> Color <span class=\"token punctuation\">{</span>Red <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Green <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> Blue <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> c<span class=\"token punctuation\">:</span> Color <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Green<span class=\"token punctuation\">;</span></code></pre></div>\n<p>A handy feature of enums is that you can also go from a numeric value to the name of that value in the enum.\nFor example, if we had the value <code class=\"language-text\">2</code> but weren’t sure what that mapped to in the <code class=\"language-text\">Color</code> enum above, we could look up the corresponding name:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> Color <span class=\"token punctuation\">{</span>Red <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Green<span class=\"token punctuation\">,</span> Blue<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> colorName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>colorName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Displays 'Green' as its value is 2 above</span></code></pre></div>\n<h1>Any</h1>\n<p>We may need to describe the type of variables that we do not know when we are writing an application.\nThese values may come from dynamic content, e.g. from the user or a 3rd party library.\nIn these cases, we want to opt-out of type checking and let the values pass through compile-time checks.\nTo do so, we label these with the <code class=\"language-text\">any</code> type:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> notSure<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\nnotSure <span class=\"token operator\">=</span> <span class=\"token string\">\"maybe a string instead\"</span><span class=\"token punctuation\">;</span>\nnotSure <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// okay, definitely a boolean</span></code></pre></div>\n<p>The <code class=\"language-text\">any</code> type is a powerful way to work with existing JavaScript, allowing you to gradually opt-in and opt-out of type checking during compilation.\nYou might expect <code class=\"language-text\">Object</code> to play a similar role, as it does in other languages.\nHowever, variables of type <code class=\"language-text\">Object</code> only allow you to assign any value to them. You can’t call arbitrary methods on them, even ones that actually exist:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> notSure<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\nnotSure<span class=\"token punctuation\">.</span><span class=\"token function\">ifItExists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// okay, ifItExists might exist at runtime</span>\nnotSure<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// okay, toFixed exists (but the compiler doesn't check)</span>\n\n<span class=\"token keyword\">let</span> prettySure<span class=\"token punctuation\">:</span> Object <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\nprettySure<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error: Property 'toFixed' doesn't exist on type 'Object'.</span></code></pre></div>\n<p>The <code class=\"language-text\">any</code> type is also handy if you know some part of the type, but perhaps not all of it.\nFor example, you may have an array but the array has a mix of different types:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> list<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"free\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nlist<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>Void</h1>\n<p><code class=\"language-text\">void</code> is a little like the opposite of <code class=\"language-text\">any</code>: the absence of having any type at all.\nYou may commonly see this as the return type of functions that do not return a value:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">warnUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is my warning message\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Declaring variables of type <code class=\"language-text\">void</code> is not useful because you can only assign <code class=\"language-text\">null</code> (only if <code class=\"language-text\">--strictNullChecks</code> is not specified, see next section) or <code class=\"language-text\">undefined</code> to them:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> unusable<span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> undefined<span class=\"token punctuation\">;</span>\nunusable <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK if `--strictNullChecks` is not given</span></code></pre></div>\n<h1>Null and Undefined</h1>\n<p>In TypeScript, both <code class=\"language-text\">undefined</code> and <code class=\"language-text\">null</code> actually have their own types named <code class=\"language-text\">undefined</code> and <code class=\"language-text\">null</code> respectively.\nMuch like <code class=\"language-text\">void</code>, they’re not extremely useful on their own:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Not much else we can assign to these variables!</span>\n<span class=\"token keyword\">let</span> u<span class=\"token punctuation\">:</span> undefined <span class=\"token operator\">=</span> undefined<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> n<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>By default <code class=\"language-text\">null</code> and <code class=\"language-text\">undefined</code> are subtypes of all other types.\nThat means you can assign <code class=\"language-text\">null</code> and <code class=\"language-text\">undefined</code> to something like <code class=\"language-text\">number</code>.</p>\n<p>However, when using the <code class=\"language-text\">--strictNullChecks</code> flag, <code class=\"language-text\">null</code> and <code class=\"language-text\">undefined</code> are only assignable to <code class=\"language-text\">any</code> and their respective types (the one exception being that <code class=\"language-text\">undefined</code> is also assignable to <code class=\"language-text\">void</code>).\nThis helps avoid <em>many</em> common errors.\nIn cases where you want to pass in either a <code class=\"language-text\">string</code> or <code class=\"language-text\">null</code> or <code class=\"language-text\">undefined</code>, you can use the union type <code class=\"language-text\">string | null | undefined</code>.</p>\n<p>Union types are an advanced topic that we’ll cover in a later chapter.</p>\n<blockquote>\n<p>As a note: we encourage the use of <code class=\"language-text\">--strictNullChecks</code> when possible, but for the purposes of this handbook, we will assume it is turned off.</p>\n</blockquote>\n<h1>Never</h1>\n<p>The <code class=\"language-text\">never</code> type represents the type of values that never occur.\nFor instance, <code class=\"language-text\">never</code> is the return type for a function expression or an arrow function expression that always throws an exception or one that never returns;\nVariables also acquire the type <code class=\"language-text\">never</code> when narrowed by any type guards that can never be true.</p>\n<p>The <code class=\"language-text\">never</code> type is a subtype of, and assignable to, every type; however, <em>no</em> type is a subtype of, or assignable to, <code class=\"language-text\">never</code> (except <code class=\"language-text\">never</code> itself).\nEven <code class=\"language-text\">any</code> isn’t assignable to <code class=\"language-text\">never</code>.</p>\n<p>Some examples of functions returning <code class=\"language-text\">never</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Function returning never must have unreachable end point</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Inferred return type is never</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Something failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Function returning never must have unreachable end point</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">infiniteLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>Object</h1>\n<p><code class=\"language-text\">object</code> is a type that represents the non-primitive type, i.e. anything that is not <code class=\"language-text\">number</code>, <code class=\"language-text\">string</code>, <code class=\"language-text\">boolean</code>, <code class=\"language-text\">symbol</code>, <code class=\"language-text\">null</code>, or <code class=\"language-text\">undefined</code>.</p>\n<p>With <code class=\"language-text\">object</code> type, APIs like <code class=\"language-text\">Object.create</code> can be better represented. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o<span class=\"token punctuation\">:</span> object <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> prop<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\n\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span>undefined<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></code></pre></div>\n<h1>Type assertions</h1>\n<p>Sometimes you’ll end up in a situation where you’ll know more about a value than TypeScript does.\nUsually this will happen when you know the type of some entity could be more specific than its current type.</p>\n<p><em>Type assertions</em> are a way to tell the compiler “trust me, I know what I’m doing.”\nA type assertion is like a type cast in other languages, but performs no special checking or restructuring of data.\nIt has no runtime impact, and is used purely by the compiler.\nTypeScript assumes that you, the programmer, have performed any special checks that you need.</p>\n<p>Type assertions have two forms.\nOne is the “angle-bracket” syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> someValue<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"this is a string\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> strLength<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span>someValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></code></pre></div>\n<p>And the other is the <code class=\"language-text\">as</code>-syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> someValue<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"this is a string\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> strLength<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>someValue <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></code></pre></div>\n<p>The two samples are equivalent.\nUsing one over the other is mostly a choice of preference; however, when using TypeScript with JSX, only <code class=\"language-text\">as</code>-style assertions are allowed.</p>\n<h1>A note about <code class=\"language-text\">let</code></h1>\n<p>You may’ve noticed that so far, we’ve been using the <code class=\"language-text\">let</code> keyword instead of JavaScript’s <code class=\"language-text\">var</code> keyword which you might be more familiar with.\nThe <code class=\"language-text\">let</code> keyword is actually a newer JavaScript construct that TypeScript makes available.\nWe’ll discuss the details later, but many common problems in JavaScript are alleviated by using <code class=\"language-text\">let</code>, so you should use it instead of <code class=\"language-text\">var</code> whenever possible.</p>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/basic-types.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/basic-types.html","isOldHandbook":true}}}