{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/type-compatibility.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"527062ee-2017-5c71-b821-5beee473a97c","excerpt":"{% raw %}# Introduction Type compatibility in TypeScript is based on structural subtyping.\nStructural typing is a way of relating types based solely on their…","html":"<p>{% raw %}# Introduction</p>\n<p>Type compatibility in TypeScript is based on structural subtyping.\nStructural typing is a way of relating types based solely on their members.\nThis is in contrast with nominal typing.\nConsider the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Named</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> p<span class=\"token punctuation\">:</span> Named<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// OK, because of structural typing</span>\np <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In nominally-typed languages like C# or Java, the equivalent code would be an error because the <code class=\"language-text\">Person</code> class does not explicitly describe itself as being an implementer of the <code class=\"language-text\">Named</code> interface.</p>\n<p>TypeScript’s structural type system was designed based on how JavaScript code is typically written.\nBecause JavaScript widely uses anonymous objects like function expressions and object literals, it’s much more natural to represent the kinds of relationships found in JavaScript libraries with a structural type system instead of a nominal one.</p>\n<h2>A Note on Soundness</h2>\n<p>TypeScript’s type system allows certain operations that can’t be known at compile-time to be safe. When a type system has this property, it is said to not be “sound”. The places where TypeScript allows unsound behavior were carefully considered, and throughout this document we’ll explain where these happen and the motivating scenarios behind them.</p>\n<h1>Starting out</h1>\n<p>The basic rule for TypeScript’s structural type system is that <code class=\"language-text\">x</code> is compatible with <code class=\"language-text\">y</code> if <code class=\"language-text\">y</code> has at least the same members as <code class=\"language-text\">x</code>. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Named</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span> Named<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// y's inferred type is { name: string; location: string; }</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> location<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Seattle\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nx <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span></code></pre></div>\n<p>To check whether <code class=\"language-text\">y</code> can be assigned to <code class=\"language-text\">x</code>, the compiler checks each property of <code class=\"language-text\">x</code> to find a corresponding compatible property in <code class=\"language-text\">y</code>.\nIn this case, <code class=\"language-text\">y</code> must have a member called <code class=\"language-text\">name</code> that is a string. It does, so the assignment is allowed.</p>\n<p>The same rule for assignment is used when checking function call arguments:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">:</span> Named</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> n<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span></code></pre></div>\n<p>Note that <code class=\"language-text\">y</code> has an extra <code class=\"language-text\">location</code> property, but this does not create an error.\nOnly members of the target type (<code class=\"language-text\">Named</code> in this case) are considered when checking for compatibility.</p>\n<p>This comparison process proceeds recursively, exploring the type of each member and sub-member.</p>\n<h1>Comparing two functions</h1>\n<p>While comparing primitive types and object types is relatively straightforward, the question of what kinds of functions should be considered compatible is a bit more involved.\nLet’s start with a basic example of two functions that differ only in their parameter lists:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">x</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">y</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\ny <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\nx <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></code></pre></div>\n<p>To check if <code class=\"language-text\">x</code> is assignable to <code class=\"language-text\">y</code>, we first look at the parameter list.\nEach parameter in <code class=\"language-text\">x</code> must have a corresponding parameter in <code class=\"language-text\">y</code> with a compatible type.\nNote that the names of the parameters are not considered, only their types.\nIn this case, every parameter of <code class=\"language-text\">x</code> has a corresponding compatible parameter in <code class=\"language-text\">y</code>, so the assignment is allowed.</p>\n<p>The second assignment is an error, because <code class=\"language-text\">y</code> has a required second parameter that <code class=\"language-text\">x</code> does not have, so the assignment is disallowed.</p>\n<p>You may be wondering why we allow ‘discarding’ parameters like in the example <code class=\"language-text\">y = x</code>.\nThe reason for this assignment to be allowed is that ignoring extra function parameters is actually quite common in JavaScript.\nFor example, <code class=\"language-text\">Array#forEach</code> provides three parameters to the callback function: the array element, its index, and the containing array.\nNevertheless, it’s very useful to provide a callback that only uses the first parameter:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Don't force these extra parameters</span>\nitems<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Should be OK!</span>\nitems<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now let’s look at how return types are treated, using two functions that differ only by their return type:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">x</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">y</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> location<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Seattle\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nx <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\ny <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error, because x() lacks a location property</span></code></pre></div>\n<p>The type system enforces that the source function’s return type be a subtype of the target type’s return type.</p>\n<h2>Function Parameter Bivariance</h2>\n<p>When comparing the types of function parameters, assignment succeeds if either the source parameter is assignable to the target parameter, or vice versa.\nThis is unsound because a caller might end up being given a function that takes a more specialized type, but invokes the function with a less specialized type.\nIn practice, this sort of error is rare, and allowing this enables many common JavaScript patterns. A brief example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> EventType <span class=\"token punctuation\">{</span> Mouse<span class=\"token punctuation\">,</span> Keyboard <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Event</span> <span class=\"token punctuation\">{</span> timestamp<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">MouseEvent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Event</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">KeyEvent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Event</span> <span class=\"token punctuation\">{</span> keyCode<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">listenEvent</span><span class=\"token punctuation\">(</span>eventType<span class=\"token punctuation\">:</span> EventType<span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">handler</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">:</span> Event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Unsound, but useful and common</span>\n<span class=\"token function\">listenEvent</span><span class=\"token punctuation\">(</span>EventType<span class=\"token punctuation\">.</span>Mouse<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">:</span> MouseEvent</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Undesirable alternatives in presence of soundness</span>\n<span class=\"token function\">listenEvent</span><span class=\"token punctuation\">(</span>EventType<span class=\"token punctuation\">.</span>Mouse<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">:</span> Event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token keyword\">as</span> MouseEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>e <span class=\"token keyword\">as</span> MouseEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">listenEvent</span><span class=\"token punctuation\">(</span>EventType<span class=\"token punctuation\">.</span>Mouse<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">:</span> MouseEvent</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">:</span> Event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Still disallowed (clear error). Type safety enforced for wholly incompatible types</span>\n<span class=\"token function\">listenEvent</span><span class=\"token punctuation\">(</span>EventType<span class=\"token punctuation\">.</span>Mouse<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can have TypeScript raise errors when this happens via the compiler flag <code class=\"language-text\">strictFunctionTypes</code>.</p>\n<h2>Optional Parameters and Rest Parameters</h2>\n<p>When comparing functions for compatibility, optional and required parameters are interchangeable.\nExtra optional parameters of the source type are not an error, and optional parameters of the target type without corresponding parameters in the source type are not an error.</p>\n<p>When a function has a rest parameter, it is treated as if it were an infinite series of optional parameters.</p>\n<p>This is unsound from a type system perspective, but from a runtime point of view the idea of an optional parameter is generally not well-enforced since passing <code class=\"language-text\">undefined</code> in that position is equivalent for most functions.</p>\n<p>The motivating example is the common pattern of a function that takes a callback and invokes it with some predictable (to the programmer) but unknown (to the type system) number of arguments:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">invokeLater</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">callback</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* ... Invoke callback with 'args' ... */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Unsound - invokeLater \"might\" provide any number of arguments</span>\n<span class=\"token function\">invokeLater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Confusing (x and y are actually required) and undiscoverable</span>\n<span class=\"token function\">invokeLater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">?</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Functions with overloads</h2>\n<p>When a function has overloads, each overload in the source type must be matched by a compatible signature on the target type.\nThis ensures that the target function can be called in all the same situations as the source function.</p>\n<h1>Enums</h1>\n<p>Enums are compatible with numbers, and numbers are compatible with enums. Enum values from different enum types are considered incompatible. For example,</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> Status <span class=\"token punctuation\">{</span> Ready<span class=\"token punctuation\">,</span> Waiting <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">enum</span> Color <span class=\"token punctuation\">{</span> Red<span class=\"token punctuation\">,</span> Blue<span class=\"token punctuation\">,</span> Green <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> status <span class=\"token operator\">=</span> Status<span class=\"token punctuation\">.</span>Ready<span class=\"token punctuation\">;</span>\nstatus <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Green<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span></code></pre></div>\n<h1>Classes</h1>\n<p>Classes work similarly to object literal types and interfaces with one exception: they have both a static and an instance type.\nWhen comparing two objects of a class type, only members of the instance are compared.\nStatic members and constructors do not affect compatibility.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    feet<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> numFeet<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Size</span> <span class=\"token punctuation\">{</span>\n    feet<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numFeet<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> a<span class=\"token punctuation\">:</span> Animal<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> s<span class=\"token punctuation\">:</span> Size<span class=\"token punctuation\">;</span>\n\na <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// OK</span>\ns <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// OK</span></code></pre></div>\n<h2>Private and protected members in classes</h2>\n<p>Private and protected members in a class affect their compatibility.\nWhen an instance of a class is checked for compatibility, if the target type contains a private member, then the source type must also contain a private member that originated from the same class.\nLikewise, the same applies for an instance with a protected member.\nThis allows a class to be assignment compatible with its super class, but <em>not</em> with classes from a different inheritance hierarchy which otherwise have the same shape.</p>\n<h1>Generics</h1>\n<p>Because TypeScript is a structural type system, type parameters only affect the resulting type when consumed as part of the type of a member. For example,</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Empty</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span> Empty<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> y<span class=\"token punctuation\">:</span> Empty<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\nx <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// OK, because y matches structure of x</span></code></pre></div>\n<p>In the above, <code class=\"language-text\">x</code> and <code class=\"language-text\">y</code> are compatible because their structures do not use the type argument in a differentiating way.\nChanging this example by adding a member to <code class=\"language-text\">Empty&lt;T&gt;</code> shows how this works:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">NotEmpty</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    data<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span> NotEmpty<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> y<span class=\"token punctuation\">:</span> NotEmpty<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\nx <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error, because x and y are not compatible</span></code></pre></div>\n<p>In this way, a generic type that has its type arguments specified acts just like a non-generic type.</p>\n<p>For generic types that do not have their type arguments specified, compatibility is checked by specifying <code class=\"language-text\">any</code> in place of all unspecified type arguments.\nThe resulting types are then checked for compatibility, just as in the non-generic case.</p>\n<p>For example,</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">identity</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">reverse</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">U</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\nidentity <span class=\"token operator\">=</span> reverse<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// OK, because (x: any) => any matches (y: any) => any</span></code></pre></div>\n<h1>Advanced Topics</h1>\n<h2>Subtype vs Assignment</h2>\n<p>So far, we’ve used “compatible”, which is not a term defined in the language spec.\nIn TypeScript, there are two kinds of compatibility: subtype and assignment.\nThese differ only in that assignment extends subtype compatibility with rules to allow assignment to and from <code class=\"language-text\">any</code>, and to and from <code class=\"language-text\">enum</code> with corresponding numeric values.</p>\n<p>Different places in the language use one of the two compatibility mechanisms, depending on the situation.\nFor practical purposes, type compatibility is dictated by assignment compatibility, even in the cases of the <code class=\"language-text\">implements</code> and <code class=\"language-text\">extends</code> clauses.</p>\n<p>For more information, see the <a href=\"https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md\">TypeScript spec</a>.</p>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/type-compatibility.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/type-compatibility.html","isOldHandbook":true}}}