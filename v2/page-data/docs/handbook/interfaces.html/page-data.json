{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/interfaces.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"1aaf4672-a9e6-53d8-bc37-3141e02abd8b","excerpt":"{% raw %}# Introduction One of TypeScript’s core principles is that type checking focuses on the shape that values have.\nThis is sometimes called “duck typing…","html":"<p>{% raw %}# Introduction</p>\n<p>One of TypeScript’s core principles is that type checking focuses on the <em>shape</em> that values have.\nThis is sometimes called “duck typing” or “structural subtyping”.\nIn TypeScript, interfaces fill the role of naming these types, and are a powerful way of defining contracts within your code as well as contracts with code outside of your project.</p>\n<h1>Our First Interface</h1>\n<p>The easiest way to see how interfaces work is to start with a simple example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">printLabel</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">labeledObj<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> label<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>labeledObj<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> myObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>size<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Size 10 Object\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printLabel</span><span class=\"token punctuation\">(</span>myObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The type checker checks the call to <code class=\"language-text\">printLabel</code>.\nThe <code class=\"language-text\">printLabel</code> function has a single parameter that requires that the object passed in has a property called <code class=\"language-text\">label</code> of type <code class=\"language-text\">string</code>.\nNotice that our object actually has more properties than this, but the compiler only checks that <em>at least</em> the ones required are present and match the types required.\nThere are some cases where TypeScript isn’t as lenient, which we’ll cover in a bit.</p>\n<p>We can write the same example again, this time using an interface to describe the requirement of having the <code class=\"language-text\">label</code> property that is a string:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">LabeledValue</span> <span class=\"token punctuation\">{</span>\n    label<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">printLabel</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">labeledObj<span class=\"token punctuation\">:</span> LabeledValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>labeledObj<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> myObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>size<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Size 10 Object\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printLabel</span><span class=\"token punctuation\">(</span>myObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The interface <code class=\"language-text\">LabeledValue</code> is a name we can now use to describe the requirement in the previous example.\nIt still represents having a single property called <code class=\"language-text\">label</code> that is of type <code class=\"language-text\">string</code>.\nNotice we didn’t have to explicitly say that the object we pass to <code class=\"language-text\">printLabel</code> implements this interface like we might have to in other languages.\nHere, it’s only the shape that matters. If the object we pass to the function meets the requirements listed, then it’s allowed.</p>\n<p>It’s worth pointing out that the type checker does not require that these properties come in any sort of order, only that the properties the interface requires are present and have the required type.</p>\n<h1>Optional Properties</h1>\n<p>Not all properties of an interface may be required.\nSome exist under certain conditions or may not be there at all.\nThese optional properties are popular when creating patterns like “option bags” where you pass an object to a function that only has a couple of properties filled in.</p>\n<p>Here’s an example of this pattern:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">SquareConfig</span> <span class=\"token punctuation\">{</span>\n    color<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    width<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createSquare</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config<span class=\"token punctuation\">:</span> SquareConfig</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>color<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> area<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> newSquare <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>color<span class=\"token punctuation\">:</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">,</span> area<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        newSquare<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        newSquare<span class=\"token punctuation\">.</span>area <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> config<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> newSquare<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> mySquare <span class=\"token operator\">=</span> <span class=\"token function\">createSquare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>color<span class=\"token punctuation\">:</span> <span class=\"token string\">\"black\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Interfaces with optional properties are written similar to other interfaces, with each optional property denoted by a <code class=\"language-text\">?</code> at the end of the property name in the declaration.</p>\n<p>The advantage of optional properties is that you can describe these possibly available properties while still also preventing use of properties that are not part of the interface.\nFor example, had we mistyped the name of the <code class=\"language-text\">color</code> property in <code class=\"language-text\">createSquare</code>, we would get an error message letting us know:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">SquareConfig</span> <span class=\"token punctuation\">{</span>\n    color<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    width<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createSquare</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config<span class=\"token punctuation\">:</span> SquareConfig</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> color<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> area<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> newSquare <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>color<span class=\"token punctuation\">:</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">,</span> area<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>clor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Error: Property 'clor' does not exist on type 'SquareConfig'</span>\n        newSquare<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>clor<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        newSquare<span class=\"token punctuation\">.</span>area <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> config<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> newSquare<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> mySquare <span class=\"token operator\">=</span> <span class=\"token function\">createSquare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>color<span class=\"token punctuation\">:</span> <span class=\"token string\">\"black\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>Readonly properties</h1>\n<p>Some properties should only be modifiable when an object is first created.\nYou can specify this by putting <code class=\"language-text\">readonly</code> before the name of the property:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">readonly</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">readonly</span> y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can construct a <code class=\"language-text\">Point</code> by assigning an object literal.\nAfter the assignment, <code class=\"language-text\">x</code> and <code class=\"language-text\">y</code> can’t be changed.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> p1<span class=\"token punctuation\">:</span> Point <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\np1<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error!</span></code></pre></div>\n<p>TypeScript comes with a <code class=\"language-text\">ReadonlyArray&lt;T&gt;</code> type that is the same as <code class=\"language-text\">Array&lt;T&gt;</code> with all mutating methods removed, so you can make sure you don’t change your arrays after creation:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> ro<span class=\"token punctuation\">:</span> ReadonlyArray<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\nro<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error!</span>\nro<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error!</span>\nro<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error!</span>\na <span class=\"token operator\">=</span> ro<span class=\"token punctuation\">;</span> <span class=\"token comment\">// error!</span></code></pre></div>\n<p>On the last line of the snippet you can see that even assigning the entire <code class=\"language-text\">ReadonlyArray</code> back to a normal array is illegal.\nYou can still override it with a type assertion, though:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">a <span class=\"token operator\">=</span> ro <span class=\"token keyword\">as</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2><code class=\"language-text\">readonly</code> vs <code class=\"language-text\">const</code></h2>\n<p>The easiest way to remember whether to use <code class=\"language-text\">readonly</code> or <code class=\"language-text\">const</code> is to ask whether you’re using it on a variable or a property.\nVariables use <code class=\"language-text\">const</code> whereas properties use <code class=\"language-text\">readonly</code>.</p>\n<h1>Excess Property Checks</h1>\n<p>In our first example using interfaces, TypeScript lets us pass <code class=\"language-text\">{ size: number; label: string; }</code> to something that only expected a <code class=\"language-text\">{ label: string; }</code>.\nWe also just learned about optional properties, and how they’re useful when describing so-called “option bags”.</p>\n<p>However, combining the two naively would allow an error to sneak in. For example, taking our last example using <code class=\"language-text\">createSquare</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">SquareConfig</span> <span class=\"token punctuation\">{</span>\n    color<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    width<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createSquare</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config<span class=\"token punctuation\">:</span> SquareConfig</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> color<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> area<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> mySquare <span class=\"token operator\">=</span> <span class=\"token function\">createSquare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> colour<span class=\"token punctuation\">:</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Notice the given argument to <code class=\"language-text\">createSquare</code> is spelled <em><code class=\"language-text\">colour</code></em> instead of <code class=\"language-text\">color</code>.\nIn plain JavaScript, this sort of thing fails silently.</p>\n<p>You could argue that this program is correctly typed, since the <code class=\"language-text\">width</code> properties are compatible, there’s no <code class=\"language-text\">color</code> property present, and the extra <code class=\"language-text\">colour</code> property is insignificant.</p>\n<p>However, TypeScript takes the stance that there’s probably a bug in this code.\nObject literals get special treatment and undergo <em>excess property checking</em> when assigning them to other variables, or passing them as arguments.\nIf an object literal has any properties that the “target type” doesn’t have, you’ll get an error:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// error: Object literal may only specify known properties, but 'colour' does not exist in type 'SquareConfig'. Did you mean to write 'color'?</span>\n<span class=\"token keyword\">let</span> mySquare <span class=\"token operator\">=</span> <span class=\"token function\">createSquare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> colour<span class=\"token punctuation\">:</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Getting around these checks is actually really simple.\nThe easiest method is to just use a type assertion:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> mySquare <span class=\"token operator\">=</span> <span class=\"token function\">createSquare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> width<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> opacity<span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> SquareConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>However, a better approach might be to add a string index signature if you’re sure that the object can have some extra properties that are used in some special way.\nIf <code class=\"language-text\">SquareConfig</code> can have <code class=\"language-text\">color</code> and <code class=\"language-text\">width</code> properties with the above types, but could <em>also</em> have any number of other properties, then we could define it like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">SquareConfig</span> <span class=\"token punctuation\">{</span>\n    color<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    width<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We’ll discuss index signatures in a bit, but here we’re saying a <code class=\"language-text\">SquareConfig</code> can have any number of properties, and as long as they aren’t <code class=\"language-text\">color</code> or <code class=\"language-text\">width</code>, their types don’t matter.</p>\n<p>One final way to get around these checks, which might be a bit surprising, is to assign the object to another variable:\nSince <code class=\"language-text\">squareOptions</code> won’t undergo excess property checks, the compiler won’t give you an error.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> squareOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> colour<span class=\"token punctuation\">:</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> mySquare <span class=\"token operator\">=</span> <span class=\"token function\">createSquare</span><span class=\"token punctuation\">(</span>squareOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The above workaround will work as long as you have a common property between <code class=\"language-text\">squareOptions</code> and <code class=\"language-text\">SquareConfig</code>.\nIn this example, it was the property <code class=\"language-text\">width</code>. It will however, fail if the variable does not have any common object property. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> squareOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> colour<span class=\"token punctuation\">:</span> <span class=\"token string\">\"red\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> mySquare <span class=\"token operator\">=</span> <span class=\"token function\">createSquare</span><span class=\"token punctuation\">(</span>squareOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Keep in mind that for simple code like above, you probably shouldn’t be trying to “get around” these checks.\nFor more complex object literals that have methods and hold state, you might need to keep these techniques in mind, but a majority of excess property errors are actually bugs.\nThat means if you’re running into excess property checking problems for something like option bags, you might need to revise some of your type declarations.\nIn this instance, if it’s okay to pass an object with both a <code class=\"language-text\">color</code> or <code class=\"language-text\">colour</code> property to <code class=\"language-text\">createSquare</code>, you should fix up the definition of <code class=\"language-text\">SquareConfig</code> to reflect that.</p>\n<h1>Function Types</h1>\n<p>Interfaces are capable of describing the wide range of shapes that JavaScript objects can take.\nIn addition to describing an object with properties, interfaces are also capable of describing function types.</p>\n<p>To describe a function type with an interface, we give the interface a call signature.\nThis is like a function declaration with only the parameter list and return type given. Each parameter in the parameter list requires both name and type.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">SearchFunc</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> subString<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Once defined, we can use this function type interface like we would other interfaces.\nHere, we show how you can create a variable of a function type and assign it a function value of the same type.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> mySearch<span class=\"token punctuation\">:</span> SearchFunc<span class=\"token punctuation\">;</span>\n<span class=\"token function-variable function\">mySearch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">source<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> subString<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>subString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>For function types to correctly type check, the names of the parameters do not need to match.\nWe could have, for example, written the above example like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> mySearch<span class=\"token punctuation\">:</span> SearchFunc<span class=\"token punctuation\">;</span>\n<span class=\"token function-variable function\">mySearch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">src<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Function parameters are checked one at a time, with the type in each corresponding parameter position checked against each other.\nIf you do not want to specify types at all, TypeScript’s contextual typing can infer the argument types since the function value is assigned directly to a variable of type <code class=\"language-text\">SearchFunc</code>.\nHere, also, the return type of our function expression is implied by the values it returns (here <code class=\"language-text\">false</code> and <code class=\"language-text\">true</code>).\nHad the function expression returned numbers or strings, the type checker would have warned us that return type doesn’t match the return type described in the <code class=\"language-text\">SearchFunc</code> interface.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> mySearch<span class=\"token punctuation\">:</span> SearchFunc<span class=\"token punctuation\">;</span>\n<span class=\"token function-variable function\">mySearch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">src<span class=\"token punctuation\">,</span> sub</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>Indexable Types</h1>\n<p>Similarly to how we can use interfaces to describe function types, we can also describe types that we can “index into” like <code class=\"language-text\">a[10]</code>, or <code class=\"language-text\">ageMap[&quot;daniel&quot;]</code>.\nIndexable types have an <em>index signature</em> that describes the types we can use to index into the object, along with the corresponding return types when indexing.\nLet’s take an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">StringArray</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> myArray<span class=\"token punctuation\">:</span> StringArray<span class=\"token punctuation\">;</span>\nmyArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Fred\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> myStr<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> myArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Above, we have a <code class=\"language-text\">StringArray</code> interface that has an index signature.\nThis index signature states that when a <code class=\"language-text\">StringArray</code> is indexed with a <code class=\"language-text\">number</code>, it will return a <code class=\"language-text\">string</code>.</p>\n<p>There are two types of supported index signatures: string and number.\nIt is possible to support both types of indexers, but the type returned from a numeric indexer must be a subtype of the type returned from the string indexer.\nThis is because when indexing with a <code class=\"language-text\">number</code>, JavaScript will actually convert that to a <code class=\"language-text\">string</code> before indexing into an object.\nThat means that indexing with <code class=\"language-text\">100</code> (a <code class=\"language-text\">number</code>) is the same thing as indexing with <code class=\"language-text\">&quot;100&quot;</code> (a <code class=\"language-text\">string</code>), so the two need to be consistent.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    breed<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Error: indexing with a numeric string might get you a completely separate type of Animal!</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">NotOkay</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> Animal<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> Dog<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>While string index signatures are a powerful way to describe the “dictionary” pattern, they also enforce that all properties match their return type.\nThis is because a string index declares that <code class=\"language-text\">obj.property</code> is also available as <code class=\"language-text\">obj[&quot;property&quot;]</code>.\nIn the following example, <code class=\"language-text\">name</code>’s type does not match the string index’s type, and the type checker gives an error:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">NumberDictionary</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    length<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// ok, length is a number</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// error, the type of 'name' is not a subtype of the indexer</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>However, properties of different types are acceptable if the index signature is a union of the property types:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">NumberOrStringDictionary</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    length<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// ok, length is a number</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// ok, name is a string</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Finally, you can make index signatures <code class=\"language-text\">readonly</code> in order to prevent assignment to their indices:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ReadonlyStringArray</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> myArray<span class=\"token punctuation\">:</span> ReadonlyStringArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nmyArray<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Mallory\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error!</span></code></pre></div>\n<p>You can’t set <code class=\"language-text\">myArray[2]</code> because the index signature is readonly.</p>\n<h1>Class Types</h1>\n<h2>Implementing an interface</h2>\n<p>One of the most common uses of interfaces in languages like C# and Java, that of explicitly enforcing that a class meets a particular contract, is also possible in TypeScript.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ClockInterface</span> <span class=\"token punctuation\">{</span>\n    currentTime<span class=\"token punctuation\">:</span> Date<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ClockInterface</span> <span class=\"token punctuation\">{</span>\n    currentTime<span class=\"token punctuation\">:</span> Date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">h<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can also describe methods in an interface that are implemented in the class, as we do with <code class=\"language-text\">setTime</code> in the below example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ClockInterface</span> <span class=\"token punctuation\">{</span>\n    currentTime<span class=\"token punctuation\">:</span> Date<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">:</span> Date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ClockInterface</span> <span class=\"token punctuation\">{</span>\n    currentTime<span class=\"token punctuation\">:</span> Date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d<span class=\"token punctuation\">:</span> Date</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentTime <span class=\"token operator\">=</span> d<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">h<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Interfaces describe the public side of the class, rather than both the public and private side.\nThis prohibits you from using them to check that a class also has particular types for the private side of the class instance.</p>\n<h2>Difference between the static and instance sides of classes</h2>\n<p>When working with classes and interfaces, it helps to keep in mind that a class has <em>two</em> types: the type of the static side and the type of the instance side.\nYou may notice that if you create an interface with a construct signature and try to create a class that implements this interface you get an error:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ClockConstructor</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span>hour<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> minute<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ClockConstructor</span> <span class=\"token punctuation\">{</span>\n    currentTime<span class=\"token punctuation\">:</span> Date<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">h<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is because when a class implements an interface, only the instance side of the class is checked.\nSince the constructor sits in the static side, it is not included in this check.</p>\n<p>Instead, you would need to work with the static side of the class directly.\nIn this example, we define two interfaces, <code class=\"language-text\">ClockConstructor</code> for the constructor and <code class=\"language-text\">ClockInterface</code> for the instance methods.\nThen, for convenience, we define a constructor function <code class=\"language-text\">createClock</code> that creates instances of the type that is passed to it:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ClockConstructor</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span>hour<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> minute<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> ClockInterface<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ClockInterface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createClock</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctor<span class=\"token punctuation\">:</span> ClockConstructor<span class=\"token punctuation\">,</span> hour<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> minute<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> ClockInterface <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ctor</span><span class=\"token punctuation\">(</span>hour<span class=\"token punctuation\">,</span> minute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DigitalClock</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ClockInterface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">h<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"beep beep\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AnalogClock</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ClockInterface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">h<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tick tock\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> digital <span class=\"token operator\">=</span> <span class=\"token function\">createClock</span><span class=\"token punctuation\">(</span>DigitalClock<span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> analog <span class=\"token operator\">=</span> <span class=\"token function\">createClock</span><span class=\"token punctuation\">(</span>AnalogClock<span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Because <code class=\"language-text\">createClock</code>’s first parameter is of type <code class=\"language-text\">ClockConstructor</code>, in <code class=\"language-text\">createClock(AnalogClock, 7, 32)</code>, it checks that <code class=\"language-text\">AnalogClock</code> has the correct constructor signature.</p>\n<p>Another simple way is to use class expressions:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ClockConstructor</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span>hour<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> minute<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ClockInterface</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> Clock<span class=\"token punctuation\">:</span> ClockConstructor <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ClockInterface</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">h<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"beep beep\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>Extending Interfaces</h1>\n<p>Like classes, interfaces can extend each other.\nThis allows you to copy the members of one interface into another, which gives you more flexibility in how you separate your interfaces into reusable components.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span>\n    color<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Square</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span>\n    sideLength<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> square <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> Square<span class=\"token punctuation\">;</span>\nsquare<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">;</span>\nsquare<span class=\"token punctuation\">.</span>sideLength <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>An interface can extend multiple interfaces, creating a combination of all of the interfaces.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span>\n    color<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">PenStroke</span> <span class=\"token punctuation\">{</span>\n    penWidth<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Square</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">,</span> PenStroke <span class=\"token punctuation\">{</span>\n    sideLength<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> square <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> Square<span class=\"token punctuation\">;</span>\nsquare<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">;</span>\nsquare<span class=\"token punctuation\">.</span>sideLength <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nsquare<span class=\"token punctuation\">.</span>penWidth <span class=\"token operator\">=</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>Hybrid Types</h1>\n<p>As we mentioned earlier, interfaces can describe the rich types present in real world JavaScript.\nBecause of JavaScript’s dynamic and flexible nature, you may occasionally encounter an object that works as a combination of some of the types described above.</p>\n<p>One such example is an object that acts as both a function and an object, with additional properties:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Counter</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    interval<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Counter <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">start<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Counter<span class=\"token punctuation\">;</span>\n    counter<span class=\"token punctuation\">.</span>interval <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    counter<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">reset</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> counter<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token function\">getCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nc<span class=\"token punctuation\">.</span>interval <span class=\"token operator\">=</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>When interacting with 3rd-party JavaScript, you may need to use patterns like the above to fully describe the shape of the type.</p>\n<h1>Interfaces Extending Classes</h1>\n<p>When an interface type extends a class type it inherits the members of the class but not their implementations.\nIt is as if the interface had declared all of the members of the class without providing an implementation.\nInterfaces inherit even the private and protected members of a base class.\nThis means that when you create an interface that extends a class with private or protected members, that interface type can only be implemented by that class or a subclass of it.</p>\n<p>This is useful when you have a large inheritance hierarchy, but want to specify that your code works with only subclasses that have certain properties.\nThe subclasses don’t have to be related besides inheriting from the base class.\nFor example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Control</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> state<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">SelectableControl</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Control</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Control</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">SelectableControl</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TextBox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Control</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Error: Property 'state' is missing in type 'Image'.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Image</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">SelectableControl</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> state<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Location</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the above example, <code class=\"language-text\">SelectableControl</code> contains all of the members of <code class=\"language-text\">Control</code>, including the private <code class=\"language-text\">state</code> property.\nSince <code class=\"language-text\">state</code> is a private member it is only possible for descendants of <code class=\"language-text\">Control</code> to implement <code class=\"language-text\">SelectableControl</code>.\nThis is because only descendants of <code class=\"language-text\">Control</code> will have a <code class=\"language-text\">state</code> private member that originates in the same declaration, which is a requirement for private members to be compatible.</p>\n<p>Within the <code class=\"language-text\">Control</code> class it is possible to access the <code class=\"language-text\">state</code> private member through an instance of <code class=\"language-text\">SelectableControl</code>.\nEffectively, a <code class=\"language-text\">SelectableControl</code> acts like a <code class=\"language-text\">Control</code> that is known to have a <code class=\"language-text\">select</code> method.\nThe <code class=\"language-text\">Button</code> and <code class=\"language-text\">TextBox</code> classes are subtypes of <code class=\"language-text\">SelectableControl</code> (because they both inherit from <code class=\"language-text\">Control</code> and have a <code class=\"language-text\">select</code> method), but the <code class=\"language-text\">Image</code> and <code class=\"language-text\">Location</code> classes are not.</p>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/interfaces.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/interfaces.html","isOldHandbook":true}}}