{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/declaration-files/library-structures.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"305318fa-c5e9-56c9-9523-31bcfdabf6b0","excerpt":"{% raw %}# Overview Broadly speaking, the way you structure your declaration file depends on how the library is consumed.\nThere are many ways of offering a…","html":"<p>{% raw %}# Overview</p>\n<p>Broadly speaking, the way you <em>structure</em> your declaration file depends on how the library is consumed.\nThere are many ways of offering a library for consumption in JavaScript, and you’ll need to write your declaration file to match it.\nThis guide covers how to identify common library patterns, and how to write declaration files which correspond to that pattern.</p>\n<p>Each type of major library structuring pattern has a corresponding file in the <a href=\"/426fe078225b373e6c65e134de9366a1/Templates.md\">Templates</a> section.\nYou can start with these templates to help you get going faster.</p>\n<h1>Identifying Kinds of Libraries</h1>\n<p>First, we’ll review the kinds of libraries TypeScript declaration files can represent.\nWe’ll briefly show how each kind of library is <em>used</em>, how it is <em>written</em>, and list some example libraries from the real world.</p>\n<p>Identifying the structure of a library is the first step in writing its declaration file.\nWe’ll give hints on how to identify structure both based on its <em>usage</em> and its <em>code</em>.\nDepending on the library’s documentation and organization, one might be easier than the other.\nWe recommend using whichever is more comfortable to you.</p>\n<h2>Global Libraries</h2>\n<p>A <em>global</em> library is one that can be accessed from the global scope (i.e. without using any form of <code class=\"language-text\">import</code>).\nMany libraries simply expose one or more global variables for use.\nFor example, if you were using <a href=\"https://jquery.com/\">jQuery</a>, the <code class=\"language-text\">$</code> variable can be used by simply referring to it:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You’ll usually see guidance in the documentation of a global library of how to use the library in an HTML script tag:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://a.great.cdn.for/someLib.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Today, most popular globally-accessible libraries are actually written as UMD libraries (see below).\nUMD library documentation is hard to distinguish from global library documentation.\nBefore writing a global declaration file, make sure the library isn’t actually UMD.</p>\n<h3>Identifying a Global Library from Code</h3>\n<p>Global library code is usually extremely simple.\nA global “Hello, world” library might look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">createGreeting</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>or like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createGreeting</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When looking at the code of a global library, you’ll usually see:</p>\n<ul>\n<li>Top-level <code class=\"language-text\">var</code> statements or <code class=\"language-text\">function</code> declarations</li>\n<li>One or more assignments to <code class=\"language-text\">window.someName</code></li>\n<li>Assumptions that DOM primitives like <code class=\"language-text\">document</code> or <code class=\"language-text\">window</code> exist</li>\n</ul>\n<p>You <em>won’t</em> see:</p>\n<ul>\n<li>Checks for, or usage of, module loaders like <code class=\"language-text\">require</code> or <code class=\"language-text\">define</code></li>\n<li>CommonJS/Node.js-style imports of the form <code class=\"language-text\">var fs = require(&quot;fs&quot;);</code></li>\n<li>Calls to <code class=\"language-text\">define(...)</code></li>\n<li>Documentation describing how to <code class=\"language-text\">require</code> or import the library</li>\n</ul>\n<h3>Examples of Global Libraries</h3>\n<p>Because it’s usually easy to turn a global library into a UMD library, very few popular libraries are still written in the global style.\nHowever, libraries that are small and require the DOM (or have <em>no</em> dependencies) may still be global.</p>\n<h3>Global Library Template</h3>\n<p>The template file <a href=\"/cb9ced5d139374cb5755783076f1f857/global.d.ts.md\"><code class=\"language-text\">global.d.ts</code></a> defines an example library <code class=\"language-text\">myLib</code>.\nBe sure to read the <a href=\"#preventing-name-conflicts\">“Preventing Name Conflicts” footnote</a>.</p>\n<h2>Modular Libraries</h2>\n<p>Some libraries only work in a module loader environment.\nFor example, <code class=\"language-text\">express</code> only works in Node.js and must be loaded using the CommonJS <code class=\"language-text\">require</code> function.</p>\n<p>ECMAScript 2015 (also known as ES2015, ECMAScript 6, and ES6), CommonJS, and RequireJS have similar notions of <em>importing</em> a <em>module</em>.\nIn JavaScript CommonJS (Node.js), for example, you would write</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In TypeScript or ES6, the <code class=\"language-text\">import</code> keyword serves the same purpose:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> fs <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You’ll typically see modular libraries include one of these lines in their documentation:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> someLib <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'someLib'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>or</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'someLib'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">someLib</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As with global modules, you might see these examples in the documentation of a UMD module, so be sure to check the code or documentation.</p>\n<h3>Identifying a Module Library from Code</h3>\n<p>Modular libraries will typically have at least some of the following:</p>\n<ul>\n<li>Unconditional calls to <code class=\"language-text\">require</code> or <code class=\"language-text\">define</code></li>\n<li>Declarations like <code class=\"language-text\">import * as a from &#39;b&#39;;</code> or <code class=\"language-text\">export c;</code></li>\n<li>Assignments to <code class=\"language-text\">exports</code> or <code class=\"language-text\">module.exports</code></li>\n</ul>\n<p>They will rarely have:</p>\n<ul>\n<li>Assignments to properties of <code class=\"language-text\">window</code> or <code class=\"language-text\">global</code></li>\n</ul>\n<h3>Examples of Modular Libraries</h3>\n<p>Many popular Node.js libraries are in the module family, such as <a href=\"http://expressjs.com/\"><code class=\"language-text\">express</code></a>, <a href=\"http://gulpjs.com/\"><code class=\"language-text\">gulp</code></a>, and <a href=\"https://github.com/request/request\"><code class=\"language-text\">request</code></a>.</p>\n<h2><em>UMD</em></h2>\n<p>A <em>UMD</em> module is one that can <em>either</em> be used as module (through an import), or as a global (when run in an environment without a module loader).\nMany popular libraries, such as <a href=\"http://momentjs.com/\">Moment.js</a>, are written this way.\nFor example, in Node.js or using RequireJS, you would write:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> moment <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"moment\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>moment<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>whereas in a vanilla browser environment you would write:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>moment<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Identifying a UMD library</h3>\n<p><a href=\"https://github.com/umdjs/umd\">UMD modules</a> check for the existence of a module loader environment.\nThis is an easy-to-spot pattern that looks something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> factory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> define <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span> <span class=\"token operator\">&amp;&amp;</span> define<span class=\"token punctuation\">.</span>amd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"libName\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> module <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">&amp;&amp;</span> module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        root<span class=\"token punctuation\">.</span>returnExports <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>libName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></code></pre></div>\n<p>If you see tests for <code class=\"language-text\">typeof define</code>, <code class=\"language-text\">typeof window</code>, or <code class=\"language-text\">typeof module</code> in the code of a library, especially at the top of the file, it’s almost always a UMD library.</p>\n<p>Documentation for UMD libraries will also often demonstrate a “Using in Node.js” example showing <code class=\"language-text\">require</code>,\nand a “Using in the browser” example showing using a <code class=\"language-text\">&lt;script&gt;</code> tag to load the script.</p>\n<h3>Examples of UMD libraries</h3>\n<p>Most popular libraries are now available as UMD packages.\nExamples include <a href=\"https://jquery.com/\">jQuery</a>, <a href=\"http://momentjs.com/\">Moment.js</a>, <a href=\"https://lodash.com/\">lodash</a>, and many more.</p>\n<h3>Template</h3>\n<p>There are three templates available for modules,\n<a href=\"/0e618da0dd8a782cab5e694068c7c865/module.d.ts.md\"><code class=\"language-text\">module.d.ts</code></a>, <a href=\"/afaee5fda006d4d5533421a751a7ff09/module-class.d.ts.md\"><code class=\"language-text\">module-class.d.ts</code></a> and <a href=\"/711d028582812776fb46ae33958727e5/module-function.d.ts.md\"><code class=\"language-text\">module-function.d.ts</code></a>.</p>\n<p>Use <a href=\"/711d028582812776fb46ae33958727e5/module-function.d.ts.md\"><code class=\"language-text\">module-function.d.ts</code></a> if your module can be <em>called</em> like a function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Note: calling 'x' as a function</span>\n<span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Be sure to read the <a href=\"#the-impact-of-es6-on-module-plugins\">footnote “The Impact of ES6 on Module Call Signatures”</a></p>\n<p>Use <a href=\"/afaee5fda006d4d5533421a751a7ff09/module-class.d.ts.md\"><code class=\"language-text\">module-class.d.ts</code></a> if your module can be <em>constructed</em> using <code class=\"language-text\">new</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Note: using 'new' operator on the imported variable</span>\n<span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">x</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The same <a href=\"#the-impact-of-es6-on-module-plugins\">footnote</a> applies to these modules.</p>\n<p>If your module is not callable or constructable, use the <a href=\"/0e618da0dd8a782cab5e694068c7c865/module.d.ts.md\"><code class=\"language-text\">module.d.ts</code></a> file.</p>\n<h2><em>Module Plugin</em> or <em>UMD Plugin</em></h2>\n<p>A <em>module plugin</em> changes the shape of another module (either UMD or module).\nFor example, in Moment.js, <code class=\"language-text\">moment-range</code> adds a new <code class=\"language-text\">range</code> method to the <code class=\"language-text\">moment</code> object.</p>\n<p>For the purposes of writing a declaration file, you’ll write the same code whether the module being changed is a plain module or UMD module.</p>\n<h3>Template</h3>\n<p>Use the <a href=\"/10f4138b969b3735d974a5f72ced73b8/module-plugin.d.ts.md\"><code class=\"language-text\">module-plugin.d.ts</code></a> template.</p>\n<h2><em>Global Plugin</em></h2>\n<p>A <em>global plugin</em> is global code that changes the shape of some global.\nAs with <em>global-modifying modules</em>, these raise the possibility of runtime conflict.</p>\n<p>For example, some libraries add new functions to <code class=\"language-text\">Array.prototype</code> or <code class=\"language-text\">String.prototype</code>.</p>\n<h3>Identifying global plugins</h3>\n<p>Global plugins are generally easy to identify from their documentation.</p>\n<p>You’ll see examples that look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"hello, world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Creates new methods on built-in types</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">startsWithHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Creates new methods on built-in types</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">reverseAndSort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Template</h3>\n<p>Use the <a href=\"/6b218c174110f2a04bba3f2133628b75/global-plugin.d.ts.md\"><code class=\"language-text\">global-plugin.d.ts</code></a> template.</p>\n<h2><em>Global-modifying Modules</em></h2>\n<p>A <em>global-modifying module</em> alters existing values in the global scope when they are imported.\nFor example, there might exist a library which adds new members to <code class=\"language-text\">String.prototype</code> when imported.\nThis pattern is somewhat dangerous due to the possibility of runtime conflicts,\nbut we can still write a declaration file for it.</p>\n<h3>Identifying global-modifying modules</h3>\n<p>Global-modifying modules are generally easy to identify from their documentation.\nIn general, they’re similar to global plugins, but need a <code class=\"language-text\">require</code> call to activate their effects.</p>\n<p>You might see documentation like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 'require' call that doesn't use its return value</span>\n<span class=\"token keyword\">var</span> unused <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"magic-string-time\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* or */</span>\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"magic-string-time\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"hello, world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Creates new methods on built-in types</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">startsWithHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Creates new methods on built-in types</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">reverseAndSort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Template</h3>\n<p>Use the <a href=\"/80e7078aedd15bc4c39a13afca994502/global-modifying-module.d.ts.md\"><code class=\"language-text\">global-modifying-module.d.ts</code></a> template.</p>\n<h1>Consuming Dependencies</h1>\n<p>There are several kinds of dependencies your library might have.\nThis section shows how to import them into the declaration file.</p>\n<h2>Dependencies on Global Libraries</h2>\n<p>If your library depends on a global library, use a <code class=\"language-text\">/// &lt;reference types=&quot;...&quot; /&gt;</code> directive:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/// &lt;reference types=\"someLib\" /></span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getThing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> someLib<span class=\"token punctuation\">.</span>thing<span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Dependencies on Modules</h2>\n<p>If your library depends on a module, use an <code class=\"language-text\">import</code> statement:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> moment <span class=\"token keyword\">from</span> <span class=\"token string\">\"moment\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getThing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> moment<span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Dependencies on UMD libraries</h2>\n<h3>From a Global Library</h3>\n<p>If your global library depends on a UMD module, use a <code class=\"language-text\">/// &lt;reference types</code> directive:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/// &lt;reference types=\"moment\" /></span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getThing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> moment<span class=\"token punctuation\">;</span></code></pre></div>\n<h3>From a Module or UMD Library</h3>\n<p>If your module or UMD library depends on a UMD library, use an <code class=\"language-text\">import</code> statement:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> someLib <span class=\"token keyword\">from</span> <span class=\"token string\">'someLib'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Do <em>not</em> use a <code class=\"language-text\">/// &lt;reference</code> directive to declare a dependency to a UMD library!</p>\n<h1>Footnotes</h1>\n<h2>Preventing Name Conflicts</h2>\n<p>Note that it’s possible to define many types in the global scope when writing a global declaration file.\nWe strongly discourage this as it leads to possible unresolvable name conflicts when many declaration files are in a project.</p>\n<p>A simple rule to follow is to only declare types <em>namespaced</em> by whatever global variable the library defines.\nFor example, if the library defines the global value ‘cats’, you should write</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> cats <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">interface</span> <span class=\"token class-name\">KittySettings</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But <em>not</em></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// at top-level</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CatsKittySettings</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>This guidance also ensures that the library can be transitioned to UMD without breaking declaration file users.</p>\n<h2>The Impact of ES6 on Module Plugins</h2>\n<p>Some plugins add or modify top-level exports on existing modules.\nWhile this is legal in CommonJS and other loaders, ES6 modules are considered immutable and this pattern will not be possible.\nBecause TypeScript is loader-agnostic, there is no compile-time enforcement of this policy, but developers intending to transition to an ES6 module loader should be aware of this.</p>\n<h2>The Impact of ES6 on Module Call Signatures</h2>\n<p>Many popular libraries, such as Express, expose themselves as a callable function when imported.\nFor example, the typical Express usage looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> exp <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> <span class=\"token function\">exp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In ES6 module loaders, the top-level object (here imported as <code class=\"language-text\">exp</code>) can only have properties;\nthe top-level module object is <em>never</em> callable.\nThe most common solution here is to define a <code class=\"language-text\">default</code> export for a callable/constructable object;\nsome module loader shims will automatically detect this situation and replace the top-level object with the <code class=\"language-text\">default</code> export.</p>\n<h2>Library file layout</h2>\n<p>The layout of your declaration files should mirror the layout of the library.</p>\n<p>A library can consist of multiple modules, such as</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">myLib\n  +---- index.js\n  +---- foo.js\n  +---- bar\n         +---- index.js\n         +---- baz.js</code></pre></div>\n<p>These could be imported as</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myLib\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myLib/foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myLib/bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myLib/bar/baz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Your declaration files should thus be</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@types/myLib\n  +---- index.d.ts\n  +---- foo.d.ts\n  +---- bar\n         +---- index.d.ts\n         +---- baz.d.ts</code></pre></div>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/declaration-files/library-structures.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/declaration-files/library-structures.html","isOldHandbook":true}}}