{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/declaration-files/do-s-and-don-ts.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"679802eb-2d17-59f6-a3ac-2726ded4b170","excerpt":"{% raw %}# General Types , , ,  and  Don’t ever use the types , , , , or \nThese types refer to non-primitive boxed objects that are almost never used…","html":"<p>{% raw %}# General Types</p>\n<h2><code class=\"language-text\">Number</code>, <code class=\"language-text\">String</code>, <code class=\"language-text\">Boolean</code>, <code class=\"language-text\">Symbol</code> and <code class=\"language-text\">Object</code></h2>\n<p><em>Don’t</em> ever use the types <code class=\"language-text\">Number</code>, <code class=\"language-text\">String</code>, <code class=\"language-text\">Boolean</code>, <code class=\"language-text\">Symbol</code>, or <code class=\"language-text\">Object</code>\nThese types refer to non-primitive boxed objects that are almost never used appropriately in JavaScript code.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/* WRONG */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">:</span> String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">;</span></code></pre></div>\n<p><em>Do</em> use the types <code class=\"language-text\">number</code>, <code class=\"language-text\">string</code>, <code class=\"language-text\">boolean</code>, and <code class=\"language-text\">symbol</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/* OK */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Instead of <code class=\"language-text\">Object</code>, use the non-primitive <code class=\"language-text\">object</code> type (<a href=\"../release%20notes/TypeScript%202.2.md#object-type\">added in TypeScript 2.2</a>).</p>\n<h2>Generics</h2>\n<p><em>Don’t</em> ever have a generic type which doesn’t use its type parameter.\nSee more details in <a href=\"https://github.com/Microsoft/TypeScript/wiki/FAQ#why-doesnt-type-inference-work-on-this-interface-interface-foot---\">TypeScript FAQ page</a>.</p>\n<!-- TODO: More -->\n<h1>Callback Types</h1>\n<h2>Return Types of Callbacks</h2>\n<!-- TODO: Reword; these examples make no sense in the context of a declaration file -->\n<p><em>Don’t</em> use the return type <code class=\"language-text\">any</code> for callbacks whose value will be ignored:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/* WRONG */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">x</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>Do</em> use the return type <code class=\"language-text\">void</code> for callbacks whose value will be ignored:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/* OK */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">x</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>Why</em>: Using <code class=\"language-text\">void</code> is safer because it prevents you from accidentally using the return value of <code class=\"language-text\">x</code> in an unchecked way:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">x</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> k <span class=\"token operator\">=</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// oops! meant to do something else</span>\n    k<span class=\"token punctuation\">.</span><span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error, but would be OK if the return type had been 'any'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Optional Parameters in Callbacks</h2>\n<p><em>Don’t</em> use optional parameters in callbacks unless you really mean it:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/* WRONG */</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Fetcher</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">done</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> elapsedTime<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This has a very specific meaning: the <code class=\"language-text\">done</code> callback might be invoked with 1 argument or might be invoked with 2 arguments.\nThe author probably intended to say that the callback might not care about the <code class=\"language-text\">elapsedTime</code> parameter,\nbut there’s no need to make the parameter optional to accomplish this —\nit’s always legal to provide a callback that accepts fewer arguments.</p>\n<p><em>Do</em> write callback parameters as non-optional:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/* OK */</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Fetcher</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">done</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> elapsedTime<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Overloads and Callbacks</h2>\n<p><em>Don’t</em> write separate overloads that differ only on callback arity:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/* WRONG */</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">beforeAll</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">action</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">beforeAll</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">action</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">done<span class=\"token punctuation\">:</span> DoneFn</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><em>Do</em> write a single overload using the maximum arity:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/* OK */</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">beforeAll</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">action</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">done<span class=\"token punctuation\">:</span> DoneFn</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><em>Why</em>: It’s always legal for a callback to disregard a parameter, so there’s no need for the shorter overload.\nProviding a shorter callback first allows incorrectly-typed functions to be passed in because they match the first overload.</p>\n<h1>Function Overloads</h1>\n<h2>Ordering</h2>\n<p><em>Don’t</em> put more general overloads before more specific overloads:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/* WRONG */</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> HTMLElement</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> HTMLDivElement</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> myElem<span class=\"token punctuation\">:</span> HTMLDivElement<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>myElem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// x: any, wat?</span></code></pre></div>\n<p><em>Do</em> sort overloads by putting the more general signatures after more specific signatures:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/* OK */</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> HTMLDivElement</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> HTMLElement</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> myElem<span class=\"token punctuation\">:</span> HTMLDivElement<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>myElem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// x: string, :)</span></code></pre></div>\n<p><em>Why</em>: TypeScript chooses the <em>first matching overload</em> when resolving function calls.\nWhen an earlier overload is “more general” than a later one, the later one is effectively hidden and cannot be called.</p>\n<h2>Use Optional Parameters</h2>\n<p><em>Don’t</em> write several overloads that differ only in trailing parameters:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/* WRONG */</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Example</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">diff</span><span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">diff</span><span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> two<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">diff</span><span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> two<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> three<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>Do</em> use optional parameters whenever possible:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/* OK */</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Example</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">diff</span><span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> two<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> three<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that this collapsing should only occur when all overloads have the same return type.</p>\n<p><em>Why</em>: This is important for two reasons.</p>\n<p>TypeScript resolves signature compatibility by seeing if any signature of the target can be invoked with the arguments of the source,\n<em>and extraneous arguments are allowed</em>.\nThis code, for example, exposes a bug only when the signature is correctly written using optional parameters:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">x</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> x<span class=\"token punctuation\">:</span> Example<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// When written with overloads, OK -- used first overload</span>\n<span class=\"token comment\">// When written with optionals, correctly an error</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>diff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The second reason is when a consumer uses the “strict null checking” feature of TypeScript.\nBecause unspecified parameters appear as <code class=\"language-text\">undefined</code> in JavaScript, it’s usually fine to pass an explicit <code class=\"language-text\">undefined</code> to a function with optional arguments.\nThis code, for example, should be OK under strict nulls:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">var</span> x<span class=\"token punctuation\">:</span> Example<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// When written with overloads, incorrectly an error because of passing 'undefined' to 'string'</span>\n<span class=\"token comment\">// When written with optionals, correctly OK</span>\nx<span class=\"token punctuation\">.</span><span class=\"token function\">diff</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"something\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">?</span> undefined <span class=\"token punctuation\">:</span> <span class=\"token string\">\"hour\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Use Union Types</h2>\n<p><em>Don’t</em> write overloads that differ by type in only one argument position:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/* WRONG */</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Moment</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">utcOffset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">utcOffset</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Moment<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">utcOffset</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Moment<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>Do</em> use union types whenever possible:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/* OK */</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Moment</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">utcOffset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">utcOffset</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token operator\">|</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Moment<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that we didn’t make <code class=\"language-text\">b</code> optional here because the return types of the signatures differ.</p>\n<p><em>Why</em>: This is important for people who are “passing through” a value to your function:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token operator\">|</span><span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// When written with separate overloads, incorrectly an error</span>\n    <span class=\"token comment\">// When written with union types, correctly OK</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">utcOffset</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/declaration-files/do-s-and-don-ts.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/declaration-files/do-s-and-don-ts.html","isOldHandbook":true}}}