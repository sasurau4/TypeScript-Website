{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/declaration-files/do-s-and-don-ts.html","result":{"data":{"markdownRemark":{"id":"679802eb-2d17-59f6-a3ac-2726ded4b170","excerpt":"General Types Number, String, Boolean, Symbol and Object Don’t ever use the types Number, String, Boolean, Symbol, or Object\nThese types refer to non-primitive…","html":"<h1 id=\"general-types\"><a href=\"#general-types\" aria-label=\"general types permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>General Types</h1>\n<h2 id=\"number-string-boolean-symbol-and-object\"><a href=\"#number-string-boolean-symbol-and-object\" aria-label=\"number string boolean symbol and object permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Number</code>, <code>String</code>, <code>Boolean</code>, <code>Symbol</code> and <code>Object</code></h2>\n<p><em>Don’t</em> ever use the types <code>Number</code>, <code>String</code>, <code>Boolean</code>, <code>Symbol</code>, or <code>Object</code>\nThese types refer to non-primitive boxed objects that are almost never used appropriately in JavaScript code.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">/* WRONG */</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> reverse(s: String): String;</span></code></div></pre>\n<p><em>Do</em> use the types <code>number</code>, <code>string</code>, <code>boolean</code>, and <code>symbol</code>.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">/* OK */</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> reverse(s: string): string;</span></code></div></pre>\n<p>Instead of <code>Object</code>, use the non-primitive <code>object</code> type (<a href=\"../release%20notes/TypeScript%202.2.md#object-type\">added in TypeScript 2.2</a>).</p>\n<h2 id=\"generics\"><a href=\"#generics\" aria-label=\"generics permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generics</h2>\n<p><em>Don’t</em> ever have a generic type which doesn’t use its type parameter.\nSee more details in <a href=\"https://github.com/Microsoft/TypeScript/wiki/FAQ#why-doesnt-type-inference-work-on-this-interface-interface-foot---\">TypeScript FAQ page</a>.</p>\n<!-- TODO: More -->\n<h1 id=\"callback-types\"><a href=\"#callback-types\" aria-label=\"callback types permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Callback Types</h1>\n<h2 id=\"return-types-of-callbacks\"><a href=\"#return-types-of-callbacks\" aria-label=\"return types of callbacks permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Return Types of Callbacks</h2>\n<!-- TODO: Reword; these examples make no sense in the context of a declaration file -->\n<p><em>Don’t</em> use the return type <code>any</code> for callbacks whose value will be ignored:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">/* WRONG */</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> fn(x: () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> any) {</span>\n<span style=\"color: #000000\">    x();</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p><em>Do</em> use the return type <code>void</code> for callbacks whose value will be ignored:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">/* OK */</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> fn(x: () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> void) {</span>\n<span style=\"color: #000000\">    x();</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p><em>Why</em>: Using <code>void</code> is safer because it prevents you from accidentally using the return value of <code>x</code> in an unchecked way:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> fn(x: () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> void) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> k = x(); </span><span style=\"color: #008000\">// oops! meant to do something else</span>\n<span style=\"color: #000000\">    k.doSomething(); </span><span style=\"color: #008000\">// error, but would be OK if the return type had been 'any'</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<h2 id=\"optional-parameters-in-callbacks\"><a href=\"#optional-parameters-in-callbacks\" aria-label=\"optional parameters in callbacks permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optional Parameters in Callbacks</h2>\n<p><em>Don’t</em> use optional parameters in callbacks unless you really mean it:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">/* WRONG */</span>\n<span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> Fetcher {</span>\n<span style=\"color: #000000\">    getObject(done: (data: any, elapsedTime?: number) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> void): void;</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>This has a very specific meaning: the <code>done</code> callback might be invoked with 1 argument or might be invoked with 2 arguments.\nThe author probably intended to say that the callback might not care about the <code>elapsedTime</code> parameter,\nbut there’s no need to make the parameter optional to accomplish this —\nit’s always legal to provide a callback that accepts fewer arguments.</p>\n<p><em>Do</em> write callback parameters as non-optional:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">/* OK */</span>\n<span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> Fetcher {</span>\n<span style=\"color: #000000\">    getObject(done: (data: any, elapsedTime: number) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> void): void;</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<h2 id=\"overloads-and-callbacks\"><a href=\"#overloads-and-callbacks\" aria-label=\"overloads and callbacks permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overloads and Callbacks</h2>\n<p><em>Don’t</em> write separate overloads that differ only on callback arity:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">/* WRONG */</span>\n<span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> beforeAll(action: () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> void, timeout?: number): void;</span>\n<span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> beforeAll(action: (done: DoneFn) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> void, timeout?: number): void;</span></code></div></pre>\n<p><em>Do</em> write a single overload using the maximum arity:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">/* OK */</span>\n<span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> beforeAll(action: (done: DoneFn) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> void, timeout?: number): void;</span></code></div></pre>\n<p><em>Why</em>: It’s always legal for a callback to disregard a parameter, so there’s no need for the shorter overload.\nProviding a shorter callback first allows incorrectly-typed functions to be passed in because they match the first overload.</p>\n<h1 id=\"function-overloads\"><a href=\"#function-overloads\" aria-label=\"function overloads permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Function Overloads</h1>\n<h2 id=\"ordering\"><a href=\"#ordering\" aria-label=\"ordering permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ordering</h2>\n<p><em>Don’t</em> put more general overloads before more specific overloads:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">/* WRONG */</span>\n<span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> fn(x: any): any;</span>\n<span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> fn(x: HTMLElement): number;</span>\n<span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> fn(x: HTMLDivElement): string;</span>\n\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> myElem: HTMLDivElement;</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> x = fn(myElem); </span><span style=\"color: #008000\">// x: any, wat?</span></code></div></pre>\n<p><em>Do</em> sort overloads by putting the more general signatures after more specific signatures:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">/* OK */</span>\n<span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> fn(x: HTMLDivElement): string;</span>\n<span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> fn(x: HTMLElement): number;</span>\n<span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> fn(x: any): any;</span>\n\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> myElem: HTMLDivElement;</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> x = fn(myElem); </span><span style=\"color: #008000\">// x: string, :)</span></code></div></pre>\n<p><em>Why</em>: TypeScript chooses the <em>first matching overload</em> when resolving function calls.\nWhen an earlier overload is “more general” than a later one, the later one is effectively hidden and cannot be called.</p>\n<h2 id=\"use-optional-parameters\"><a href=\"#use-optional-parameters\" aria-label=\"use optional parameters permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use Optional Parameters</h2>\n<p><em>Don’t</em> write several overloads that differ only in trailing parameters:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">/* WRONG */</span>\n<span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> Example {</span>\n<span style=\"color: #000000\">    diff(one: string): number;</span>\n<span style=\"color: #000000\">    diff(one: string, two: string): number;</span>\n<span style=\"color: #000000\">    diff(one: string, two: string, three: boolean): number;</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p><em>Do</em> use optional parameters whenever possible:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">/* OK */</span>\n<span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> Example {</span>\n<span style=\"color: #000000\">    diff(one: string, two?: string, three?: boolean): number;</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Note that this collapsing should only occur when all overloads have the same return type.</p>\n<p><em>Why</em>: This is important for two reasons.</p>\n<p>TypeScript resolves signature compatibility by seeing if any signature of the target can be invoked with the arguments of the source,\n<em>and extraneous arguments are allowed</em>.\nThis code, for example, exposes a bug only when the signature is correctly written using optional parameters:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> fn(x: (a: string, b: number, c: number) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #000000\"> void) { }</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> x: Example;</span>\n<span style=\"color: #008000\">// When written with overloads, OK -- used first overload</span>\n<span style=\"color: #008000\">// When written with optionals, correctly an error</span>\n<span style=\"color: #000000\">fn(x.diff);</span></code></div></pre>\n<p>The second reason is when a consumer uses the “strict null checking” feature of TypeScript.\nBecause unspecified parameters appear as <code>undefined</code> in JavaScript, it’s usually fine to pass an explicit <code>undefined</code> to a function with optional arguments.\nThis code, for example, should be OK under strict nulls:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">var</span><span style=\"color: #000000\"> x: Example;</span>\n<span style=\"color: #008000\">// When written with overloads, incorrectly an error because of passing 'undefined' to 'string'</span>\n<span style=\"color: #008000\">// When written with optionals, correctly OK</span>\n<span style=\"color: #000000\">x.diff(</span><span style=\"color: #A31515\">\"something\"</span><span style=\"color: #000000\">, </span><span style=\"color: #0000FF\">true</span><span style=\"color: #000000\"> ? </span><span style=\"color: #0000FF\">undefined</span><span style=\"color: #000000\"> : </span><span style=\"color: #A31515\">\"hour\"</span><span style=\"color: #000000\">);</span></code></div></pre>\n<h2 id=\"use-union-types\"><a href=\"#use-union-types\" aria-label=\"use union types permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use Union Types</h2>\n<p><em>Don’t</em> write overloads that differ by type in only one argument position:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">/* WRONG */</span>\n<span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> Moment {</span>\n<span style=\"color: #000000\">    utcOffset(): number;</span>\n<span style=\"color: #000000\">    utcOffset(b: number): Moment;</span>\n<span style=\"color: #000000\">    utcOffset(b: string): Moment;</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p><em>Do</em> use union types whenever possible:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">/* OK */</span>\n<span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> Moment {</span>\n<span style=\"color: #000000\">    utcOffset(): number;</span>\n<span style=\"color: #000000\">    utcOffset(b: number|string): Moment;</span>\n<span style=\"color: #000000\">}</span></code></div></pre>\n<p>Note that we didn’t make <code>b</code> optional here because the return types of the signatures differ.</p>\n<p><em>Why</em>: This is important for people who are “passing through” a value to your function:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> fn(x: string): void;</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> fn(x: number): void;</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> fn(x: number|string) {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// When written with separate overloads, incorrectly an error</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">// When written with union types, correctly OK</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #000000\"> moment().utcOffset(x);</span>\n<span style=\"color: #000000\">}</span></code></div></pre>","headings":[{"value":"General Types","depth":1},{"value":"Number, String, Boolean, Symbol and Object","depth":2},{"value":"Generics","depth":2},{"value":"Callback Types","depth":1},{"value":"Return Types of Callbacks","depth":2},{"value":"Optional Parameters in Callbacks","depth":2},{"value":"Overloads and Callbacks","depth":2},{"value":"Function Overloads","depth":1},{"value":"Ordering","depth":2},{"value":"Use Optional Parameters","depth":2},{"value":"Use Union Types","depth":2}],"frontmatter":{"permalink":"/docs/handbook/declaration-files/do-s-and-don-ts.html","title":"Do's and Don'ts"}}},"pageContext":{"slug":"/docs/handbook/declaration-files/do-s-and-don-ts.html","isOldHandbook":true}}}