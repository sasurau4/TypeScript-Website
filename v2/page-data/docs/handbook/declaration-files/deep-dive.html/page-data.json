{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/declaration-files/deep-dive.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"34a08c6e-8c3a-5bd3-a745-7047490d5a3b","excerpt":"{% raw %}# Definition File Theory: A Deep Dive Structuring modules to give the exact API shape you want can be tricky.\nFor example, we might want a module that…","html":"<p>{% raw %}# Definition File Theory: A Deep Dive</p>\n<p>Structuring modules to give the exact API shape you want can be tricky.\nFor example, we might want a module that can be invoked with or without <code class=\"language-text\">new</code> to produce different types,\nhas a variety of named types exposed in a hierarchy,\nand has some properties on the module object as well.</p>\n<p>By reading this guide, you’ll have the tools to write complex definition files that expose a friendly API surface.\nThis guide focuses on module (or UMD) libraries because the options here are more varied.</p>\n<h2>Key Concepts</h2>\n<p>You can fully understand how to make any shape of definition\nby understanding some key concepts of how TypeScript works.</p>\n<h3>Types</h3>\n<p>If you’re reading this guide, you probably already roughly know what a type in TypeScript is.\nTo be more explicit, though, a <em>type</em> is introduced with:</p>\n<ul>\n<li>A type alias declaration (<code class=\"language-text\">type sn = number | string;</code>)</li>\n<li>An interface declaration (<code class=\"language-text\">interface I { x: number[]; }</code>)</li>\n<li>A class declaration (<code class=\"language-text\">class C { }</code>)</li>\n<li>An enum declaration (<code class=\"language-text\">enum E { A, B, C }</code>)</li>\n<li>An <code class=\"language-text\">import</code> declaration which refers to a type</li>\n</ul>\n<p>Each of these declaration forms creates a new type name.</p>\n<h3>Values</h3>\n<p>As with types, you probably already understand what a value is.\nValues are runtime names that we can reference in expressions.\nFor example <code class=\"language-text\">let x = 5;</code> creates a value called <code class=\"language-text\">x</code>.</p>\n<p>Again, being explicit, the following things create values:</p>\n<ul>\n<li><code class=\"language-text\">let</code>, <code class=\"language-text\">const</code>, and <code class=\"language-text\">var</code> declarations</li>\n<li>A <code class=\"language-text\">namespace</code> or <code class=\"language-text\">module</code> declaration which contains a value</li>\n<li>An <code class=\"language-text\">enum</code> declaration</li>\n<li>A <code class=\"language-text\">class</code> declaration</li>\n<li>An <code class=\"language-text\">import</code> declaration which refers to a value</li>\n<li>A <code class=\"language-text\">function</code> declaration</li>\n</ul>\n<h3>Namespaces</h3>\n<p>Types can exist in <em>namespaces</em>.\nFor example, if we have the declaration <code class=\"language-text\">let x: A.B.C</code>,\nwe say that the type <code class=\"language-text\">C</code> comes from the <code class=\"language-text\">A.B</code> namespace.</p>\n<p>This distinction is subtle and important — here, <code class=\"language-text\">A.B</code> is not necessarily a type or a value.</p>\n<h2>Simple Combinations: One name, multiple meanings</h2>\n<p>Given a name <code class=\"language-text\">A</code>, we might find up to three different meanings for <code class=\"language-text\">A</code>: a type, a value or a namespace.\nHow the name is interpreted depends on the context in which it is used.\nFor example, in the declaration <code class=\"language-text\">let m: A.A = A;</code>,\n<code class=\"language-text\">A</code> is used first as a namespace, then as a type name, then as a value.\nThese meanings might end up referring to entirely different declarations!</p>\n<p>This may seem confusing, but it’s actually very convenient as long as we don’t excessively overload things.\nLet’s look at some useful aspects of this combining behavior.</p>\n<h3>Built-in Combinations</h3>\n<p>Astute readers will notice that, for example, <code class=\"language-text\">class</code> appeared in both the <em>type</em> and <em>value</em> lists.\nThe declaration <code class=\"language-text\">class C { }</code> creates two things:\na <em>type</em> <code class=\"language-text\">C</code> which refers to the instance shape of the class,\nand a <em>value</em> <code class=\"language-text\">C</code> which refers to the constructor function of the class.\nEnum declarations behave similarly.</p>\n<h3>User Combinations</h3>\n<p>Let’s say we wrote a module file <code class=\"language-text\">foo.d.ts</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">var</span> SomeVar<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> SomeType <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">SomeType</span> <span class=\"token punctuation\">{</span>\n  count<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then consumed it:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> foo <span class=\"token keyword\">from</span> <span class=\"token string\">'./foo'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span> foo<span class=\"token punctuation\">.</span>SomeType <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">.</span>SomeVar<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This works well enough, but we might imagine that <code class=\"language-text\">SomeType</code> and <code class=\"language-text\">SomeVar</code> were very closely related\nsuch that you’d like them to have the same name.\nWe can use combining to present these two different objects (the value and the type) under the same name <code class=\"language-text\">Bar</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">var</span> Bar<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> Bar <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Bar</span> <span class=\"token punctuation\">{</span>\n  count<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This presents a very good opportunity for destructuring in the consuming code:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Bar <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./foo'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span> Bar <span class=\"token operator\">=</span> Bar<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Again, we’ve used <code class=\"language-text\">Bar</code> as both a type and a value here.\nNote that we didn’t have to declare the <code class=\"language-text\">Bar</code> value as being of the <code class=\"language-text\">Bar</code> type — they’re independent.</p>\n<h2>Advanced Combinations</h2>\n<p>Some kinds of declarations can be combined across multiple declarations.\nFor example, <code class=\"language-text\">class C { }</code> and <code class=\"language-text\">interface C { }</code> can co-exist and both contribute properties to the <code class=\"language-text\">C</code> types.</p>\n<p>This is legal as long as it does not create a conflict.\nA general rule of thumb is that values always conflict with other values of the same name unless they are declared as <code class=\"language-text\">namespace</code>s,\ntypes will conflict if they are declared with a type alias declaration (<code class=\"language-text\">type s = string</code>),\nand namespaces never conflict.</p>\n<p>Let’s see how this can be used.</p>\n<h3>Adding using an <code class=\"language-text\">interface</code></h3>\n<p>We can add additional members to an <code class=\"language-text\">interface</code> with another <code class=\"language-text\">interface</code> declaration:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ... elsewhere ...</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> a<span class=\"token punctuation\">:</span> Foo <span class=\"token operator\">=</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> a<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span></code></pre></div>\n<p>This also works with classes:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ... elsewhere ...</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> a<span class=\"token punctuation\">:</span> Foo <span class=\"token operator\">=</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> a<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span></code></pre></div>\n<p>Note that we cannot add to type aliases (<code class=\"language-text\">type s = string;</code>) using an interface.</p>\n<h3>Adding using a <code class=\"language-text\">namespace</code></h3>\n<p>A <code class=\"language-text\">namespace</code> declaration can be used to add new types, values, and namespaces in any way which does not create a conflict.</p>\n<p>For example, we can add a static member to a class:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ... elsewhere ...</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token constant\">C</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span></code></pre></div>\n<p>Note that in this example, we added a value to the <em>static</em> side of <code class=\"language-text\">C</code> (its constructor function).\nThis is because we added a <em>value</em>, and the container for all values is another value\n(types are contained by namespaces, and namespaces are contained by other namespaces).</p>\n<p>We could also add a namespaced type to a class:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ... elsewhere ...</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token constant\">C</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">D</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> y<span class=\"token punctuation\">:</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">.</span><span class=\"token constant\">D</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span></code></pre></div>\n<p>In this example, there wasn’t a namespace <code class=\"language-text\">C</code> until we wrote the <code class=\"language-text\">namespace</code> declaration for it.\nThe meaning <code class=\"language-text\">C</code> as a namespace doesn’t conflict with the value or type meanings of <code class=\"language-text\">C</code> created by the class.</p>\n<p>Finally, we could perform many different merges using <code class=\"language-text\">namespace</code> declarations.\nThis isn’t a particularly realistic example, but shows all sorts of interesting behavior:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">namespace</span> <span class=\"token constant\">X</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Y</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Z</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ... elsewhere ...</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token constant\">X</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">var</span> <span class=\"token constant\">Y</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">namespace</span> <span class=\"token constant\">Z</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">X</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In this example, the first block creates the following name meanings:</p>\n<ul>\n<li>A value <code class=\"language-text\">X</code> (because the <code class=\"language-text\">namespace</code> declaration contains a value, <code class=\"language-text\">Z</code>)</li>\n<li>A namespace <code class=\"language-text\">X</code> (because the <code class=\"language-text\">namespace</code> declaration contains a type, <code class=\"language-text\">Y</code>)</li>\n<li>A type <code class=\"language-text\">Y</code> in the <code class=\"language-text\">X</code> namespace</li>\n<li>A type <code class=\"language-text\">Z</code> in the <code class=\"language-text\">X</code> namespace (the instance shape of the class)</li>\n<li>A value <code class=\"language-text\">Z</code> that is a property of the <code class=\"language-text\">X</code> value (the constructor function of the class)</li>\n</ul>\n<p>The second  block creates the following name meanings:</p>\n<ul>\n<li>A value <code class=\"language-text\">Y</code> (of type <code class=\"language-text\">number</code>) that is a property of the <code class=\"language-text\">X</code> value</li>\n<li>A namespace <code class=\"language-text\">Z</code></li>\n<li>A value <code class=\"language-text\">Z</code> that is a property of the <code class=\"language-text\">X</code> value</li>\n<li>A type <code class=\"language-text\">C</code> in the <code class=\"language-text\">X.Z</code> namespace</li>\n<li>A value <code class=\"language-text\">C</code> that is a property of the <code class=\"language-text\">X.Z</code> value</li>\n<li>A type <code class=\"language-text\">X</code></li>\n</ul>\n<h2>Using with <code class=\"language-text\">export =</code> or <code class=\"language-text\">import</code></h2>\n<p>An important rule is that <code class=\"language-text\">export</code> and <code class=\"language-text\">import</code> declarations export or import <em>all meanings</em> of their targets.</p>\n<!-- TODO: Write more on that. -->\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/declaration-files/deep-dive.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/declaration-files/deep-dive.html","isOldHandbook":true}}}