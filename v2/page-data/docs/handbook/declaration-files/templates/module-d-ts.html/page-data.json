{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/declaration-files/templates/module-d-ts.html","result":{"data":{"markdownRemark":{"id":"88ff45bd-5892-54d1-84de-e41cdea170e1","excerpt":"","html":"<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]</span>\n<span style=\"color: #008000\">// Project: [~THE PROJECT NAME~]</span>\n<span style=\"color: #008000\">// Definitions by: [~YOUR NAME~] &lt;[~A URL FOR YOU~]&gt;</span>\n\n<span style=\"color: #008000\">/*~ This is the module template file. You should rename it to index.d.ts</span>\n<span style=\"color: #008000\"> *~ and place it in a folder with the same name as the module.</span>\n<span style=\"color: #008000\"> *~ For example, if you were writing a file for \"super-greeter\", this</span>\n<span style=\"color: #008000\"> *~ file should be 'super-greeter/index.d.ts'</span>\n<span style=\"color: #008000\"> */</span>\n\n<span style=\"color: #008000\">/*~ If this module is a UMD module that exposes a global variable 'myLib' when</span>\n<span style=\"color: #008000\"> *~ loaded outside a module loader environment, declare that global here.</span>\n<span style=\"color: #008000\"> *~ Otherwise, delete this declaration.</span>\n<span style=\"color: #008000\"> */</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> myLib;</span>\n\n<span style=\"color: #008000\">/*~ If this module has methods, declare them as functions like so.</span>\n<span style=\"color: #008000\"> */</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> myMethod(a: string): string;</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> myOtherMethod(a: number): number;</span>\n\n<span style=\"color: #008000\">/*~ You can declare types that are available via importing the module */</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> someType {</span>\n<span style=\"color: #000000\">    name: string;</span>\n<span style=\"color: #000000\">    length: number;</span>\n<span style=\"color: #000000\">    extras?: string[];</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #008000\">/*~ You can declare properties of the module using const, let, or var */</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> myField: number;</span>\n\n<span style=\"color: #008000\">/*~ If there are types, properties, or methods inside dotted names</span>\n<span style=\"color: #008000\"> *~ of the module, declare them inside a 'namespace'.</span>\n<span style=\"color: #008000\"> */</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> subProp {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">/*~ For example, given this definition, someone could write:</span>\n<span style=\"color: #008000\">     *~   import { subProp } from 'yourModule';</span>\n<span style=\"color: #008000\">     *~   subProp.foo();</span>\n<span style=\"color: #008000\">     *~ or</span>\n<span style=\"color: #008000\">     *~   import * as yourMod from 'yourModule';</span>\n<span style=\"color: #008000\">     *~   yourMod.subProp.foo();</span>\n<span style=\"color: #008000\">     */</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">export</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> foo(): void;</span>\n<span style=\"color: #000000\">}</span></code></div></pre>","headings":[],"frontmatter":{"permalink":"/docs/handbook/declaration-files/templates/module-d-ts.html","title":"module.d.ts"}}},"pageContext":{"slug":"/docs/handbook/declaration-files/templates/module-d-ts.html","isOldHandbook":true}}}