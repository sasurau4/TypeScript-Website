{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/declaration-files/templates/global-d-ts.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"2525333c-72f1-5dc8-9724-b4b477d76335","excerpt":"{% raw %}`ts\n// Type definitions for ~THE LIBRARY NAME~ ~OPTIONAL VERSION NUMBER~\n// Project: ~THE PROJECT NAME~\n// Definitions by: ~YOUR NAME~ <~A URL FOR YOU…","html":"<p>{% raw %}`<code class=\"language-text\"></code>ts\n// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]\n// Project: [~THE PROJECT NAME~]\n// Definitions by: [~YOUR NAME~] &#x3C;[~A URL FOR YOU~]></p>\n<p>/*~ If this library is callable (e.g. can be invoked as myLib(3)),\n*~ include those call signatures here.\n*~ Otherwise, delete this section.\n*/\ndeclare function myLib(a: string): string;\ndeclare function myLib(a: number): number;</p>\n<p>/*~ If you want the name of this library to be a valid type name,\n*~ you can do so here.\n*~\n*~ For example, this allows us to write ‘var x: myLib’;\n*~ Be sure this actually makes sense! If it doesn’t, just\n*~ delete this declaration and add types inside the namespace below.\n*/\ninterface myLib {\nname: string;\nlength: number;\nextras?: string[];\n}</p>\n<p>/*~ If your library has properties exposed on a global variable,\n*~ place them here.\n*~ You should also place types (interfaces and type alias) here.\n*/\ndeclare namespace myLib {\n//~ We can write ‘myLib.timeout = 50;’\nlet timeout: number;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//~ We can access &#39;myLib.version&#39;, but not change it\nconst version: string;\n\n//~ There&#39;s some class we can create via &#39;let c = new myLib.Cat(42)&#39;\n//~ Or reference e.g. &#39;function f(c: myLib.Cat) { ... }\nclass Cat {\n    constructor(n: number);\n\n    //~ We can read &#39;c.age&#39; from a &#39;Cat&#39; instance\n    readonly age: number;\n\n    //~ We can invoke &#39;c.purr()&#39; from a &#39;Cat&#39; instance\n    purr(): void;\n}\n\n//~ We can declare a variable as\n//~   &#39;var s: myLib.CatSettings = { weight: 5, name: &quot;Maru&quot; };&#39;\ninterface CatSettings {\n    weight: number;\n    name: string;\n    tailLength?: number;\n}\n\n//~ We can write &#39;const v: myLib.VetID = 42;&#39;\n//~  or &#39;const v: myLib.VetID = &quot;bob&quot;;&#39;\ntype VetID = string | number;\n\n//~ We can invoke &#39;myLib.checkCat(c)&#39; or &#39;myLib.checkCat(c, v);&#39;\nfunction checkCat(c: Cat, s?: VetID);</code></pre></div>\n<p>}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{% endraw %}</code></pre></div>","frontmatter":{"permalink":"/docs/handbook/declaration-files/templates/global-d-ts.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/declaration-files/templates/global-d-ts.html","isOldHandbook":true}}}