{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/declaration-files/templates/global-d-ts.html","result":{"data":{"markdownRemark":{"id":"2525333c-72f1-5dc8-9724-b4b477d76335","excerpt":"","html":"<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]</span>\n<span style=\"color: #008000\">// Project: [~THE PROJECT NAME~]</span>\n<span style=\"color: #008000\">// Definitions by: [~YOUR NAME~] &lt;[~A URL FOR YOU~]&gt;</span>\n\n<span style=\"color: #008000\">/*~ If this library is callable (e.g. can be invoked as myLib(3)),</span>\n<span style=\"color: #008000\"> *~ include those call signatures here.</span>\n<span style=\"color: #008000\"> *~ Otherwise, delete this section.</span>\n<span style=\"color: #008000\"> */</span>\n<span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> myLib(a: string): string;</span>\n<span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> myLib(a: number): number;</span>\n\n<span style=\"color: #008000\">/*~ If you want the name of this library to be a valid type name,</span>\n<span style=\"color: #008000\"> *~ you can do so here.</span>\n<span style=\"color: #008000\"> *~</span>\n<span style=\"color: #008000\"> *~ For example, this allows us to write 'var x: myLib';</span>\n<span style=\"color: #008000\"> *~ Be sure this actually makes sense! If it doesn't, just</span>\n<span style=\"color: #008000\"> *~ delete this declaration and add types inside the namespace below.</span>\n<span style=\"color: #008000\"> */</span>\n<span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> myLib {</span>\n<span style=\"color: #000000\">    name: string;</span>\n<span style=\"color: #000000\">    length: number;</span>\n<span style=\"color: #000000\">    extras?: string[];</span>\n<span style=\"color: #000000\">}</span>\n\n<span style=\"color: #008000\">/*~ If your library has properties exposed on a global variable,</span>\n<span style=\"color: #008000\"> *~ place them here.</span>\n<span style=\"color: #008000\"> *~ You should also place types (interfaces and type alias) here.</span>\n<span style=\"color: #008000\"> */</span>\n<span style=\"color: #0000FF\">declare</span><span style=\"color: #000000\"> </span><span style=\"color: #0000FF\">namespace</span><span style=\"color: #000000\"> myLib {</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">//~ We can write 'myLib.timeout = 50;'</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">let</span><span style=\"color: #000000\"> timeout: number;</span>\n\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">//~ We can access 'myLib.version', but not change it</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #000000\"> version: string;</span>\n\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">//~ There's some class we can create via 'let c = new myLib.Cat(42)'</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">//~ Or reference e.g. 'function f(c: myLib.Cat) { ... }</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">class</span><span style=\"color: #000000\"> Cat {</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #000000\">(n: number);</span>\n\n<span style=\"color: #000000\">        </span><span style=\"color: #008000\">//~ We can read 'c.age' from a 'Cat' instance</span>\n<span style=\"color: #000000\">        </span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #000000\"> age: number;</span>\n\n<span style=\"color: #000000\">        </span><span style=\"color: #008000\">//~ We can invoke 'c.purr()' from a 'Cat' instance</span>\n<span style=\"color: #000000\">        purr(): void;</span>\n<span style=\"color: #000000\">    }</span>\n\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">//~ We can declare a variable as</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">//~   'var s: myLib.CatSettings = { weight: 5, name: \"Maru\" };'</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">interface</span><span style=\"color: #000000\"> CatSettings {</span>\n<span style=\"color: #000000\">        weight: number;</span>\n<span style=\"color: #000000\">        name: string;</span>\n<span style=\"color: #000000\">        tailLength?: number;</span>\n<span style=\"color: #000000\">    }</span>\n\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">//~ We can write 'const v: myLib.VetID = 42;'</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">//~  or 'const v: myLib.VetID = \"bob\";'</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">type</span><span style=\"color: #000000\"> VetID = string | number;</span>\n\n<span style=\"color: #000000\">    </span><span style=\"color: #008000\">//~ We can invoke 'myLib.checkCat(c)' or 'myLib.checkCat(c, v);'</span>\n<span style=\"color: #000000\">    </span><span style=\"color: #0000FF\">function</span><span style=\"color: #000000\"> checkCat(c: Cat, s?: VetID);</span>\n<span style=\"color: #000000\">}</span></code></div></pre>","headings":[],"frontmatter":{"permalink":"/docs/handbook/declaration-files/templates/global-d-ts.html","title":"global.d.ts"}}},"pageContext":{"slug":"/docs/handbook/declaration-files/templates/global-d-ts.html","isOldHandbook":true}}}