{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/declaration-files/templates/global-plugin-d-ts.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"4d0d00f4-496b-52db-9934-4d24d2da1cd2","excerpt":"{% raw %}`ts\n// Type definitions for ~THE LIBRARY NAME~ ~OPTIONAL VERSION NUMBER~\n// Project: ~THE PROJECT NAME~\n// Definitions by: ~YOUR NAME~ <~A URL FOR YOU…","html":"<p>{% raw %}`<code class=\"language-text\"></code>ts\n// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]\n// Project: [~THE PROJECT NAME~]\n// Definitions by: [~YOUR NAME~] &#x3C;[~A URL FOR YOU~]></p>\n<p>/*~ This template shows how to write a global plugin. */</p>\n<p>/*~ Write a declaration for the original type and add new members.\n*~ For example, this adds a ‘toBinaryString’ method with overloads to\n*~ the built-in number type.\n*/\ninterface Number {\ntoBinaryString(opts?: MyLibrary.BinaryFormatOptions): string;\ntoBinaryString(callback: MyLibrary.BinaryFormatCallback, opts?: MyLibrary.BinaryFormatOptions): string;\n}</p>\n<p>/*~ If you need to declare several types, place them inside a namespace\n*~ to avoid adding too many things to the global namespace.\n*/\ndeclare namespace MyLibrary {\ntype BinaryFormatCallback = (n: number) => string;\ninterface BinaryFormatOptions {\nprefix?: string;\npadding: number;\n}\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{% endraw %}</code></pre></div>","frontmatter":{"permalink":"/docs/handbook/declaration-files/templates/global-plugin-d-ts.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/declaration-files/templates/global-plugin-d-ts.html","isOldHandbook":true}}}