{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/jsdoc-supported-types.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"b8ad4f68-00fe-5da8-bf2e-49ac8090efe3","excerpt":"{% raw %}The list below outlines which constructs are currently supported\nwhen using JSDoc annotations to provide type information in JavaScript files. Note any…","html":"<p>{% raw %}The list below outlines which constructs are currently supported\nwhen using JSDoc annotations to provide type information in JavaScript files.</p>\n<p>Note any tags which are not explicitly listed below (such as <code class=\"language-text\">@async</code>) are not yet supported.</p>\n<ul>\n<li><code class=\"language-text\">@type</code></li>\n<li><code class=\"language-text\">@param</code> (or <code class=\"language-text\">@arg</code> or <code class=\"language-text\">@argument</code>)</li>\n<li><code class=\"language-text\">@returns</code> (or <code class=\"language-text\">@return</code>)</li>\n<li><code class=\"language-text\">@typedef</code></li>\n<li><code class=\"language-text\">@callback</code></li>\n<li><code class=\"language-text\">@template</code></li>\n<li><code class=\"language-text\">@class</code> (or <code class=\"language-text\">@constructor</code>)</li>\n<li><code class=\"language-text\">@this</code></li>\n<li><code class=\"language-text\">@extends</code> (or <code class=\"language-text\">@augments</code>)</li>\n<li><code class=\"language-text\">@enum</code></li>\n</ul>\n<p>The meaning is usually the same, or a superset, of the meaning of the tag given at <a href=\"https://jsdoc.app\">jsdoc.app</a>.\nThe code below describes the differences and gives some example usage of each tag.</p>\n<h2><code class=\"language-text\">@type</code></h2>\n<p>You can use the “@type” tag and reference a type name (either primitive, defined in a TypeScript declaration, or in a JSDoc “@typedef” tag).\nYou can use any Typescript type, and most JSDoc types.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @type {string}\n */</span>\n<span class=\"token keyword\">var</span> s<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** @type {Window} */</span>\n<span class=\"token keyword\">var</span> win<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** @type {PromiseLike&lt;string>} */</span>\n<span class=\"token keyword\">var</span> promisedString<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// You can specify an HTML Element with DOM properties</span>\n<span class=\"token comment\">/** @type {HTMLElement} */</span>\n<span class=\"token keyword\">var</span> myElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nelement<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>myData <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">@type</code> can specify a union type — for example, something can be either a string or a boolean.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @type {(string | boolean)}\n */</span>\n<span class=\"token keyword\">var</span> sb<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note that parentheses are optional for union types.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @type {string | boolean}\n */</span>\n<span class=\"token keyword\">var</span> sb<span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can specify array types using a variety of syntaxes:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/** @type {number[]} */</span>\n<span class=\"token keyword\">var</span> ns<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/** @type {Array.&lt;number>} */</span>\n<span class=\"token keyword\">var</span> nds<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/** @type {Array&lt;number>} */</span>\n<span class=\"token keyword\">var</span> nas<span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can also specify object literal types.\nFor example, an object with properties ‘a’ (string) and ‘b’ (number) uses the following syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/** @type {{ a: string, b: number }} */</span>\n<span class=\"token keyword\">var</span> var9<span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can specify map-like and array-like objects using string and number index signatures, using either standard JSDoc syntax or Typescript syntax.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * A map-like object that maps arbitrary `string` properties to `number`s.\n *\n * @type {Object.&lt;string, number>}\n */</span>\n<span class=\"token keyword\">var</span> stringToNumber<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** @type {Object.&lt;number, object>} */</span>\n<span class=\"token keyword\">var</span> arrayLike<span class=\"token punctuation\">;</span></code></pre></div>\n<p>The preceding two types are equivalent to the Typescript types <code class=\"language-text\">{ [x: string]: number }</code> and <code class=\"language-text\">{ [x: number]: any }</code>. The compiler understands both syntaxes.</p>\n<p>You can specify function types using either Typescript or Closure syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/** @type {function(string, boolean): number} Closure syntax */</span>\n<span class=\"token keyword\">var</span> sbn<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/** @type {(s: string, b: boolean) => number} Typescript syntax */</span>\n<span class=\"token keyword\">var</span> sbn2<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Or you can just use the unspecified <code class=\"language-text\">Function</code> type:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/** @type {Function} */</span>\n<span class=\"token keyword\">var</span> fn7<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/** @type {function} */</span>\n<span class=\"token keyword\">var</span> fn6<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Other types from Closure also work:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @type {*} - can be 'any' type\n */</span>\n<span class=\"token keyword\">var</span> star<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * @type {?} - unknown type (same as 'any')\n */</span>\n<span class=\"token keyword\">var</span> question<span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Casts</h3>\n<p>Typescript borrows cast syntax from Closure.\nThis lets you cast types to other types by adding a <code class=\"language-text\">@type</code> tag before any parenthesized expression.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @type {number | string}\n */</span>\n<span class=\"token keyword\">var</span> numberOrString <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"hello\"</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> typeAssertedNumber <span class=\"token operator\">=</span> <span class=\"token comment\">/** @type {number} */</span> <span class=\"token punctuation\">(</span>numberOrString<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Import types</h3>\n<p>You can also import declarations from other files using import types.\nThis syntax is Typescript-specific and differs from the JSDoc standard:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @param p { import(\"./a\").Pet }\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Walking </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>p<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">...</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>import types can also be used in type alias declarations:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @typedef { import(\"./a\").Pet } Pet\n */</span>\n\n<span class=\"token comment\">/**\n * @type {Pet}\n */</span>\n<span class=\"token keyword\">var</span> myPet<span class=\"token punctuation\">;</span>\nmyPet<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></code></pre></div>\n<p>import types can be used to get the type of a value from a module if you don’t know the type, or if it has a large type that is annoying to type:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @type {typeof import(\"./a\").x }\n */</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span></code></pre></div>\n<h2><code class=\"language-text\">@param</code> and <code class=\"language-text\">@returns</code></h2>\n<p><code class=\"language-text\">@param</code> uses the same type syntax as <code class=\"language-text\">@type</code>, but adds a parameter name.\nThe parameter may also be declared optional by surrounding the name with square brackets:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Parameters may be declared in a variety of syntactic forms</span>\n<span class=\"token comment\">/**\n * @param {string}  p1 - A string param.\n * @param {string=} p2 - An optional param (Closure syntax)\n * @param {string} [p3] - Another optional param (JSDoc syntax).\n * @param {string} [p4=\"test\"] - An optional param with a default value\n * @return {string} This is the result\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">stringsStringStrings</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">,</span> p3<span class=\"token punctuation\">,</span> p4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// TODO</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Likewise, for the return type of a function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @return {PromiseLike&lt;string>}\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * @returns {{ a: string, b: number }} - May use '@returns' as well as '@return'\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ab</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h2><code class=\"language-text\">@typedef</code>, <code class=\"language-text\">@callback</code>, and <code class=\"language-text\">@param</code></h2>\n<p><code class=\"language-text\">@typedef</code> may be used to define complex types.\nSimilar syntax works with <code class=\"language-text\">@param</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @typedef {Object} SpecialType - creates a new type named 'SpecialType'\n * @property {string} prop1 - a string property of SpecialType\n * @property {number} prop2 - a number property of SpecialType\n * @property {number=} prop3 - an optional number property of SpecialType\n * @prop {number} [prop4] - an optional number property of SpecialType\n * @prop {number} [prop5=42] - an optional number property of SpecialType with default\n */</span>\n<span class=\"token comment\">/** @type {SpecialType} */</span>\n<span class=\"token keyword\">var</span> specialTypeObject<span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can use either <code class=\"language-text\">object</code> or <code class=\"language-text\">Object</code> on the first line.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @typedef {object} SpecialType1 - creates a new type named 'SpecialType'\n * @property {string} prop1 - a string property of SpecialType\n * @property {number} prop2 - a number property of SpecialType\n * @property {number=} prop3 - an optional number property of SpecialType\n */</span>\n<span class=\"token comment\">/** @type {SpecialType1} */</span>\n<span class=\"token keyword\">var</span> specialTypeObject1<span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">@param</code> allows a similar syntax for one-off type specifications.\nNote that the nested property names must be prefixed with the name of the parameter:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @param {Object} options - The shape is the same as SpecialType above\n * @param {string} options.prop1\n * @param {number} options.prop2\n * @param {number=} options.prop3\n * @param {number} [options.prop4]\n * @param {number} [options.prop5=42]\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">special</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>prop4 <span class=\"token operator\">||</span> <span class=\"token number\">1001</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> options<span class=\"token punctuation\">.</span>prop5<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">@callback</code> is similar to <code class=\"language-text\">@typedef</code>, but it specifies a function type instead of an object type:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @callback Predicate\n * @param {string} data\n * @param {number} [index]\n * @returns {boolean}\n */</span>\n<span class=\"token comment\">/** @type {Predicate} */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ok</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">s</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Of course, any of these types can be declared using Typescript syntax in a single-line <code class=\"language-text\">@typedef</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/** @typedef {{ prop1: string, prop2: string, prop3?: number }} SpecialType */</span>\n<span class=\"token comment\">/** @typedef {(data: string, index?: number) => boolean} Predicate */</span></code></pre></div>\n<h2><code class=\"language-text\">@template</code></h2>\n<p>You can declare generic functions with the <code class=\"language-text\">@template</code> tag:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @template T\n * @param {T} p1 - A generic parameter that flows through to the return type\n * @return {T}\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Use comma or multiple tags to declare multiple type parameters:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @template T,U,V\n * @template W,X\n */</span></code></pre></div>\n<p>You can also specify a type constraint before the type parameter name.\nOnly the first type parameter in a list is constrained:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @template {string} K - K must be a string or string literal\n * @template {{ serious(): string }} Seriousalizable - must have a serious method\n * @param {K} key\n * @param {Seriousalizable} object\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">seriousalize</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> object</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ????</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Declaring generic classes or types is unsupported.</p>\n<h2>Classes</h2>\n<p>Classes can be declared as ES6 classes.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * @param {number} data\n   */</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// property types can be inferred</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// or set explicitly</span>\n    <span class=\"token comment\">/** @type {string | null} */</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// or simply annotated, if they're set elsewhere</span>\n    <span class=\"token comment\">/** @type {number} */</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Should error, initializer expects a string</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">/**\n  * @param {string} s\n  */</span>\n  <span class=\"token function-variable function\">initialize</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>length\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// C should only be called with new</span></code></pre></div>\n<p>They can also be declared as constructor functions, as described in the next section:</p>\n<h2><code class=\"language-text\">@constructor</code></h2>\n<p>The compiler infers constructor functions based on this-property assignments, but you can make checking stricter and suggestions better if you add a <code class=\"language-text\">@constructor</code> tag:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @constructor\n * @param {number} data\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// property types can be inferred</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// or set explicitly</span>\n  <span class=\"token comment\">/** @type {string | null} */</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// or simply annotated, if they're set elsewhere</span>\n  <span class=\"token comment\">/** @type {number} */</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Should error, initializer expects a string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/**\n * @param {string} s\n */</span>\n<span class=\"token class-name\">C</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">initialize</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>length\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// C should only be called with new</span></code></pre></div>\n<p>With <code class=\"language-text\">@constructor</code>, <code class=\"language-text\">this</code> is checked inside the constructor function <code class=\"language-text\">C</code>, so you will get suggestions for the <code class=\"language-text\">initialize</code> method and an error if you pass it a number. You will also get an error if you call <code class=\"language-text\">C</code> instead of constructing it.</p>\n<p>Unfortunately, this means that constructor functions that are also callable cannot use <code class=\"language-text\">@constructor</code>.</p>\n<h2><code class=\"language-text\">@this</code></h2>\n<p>The compiler can usually figure out the type of <code class=\"language-text\">this</code> when it has some context to work with. When it doesn’t, you can explicitly specify the type of <code class=\"language-text\">this</code> with <code class=\"language-text\">@this</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @this {HTMLElement}\n * @param {*} e\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">callbackForLater</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clientHeight <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token comment\">// should be fine!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2><code class=\"language-text\">@extends</code></h2>\n<p>When Javascript classes extend a generic base class, there is nowhere to specify what the type parameter should be. The <code class=\"language-text\">@extends</code> tag provides a place for that type parameter:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @template T\n * @extends {Set&lt;T>}\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SortableSet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Set</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that <code class=\"language-text\">@extends</code> only works with classes. Currently, there is no way for a constructor function extend a class.</p>\n<h2><code class=\"language-text\">@enum</code></h2>\n<p>The <code class=\"language-text\">@enum</code> tag allows you to create an object literal whose members are all of a specified type. Unlike most object literals in Javascript, it does not allow other members.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/** @enum {number} */</span>\n<span class=\"token keyword\">const</span> JSDocState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  BeginningOfLine<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  SawAsterisk<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  SavingComments<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that <code class=\"language-text\">@enum</code> is quite different from, and much simpler than, Typescript’s <code class=\"language-text\">enum</code>. However, unlike Typescript’s enums, <code class=\"language-text\">@enum</code> can have any type:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/** @enum {function(number): number} */</span>\n<span class=\"token keyword\">const</span> Math <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">add1</span><span class=\"token punctuation\">:</span> <span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">id</span><span class=\"token punctuation\">:</span> <span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> <span class=\"token operator\">-</span>n<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">sub1</span><span class=\"token punctuation\">:</span> <span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>More examples</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> someObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * @param {string} param1 - Docs on property assignments work\n   */</span>\n  <span class=\"token function-variable function\">x</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">param1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * As do docs on variable assignments\n * @return {Window}\n */</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">someFunc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * And class methods\n * @param {string} greeting The greeting to use\n */</span>\n<span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayHi</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">greeting</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * And arrow functions expressions\n * @param {number} x - A multiplier\n */</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">myArrow</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Which means it works for stateless function components in JSX too\n * @param {{a: string, b: number}} test - Some param\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sfc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">test</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>test<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * A parameter can be a class constructor, using Closure syntax.\n *\n * @param {{new(...args: any[]): object}} C - The class to register\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">registerClass</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">C</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * @param {...string} p1 - A 'rest' arg (array) of strings. (treated as 'any')\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn10</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * @param {...string} p1 - A 'rest' arg (array) of strings. (treated as 'any')\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn9</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> p1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Patterns that are known NOT to be supported</h2>\n<p>Referring to objects in the value space as types doesn’t work unless the object also creates a type, like a constructor function.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">aNormalFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/**\n * @type {aNormalFunction}\n */</span>\n<span class=\"token keyword\">var</span> wrong<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * Use 'typeof' instead:\n * @type {typeof aNormalFunction}\n */</span>\n<span class=\"token keyword\">var</span> right<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Postfix equals on a property type in an object literal type doesn’t specify an optional property:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @type {{ a: string, b: number= }}\n */</span>\n<span class=\"token keyword\">var</span> wrong<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * Use postfix question on the property name instead:\n * @type {{ a: string, b?: number }}\n */</span>\n<span class=\"token keyword\">var</span> right<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nullable types only have meaning if <code class=\"language-text\">strictNullChecks</code> is on:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @type {?number}\n * With strictNullChecks: true  -- number | null\n * With strictNullChecks: false -- number\n */</span>\n<span class=\"token keyword\">var</span> nullable<span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can also use a union type:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @type {number | null}\n * With strictNullChecks: true  -- number | null\n * With strictNullChecks: false -- number\n */</span>\n<span class=\"token keyword\">var</span> unionNullable<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Non-nullable types have no meaning and are treated just as their original type:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @type {!number}\n * Just has type number\n */</span>\n<span class=\"token keyword\">var</span> normal<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Unlike JSDoc’s type system, Typescript only allows you to mark types as containing null or not.\nThere is no explicit non-nullability — if strictNullChecks is on, then <code class=\"language-text\">number</code> is not nullable.\nIf it is off, then <code class=\"language-text\">number</code> is nullable.</p>\n<h3>Unsupported tags</h3>\n<p>TypeScript ignores any unsupported JSDoc tags.</p>\n<p>The following tags have open issues to support them:</p>\n<ul>\n<li><code class=\"language-text\">@const</code> (<a href=\"https://github.com/Microsoft/TypeScript/issues/19672\">issue #19672</a>)</li>\n<li><code class=\"language-text\">@inheritdoc</code> (<a href=\"https://github.com/Microsoft/TypeScript/issues/23215\">issue #23215</a>)</li>\n<li><code class=\"language-text\">@memberof</code> (<a href=\"https://github.com/Microsoft/TypeScript/issues/7237\">issue #7237</a>)</li>\n<li><code class=\"language-text\">@readonly</code> (<a href=\"https://github.com/Microsoft/TypeScript/issues/17233\">issue #17233</a>)</li>\n<li><code class=\"language-text\">@yields</code> (<a href=\"https://github.com/Microsoft/TypeScript/issues/23857\">issue #23857</a>)</li>\n<li><code class=\"language-text\">{@link …}</code> (<a href=\"https://github.com/Microsoft/TypeScript/issues/16498\">issue #16498</a>)</li>\n</ul>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/jsdoc-supported-types.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/jsdoc-supported-types.html","isOldHandbook":true}}}