{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/utility-types.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"a8b9e27c-db0c-5fc6-93d1-b948311e2cf4","excerpt":"{% raw %}# Introduction TypeScript provides several utility types to facilitate common type transformations. These utilities are available globally. Table ofâ€¦","html":"<p>{% raw %}# Introduction</p>\n<p>TypeScript provides several utility types to facilitate common type transformations. These utilities are available globally.</p>\n<h2>Table of contents</h2>\n<ul>\n<li><a href=\"#partialt\"><code class=\"language-text\">Partial&lt;T&gt;</code></a></li>\n<li><a href=\"#readonlyt\"><code class=\"language-text\">Readonly&lt;T&gt;</code></a></li>\n<li><a href=\"#recordkt\"><code class=\"language-text\">Record&lt;K,T&gt;</code></a></li>\n<li><a href=\"#picktk\"><code class=\"language-text\">Pick&lt;T,K&gt;</code></a></li>\n<li><a href=\"#omittk\"><code class=\"language-text\">Omit&lt;T,K&gt;</code></a></li>\n<li><a href=\"#excludetu\"><code class=\"language-text\">Exclude&lt;T,U&gt;</code></a></li>\n<li><a href=\"#extracttu\"><code class=\"language-text\">Extract&lt;T,U&gt;</code></a></li>\n<li><a href=\"#nonnullablet\"><code class=\"language-text\">NonNullable&lt;T&gt;</code></a></li>\n<li><a href=\"#returntypet\"><code class=\"language-text\">ReturnType&lt;T&gt;</code></a></li>\n<li><a href=\"#instancetypet\"><code class=\"language-text\">InstanceType&lt;T&gt;</code></a></li>\n<li><a href=\"#requiredt\"><code class=\"language-text\">Required&lt;T&gt;</code></a></li>\n<li><a href=\"#thistypet\"><code class=\"language-text\">ThisType&lt;T&gt;</code></a></li>\n</ul>\n<h1><code class=\"language-text\">Partial&lt;T&gt;</code></h1>\n<p>Constructs a type with all properties of <code class=\"language-text\">T</code> set to optional. This utility will return a type that represents all subsets of a given type.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Todo</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    description<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">updateTodo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo<span class=\"token punctuation\">:</span> Todo<span class=\"token punctuation\">,</span> fieldsToUpdate<span class=\"token punctuation\">:</span> Partial<span class=\"token operator\">&lt;</span>Todo<span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>todo<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>fieldsToUpdate <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> todo1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token string\">'organize desk'</span><span class=\"token punctuation\">,</span>\n    description<span class=\"token punctuation\">:</span> <span class=\"token string\">'clear clutter'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> todo2 <span class=\"token operator\">=</span> <span class=\"token function\">updateTodo</span><span class=\"token punctuation\">(</span>todo1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    description<span class=\"token punctuation\">:</span> <span class=\"token string\">'throw out trash'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1><code class=\"language-text\">Readonly&lt;T&gt;</code></h1>\n<p>Constructs a type with all properties of <code class=\"language-text\">T</code> set to <code class=\"language-text\">readonly</code>, meaning the properties of the constructed type cannot be reassigned.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Todo</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> todo<span class=\"token punctuation\">:</span> Readonly<span class=\"token operator\">&lt;</span>Todo<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token string\">'Delete inactive users'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ntodo<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error: cannot reassign a readonly property</span></code></pre></div>\n<p>This utility is useful for representing assignment expressions that will fail at runtime (i.e. when attempting to reassign properties of a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\">frozen object</a>).</p>\n<h5><code class=\"language-text\">Object.freeze</code></h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> freeze<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Readonly<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1><code class=\"language-text\">Record&lt;K,T&gt;</code></h1>\n<p>Constructs a type with a set of properties <code class=\"language-text\">K</code> of type <code class=\"language-text\">T</code>. This utility can be used to map the properties of a type to another type.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">PageInfo</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Page <span class=\"token operator\">=</span> <span class=\"token string\">'home'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'about'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'contact'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> x<span class=\"token punctuation\">:</span> Record<span class=\"token operator\">&lt;</span>Page<span class=\"token punctuation\">,</span> PageInfo<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    about<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">:</span> <span class=\"token string\">'about'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    contact<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">:</span> <span class=\"token string\">'contact'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    home<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">:</span> <span class=\"token string\">'home'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1><code class=\"language-text\">Pick&lt;T,K&gt;</code></h1>\n<p>Constructs a type by picking the set of properties <code class=\"language-text\">K</code> from <code class=\"language-text\">T</code>.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Todo</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    description<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    completed<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> TodoPreview <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>Todo<span class=\"token punctuation\">,</span> <span class=\"token string\">'title'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'completed'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> todo<span class=\"token punctuation\">:</span> TodoPreview <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token string\">'Clean room'</span><span class=\"token punctuation\">,</span>\n    completed<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1><code class=\"language-text\">Omit&lt;T,K&gt;</code></h1>\n<p>Constructs a type by picking all properties from <code class=\"language-text\">T</code> and then removing <code class=\"language-text\">K</code>.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Todo</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    description<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    completed<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> TodoPreview <span class=\"token operator\">=</span> Omit<span class=\"token operator\">&lt;</span>Todo<span class=\"token punctuation\">,</span> <span class=\"token string\">'description'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> todo<span class=\"token punctuation\">:</span> TodoPreview <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token string\">'Clean room'</span><span class=\"token punctuation\">,</span>\n    completed<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1><code class=\"language-text\">Exclude&lt;T,U&gt;</code></h1>\n<p>Constructs a type by excluding from <code class=\"language-text\">T</code> all properties that are assignable to <code class=\"language-text\">U</code>.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token constant\">T0</span> <span class=\"token operator\">=</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"b\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"b\" | \"c\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T1</span> <span class=\"token operator\">=</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"b\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"b\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"c\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T2</span> <span class=\"token operator\">=</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Function</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string | number</span></code></pre></div>\n<h1><code class=\"language-text\">Extract&lt;T,U&gt;</code></h1>\n<p>Constructs a type by extracting from <code class=\"language-text\">T</code> all properties that are assignable to <code class=\"language-text\">U</code>.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token constant\">T0</span> <span class=\"token operator\">=</span> Extract<span class=\"token operator\">&lt;</span><span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"b\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"f\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"a\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T1</span> <span class=\"token operator\">=</span> Extract<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Function</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// () => void</span></code></pre></div>\n<h1><code class=\"language-text\">NonNullable&lt;T&gt;</code></h1>\n<p>Constructs a type by excluding <code class=\"language-text\">null</code> and <code class=\"language-text\">undefined</code> from <code class=\"language-text\">T</code>.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token constant\">T0</span> <span class=\"token operator\">=</span> NonNullable<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> undefined<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string | number</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T1</span> <span class=\"token operator\">=</span> NonNullable<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> undefined<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string[]</span></code></pre></div>\n<h1><code class=\"language-text\">ReturnType&lt;T&gt;</code></h1>\n<p>Constructs a type consisting of the return type of function <code class=\"language-text\">T</code>.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token constant\">T0</span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T1</span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// void</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T2</span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// {}</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T3</span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">U</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// number[]</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T4</span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> f1<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// { a: number, b: string }</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T5</span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// any</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T6</span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token builtin\">never</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// any</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T7</span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T8</span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token builtin\">Function</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span></code></pre></div>\n<h1><code class=\"language-text\">InstanceType&lt;T&gt;</code></h1>\n<p>Constructs a type consisting of the instance type of a constructor function type <code class=\"language-text\">T</code>.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>\n    x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T0</span> <span class=\"token operator\">=</span> InstanceType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> <span class=\"token constant\">C</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// C</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T1</span> <span class=\"token operator\">=</span> InstanceType<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// any</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T2</span> <span class=\"token operator\">=</span> InstanceType<span class=\"token operator\">&lt;</span><span class=\"token builtin\">never</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// any</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T3</span> <span class=\"token operator\">=</span> InstanceType<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T4</span> <span class=\"token operator\">=</span> InstanceType<span class=\"token operator\">&lt;</span><span class=\"token builtin\">Function</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span></code></pre></div>\n<h1><code class=\"language-text\">Required&lt;T&gt;</code></h1>\n<p>Constructs a type consisting of all properties of <code class=\"language-text\">T</code> set to required.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    b<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj<span class=\"token punctuation\">:</span> Props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\n\n<span class=\"token keyword\">const</span> obj2<span class=\"token punctuation\">:</span> Required<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error: property 'b' missing</span></code></pre></div>\n<h1><code class=\"language-text\">ThisType&lt;T&gt;</code></h1>\n<p>This utility does not return a transformed type. Instead, it serves as a marker for a contextual <code class=\"language-text\">this</code> type. Note that the <code class=\"language-text\">--noImplicitThis</code> flag must be enabled to use this utility.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Compile with --noImplicitThis</span>\n\n<span class=\"token keyword\">type</span> ObjectDescriptor<span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">M</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    data<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">D</span><span class=\"token punctuation\">;</span>\n    methods<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">M</span> <span class=\"token operator\">&amp;</span> ThisType<span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span> <span class=\"token operator\">&amp;</span> <span class=\"token constant\">M</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Type of 'this' in methods is D &amp; M</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> makeObject<span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">M</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>desc<span class=\"token punctuation\">:</span> ObjectDescriptor<span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">M</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">D</span> <span class=\"token operator\">&amp;</span> <span class=\"token constant\">M</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> data<span class=\"token punctuation\">:</span> object <span class=\"token operator\">=</span> desc<span class=\"token punctuation\">.</span>data <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> methods<span class=\"token punctuation\">:</span> object <span class=\"token operator\">=</span> desc<span class=\"token punctuation\">.</span>methods <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>data<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>methods <span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">D</span> <span class=\"token operator\">&amp;</span> <span class=\"token constant\">M</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">makeObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    methods<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">moveBy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dx<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> dy<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">+=</span> dx<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Strongly typed this</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">+=</span> dy<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Strongly typed this</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">moveBy</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the example above, the <code class=\"language-text\">methods</code> object in the argument to <code class=\"language-text\">makeObject</code> has a contextual type that includes <code class=\"language-text\">ThisType&lt;D &amp; M&gt;</code> and therefore the type of <code class=\"language-text\">this</code> in methods within the <code class=\"language-text\">methods</code> object is <code class=\"language-text\">{ x: number, y: number } &amp; { moveBy(dx: number, dy: number): number }</code>. Notice how the type of the <code class=\"language-text\">methods</code> property simultaneously is an inference target and a source for the <code class=\"language-text\">this</code> type in methods.</p>\n<p>The <code class=\"language-text\">ThisType&lt;T&gt;</code> marker interface is simply an empty interface declared in <code class=\"language-text\">lib.d.ts</code>. Beyond being recognized in the contextual type of an object literal, the interface acts like any empty interface.</p>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/utility-types.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/utility-types.html","isOldHandbook":true}}}