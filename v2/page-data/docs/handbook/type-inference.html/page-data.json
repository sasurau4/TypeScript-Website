{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/type-inference.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"aecf8df2-40d8-5667-a128-813dfc735f82","excerpt":"{% raw %}# Introduction In this section, we will cover type inference in TypeScript. Namely, we’ll discuss where and how types are inferred. Basics In…","html":"<p>{% raw %}# Introduction</p>\n<p>In this section, we will cover type inference in TypeScript. Namely, we’ll discuss where and how types are inferred.</p>\n<h1>Basics</h1>\n<p>In TypeScript, there are several places where type inference is used to provide type information when there is no explicit type annotation. For example, in this code</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The type of the <code class=\"language-text\">x</code> variable is inferred to be <code class=\"language-text\">number</code>.\nThis kind of inference takes place when initializing variables and members, setting parameter default values, and determining function return types.</p>\n<p>In most cases, type inference is straightforward.\nIn the following sections, we’ll explore some of the nuances in how types are inferred.</p>\n<h1>Best common type</h1>\n<p>When a type inference is made from several expressions, the types of those expressions are used to calculate a “best common type”. For example,</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>To infer the type of <code class=\"language-text\">x</code> in the example above, we must consider the type of each array element.\nHere we are given two choices for the type of the array: <code class=\"language-text\">number</code> and <code class=\"language-text\">null</code>.\nThe best common type algorithm considers each candidate type, and picks the type that is compatible with all the other candidates.</p>\n<p>Because the best common type has to be chosen from the provided candidate types, there are some cases where types share a common structure, but no one type is the super type of all candidate types. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> zoo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Rhino</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Elephant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Snake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ideally, we may want <code class=\"language-text\">zoo</code> to be inferred as an <code class=\"language-text\">Animal[]</code>, but because there is no object that is strictly of type <code class=\"language-text\">Animal</code> in the array, we make no inference about the array element type.\nTo correct this, instead explicitly provide the type when no one type is a super type of all other candidates:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> zoo<span class=\"token punctuation\">:</span> Animal<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Rhino</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Elephant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Snake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>When no best common type is found, the resulting inference is the union array type, <code class=\"language-text\">(Rhino | Elephant | Snake)[]</code>.</p>\n<h1>Contextual Typing</h1>\n<p>Type inference also works in “the other direction” in some cases in TypeScript.\nThis is known as “contextual typing”. Contextual typing occurs when the type of an expression is implied by its location. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmousedown</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mouseEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mouseEvent<span class=\"token punctuation\">.</span>button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//&lt;- OK</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mouseEvent<span class=\"token punctuation\">.</span>kangaroo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//&lt;- Error!</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here, the Typescript type checker used the type of the <code class=\"language-text\">Window.onmousedown</code> function to infer the type of the function expression on the right hand side of the assignment.\nWhen it did so, it was able to infer the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\">type</a> of the <code class=\"language-text\">mouseEvent</code> parameter, which does contain a <code class=\"language-text\">button</code> property, but not a <code class=\"language-text\">kangaroo</code> property.</p>\n<p>Typescript is smart enough to infer the type of things in other contexts as well:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onscroll</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">uiEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>uiEvent<span class=\"token punctuation\">.</span>button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//&lt;- Error!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Based on the fact that the above function is being assigned to <code class=\"language-text\">Window.onscroll</code>, Typescript knows that <code class=\"language-text\">uiEvent</code> is a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/UIEvent\">UIEvent</a>, and not a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\">MouseEvent</a> like the previous example. <code class=\"language-text\">UIEvent</code> objects contain no <code class=\"language-text\">button</code> property, and so Typescript will throw an error.</p>\n<p>If this function were not in a contextually typed position, the function’s argument would implicitly have type <code class=\"language-text\">any</code>, and no error would be issued (unless you are using the <code class=\"language-text\">--noImplicitAny</code> option):</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handler</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">uiEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>uiEvent<span class=\"token punctuation\">.</span>button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//&lt;- OK</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We can also explicitly give type information to the function’s argument to override any contextual type:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onscroll</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">uiEvent<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>uiEvent<span class=\"token punctuation\">.</span>button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//&lt;- Now, no error is given</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>However, this code will log <code class=\"language-text\">undefined</code>, since <code class=\"language-text\">uiEvent</code> has no property called <code class=\"language-text\">button</code>.</p>\n<p>Contextual typing applies in many cases.\nCommon cases include arguments to function calls, right hand sides of assignments, type assertions, members of object and array literals, and return statements.\nThe contextual type also acts as a candidate type in best common type. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">createZoo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Animal<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Rhino</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Elephant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Snake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this example, best common type has a set of four candidates: <code class=\"language-text\">Animal</code>, <code class=\"language-text\">Rhino</code>, <code class=\"language-text\">Elephant</code>, and <code class=\"language-text\">Snake</code>.\nOf these, <code class=\"language-text\">Animal</code> can be chosen by the best common type algorithm.</p>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/type-inference.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/type-inference.html","isOldHandbook":true}}}