{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/namespaces.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"4b8e35a6-560b-5aa0-a160-d052ec2d07b3","excerpt":"{% raw %}# Table of contents Introduction First steps Validators in a single file Namespacing Namespaced Validators Splitting Across Files Multi-file namespaces…","html":"<p>{% raw %}# Table of contents</p>\n<p><a href=\"#introduction\">Introduction</a></p>\n<p><a href=\"#first-steps\">First steps</a></p>\n<ul>\n<li><a href=\"#validators-in-a-single-file\">Validators in a single file</a></li>\n</ul>\n<p><a href=\"#namespacing\">Namespacing</a></p>\n<ul>\n<li><a href=\"#namespaced-validators\">Namespaced Validators</a></li>\n</ul>\n<p><a href=\"#splitting-across-files\">Splitting Across Files</a></p>\n<ul>\n<li><a href=\"#multi-file-namespaces\">Multi-file namespaces</a></li>\n</ul>\n<p><a href=\"#aliases\">Aliases</a></p>\n<p><a href=\"#working-with-other-javascript-libraries\">Working with Other JavaScript Libraries</a></p>\n<ul>\n<li><a href=\"#ambient-namespaces\">Ambient Namespaces</a></li>\n</ul>\n<blockquote>\n<p><strong>A note about terminology:</strong>\nIt’s important to note that in TypeScript 1.5, the nomenclature has changed.\n“Internal modules” are now “namespaces”.\n“External modules” are now simply “modules”, as to align with <a href=\"http://www.ecma-international.org/ecma-262/6.0/\">ECMAScript 2015</a>’s terminology, (namely that <code class=\"language-text\">module X {</code> is equivalent to the now-preferred <code class=\"language-text\">namespace X {</code>).</p>\n</blockquote>\n<h1>Introduction</h1>\n<p><b><a href=\"#table-of-contents\">↥ back to top</a></b></p>\n<p>This post outlines the various ways to organize your code using namespaces (previously “internal modules”) in TypeScript.\nAs we alluded in our note about terminology, “internal modules” are now referred to as “namespaces”.\nAdditionally, anywhere the <code class=\"language-text\">module</code> keyword was used when declaring an internal module, the <code class=\"language-text\">namespace</code> keyword can and should be used instead.\nThis avoids confusing new users by overloading them with similarly named terms.</p>\n<h1>First steps</h1>\n<p><b><a href=\"#table-of-contents\">↥ back to top</a></b></p>\n<p>Let’s start with the program we’ll be using as our example throughout this page.\nWe’ve written a small set of simplistic string validators, as you might write to check a user’s input on a form in a webpage or check the format of an externally-provided data file.</p>\n<h2>Validators in a single file</h2>\n<p><b><a href=\"#table-of-contents\">↥ back to top</a></b></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">StringValidator</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> lettersRegexp <span class=\"token operator\">=</span> <span class=\"token regex\">/^[A-Za-z]+$/</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> numberRegexp <span class=\"token operator\">=</span> <span class=\"token regex\">/^[0-9]+$/</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LettersOnlyValidator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">StringValidator</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> lettersRegexp<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ZipCodeValidator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">StringValidator</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">5</span> <span class=\"token operator\">&amp;&amp;</span> numberRegexp<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Some samples to try</span>\n<span class=\"token keyword\">let</span> strings <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"98052\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"101\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Validators to use</span>\n<span class=\"token keyword\">let</span> validators<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> StringValidator<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nvalidators<span class=\"token punctuation\">[</span><span class=\"token string\">\"ZIP code\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ZipCodeValidator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvalidators<span class=\"token punctuation\">[</span><span class=\"token string\">\"Letters only\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LettersOnlyValidator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Show whether each string passed each validator</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> s <span class=\"token keyword\">of</span> strings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> name <span class=\"token keyword\">in</span> validators<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> isMatch <span class=\"token operator\">=</span> validators<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">'</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> s <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">' </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> isMatch <span class=\"token operator\">?</span> <span class=\"token string\">\"matches\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"does not match\"</span> <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> name <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">'.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>Namespacing</h1>\n<p><b><a href=\"#table-of-contents\">↥ back to top</a></b></p>\n<p>As we add more validators, we’re going to want to have some kind of organization scheme so that we can keep track of our types and not worry about name collisions with other objects.\nInstead of putting lots of different names into the global namespace, let’s wrap up our objects into a namespace.</p>\n<p>In this example, we’ll move all validator-related entities into a namespace called <code class=\"language-text\">Validation</code>.\nBecause we want the interfaces and classes here to be visible outside the namespace, we preface them with <code class=\"language-text\">export</code>.\nConversely, the variables <code class=\"language-text\">lettersRegexp</code> and <code class=\"language-text\">numberRegexp</code> are implementation details, so they are left unexported and will not be visible to code outside the namespace.\nIn the test code at the bottom of the file, we now need to qualify the names of the types when used outside the namespace, e.g. <code class=\"language-text\">Validation.LettersOnlyValidator</code>.</p>\n<h2>Namespaced Validators</h2>\n<p><b><a href=\"#table-of-contents\">↥ back to top</a></b></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">namespace</span> Validation <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">StringValidator</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> lettersRegexp <span class=\"token operator\">=</span> <span class=\"token regex\">/^[A-Za-z]+$/</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> numberRegexp <span class=\"token operator\">=</span> <span class=\"token regex\">/^[0-9]+$/</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LettersOnlyValidator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">StringValidator</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> lettersRegexp<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ZipCodeValidator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">StringValidator</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">5</span> <span class=\"token operator\">&amp;&amp;</span> numberRegexp<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Some samples to try</span>\n<span class=\"token keyword\">let</span> strings <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"98052\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"101\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Validators to use</span>\n<span class=\"token keyword\">let</span> validators<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> Validation<span class=\"token punctuation\">.</span>StringValidator<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nvalidators<span class=\"token punctuation\">[</span><span class=\"token string\">\"ZIP code\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Validation<span class=\"token punctuation\">.</span>ZipCodeValidator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvalidators<span class=\"token punctuation\">[</span><span class=\"token string\">\"Letters only\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Validation<span class=\"token punctuation\">.</span>LettersOnlyValidator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Show whether each string passed each validator</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> s <span class=\"token keyword\">of</span> strings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> name <span class=\"token keyword\">in</span> validators<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> s <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" - </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> validators<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"matches\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"does not match\"</span> <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> name <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>Splitting Across Files</h1>\n<p><b><a href=\"#table-of-contents\">↥ back to top</a></b></p>\n<p>As our application grows, we’ll want to split the code across multiple files to make it easier to maintain.</p>\n<h2>Multi-file namespaces</h2>\n<p><b><a href=\"#table-of-contents\">↥ back to top</a></b></p>\n<p>Here, we’ll split our <code class=\"language-text\">Validation</code> namespace across many files.\nEven though the files are separate, they can each contribute to the same namespace and can be consumed as if they were all defined in one place.\nBecause there are dependencies between files, we’ll add reference tags to tell the compiler about the relationships between the files.\nOur test code is otherwise unchanged.</p>\n<h5>Validation.ts</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">namespace</span> Validation <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">StringValidator</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>LettersOnlyValidator.ts</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/// &lt;reference path=\"Validation.ts\" /></span>\n<span class=\"token keyword\">namespace</span> Validation <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> lettersRegexp <span class=\"token operator\">=</span> <span class=\"token regex\">/^[A-Za-z]+$/</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LettersOnlyValidator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">StringValidator</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> lettersRegexp<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>ZipCodeValidator.ts</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/// &lt;reference path=\"Validation.ts\" /></span>\n<span class=\"token keyword\">namespace</span> Validation <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> numberRegexp <span class=\"token operator\">=</span> <span class=\"token regex\">/^[0-9]+$/</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ZipCodeValidator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">StringValidator</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">5</span> <span class=\"token operator\">&amp;&amp;</span> numberRegexp<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>Test.ts</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/// &lt;reference path=\"Validation.ts\" /></span>\n<span class=\"token comment\">/// &lt;reference path=\"LettersOnlyValidator.ts\" /></span>\n<span class=\"token comment\">/// &lt;reference path=\"ZipCodeValidator.ts\" /></span>\n\n<span class=\"token comment\">// Some samples to try</span>\n<span class=\"token keyword\">let</span> strings <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"98052\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"101\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Validators to use</span>\n<span class=\"token keyword\">let</span> validators<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> Validation<span class=\"token punctuation\">.</span>StringValidator<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nvalidators<span class=\"token punctuation\">[</span><span class=\"token string\">\"ZIP code\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Validation<span class=\"token punctuation\">.</span>ZipCodeValidator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvalidators<span class=\"token punctuation\">[</span><span class=\"token string\">\"Letters only\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Validation<span class=\"token punctuation\">.</span>LettersOnlyValidator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Show whether each string passed each validator</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> s <span class=\"token keyword\">of</span> strings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> name <span class=\"token keyword\">in</span> validators<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> s <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" - </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> validators<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"matches\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"does not match\"</span> <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> name <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Once there are multiple files involved, we’ll need to make sure all of the compiled code gets loaded.\nThere are two ways of doing this.</p>\n<p>First, we can use concatenated output using the <code class=\"language-text\">--outFile</code> flag to compile all of the input files into a single JavaScript output file:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">tsc --outFile sample.js Test.ts</code></pre></div>\n<p>The compiler will automatically order the output file based on the reference tags present in the files. You can also specify each file individually:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">tsc --outFile sample.js Validation.ts LettersOnlyValidator.ts ZipCodeValidator.ts Test.ts</code></pre></div>\n<p>Alternatively, we can use per-file compilation (the default) to emit one JavaScript file for each input file.\nIf multiple JS files get produced, we’ll need to use <code class=\"language-text\">&lt;script&gt;</code> tags on our webpage to load each emitted file in the appropriate order, for example:</p>\n<h5>MyTestPage.html (excerpt)</h5>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Validation.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>LettersOnlyValidator.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ZipCodeValidator.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Test.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<h1>Aliases</h1>\n<p><b><a href=\"#table-of-contents\">↥ back to top</a></b></p>\n<p>Another way that you can simplify working with namespaces is to use <code class=\"language-text\">import q = x.y.z</code> to create shorter names for commonly-used objects.\nNot to be confused with the <code class=\"language-text\">import x = require(&quot;name&quot;)</code> syntax used to load modules, this syntax simply creates an alias for the specified symbol.\nYou can use these sorts of imports (commonly referred to as aliases) for any kind of identifier, including objects created from module imports.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">namespace</span> Shapes <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">namespace</span> Polygons <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Triangle</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">import</span> polygons <span class=\"token operator\">=</span> Shapes<span class=\"token punctuation\">.</span>Polygons<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> sq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">polygons<span class=\"token punctuation\">.</span>Square</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Same as 'new Shapes.Polygons.Square()'</span></code></pre></div>\n<p>Notice that we don’t use the <code class=\"language-text\">require</code> keyword; instead we assign directly from the qualified name of the symbol we’re importing.\nThis is similar to using <code class=\"language-text\">var</code>, but also works on the type and namespace meanings of the imported symbol.\nImportantly, for values, <code class=\"language-text\">import</code> is a distinct reference from the original symbol, so changes to an aliased <code class=\"language-text\">var</code> will not be reflected in the original variable.</p>\n<h1>Working with Other JavaScript Libraries</h1>\n<p><b><a href=\"#table-of-contents\">↥ back to top</a></b></p>\n<p>To describe the shape of libraries not written in TypeScript, we need to declare the API that the library exposes.\nBecause most JavaScript libraries expose only a few top-level objects, namespaces are a good way to represent them.</p>\n<p>We call declarations that don’t define an implementation “ambient”.\nTypically these are defined in <code class=\"language-text\">.d.ts</code> files.\nIf you’re familiar with C/C++, you can think of these as <code class=\"language-text\">.h</code> files.\nLet’s look at a few examples.</p>\n<h2>Ambient Namespaces</h2>\n<p><b><a href=\"#table-of-contents\">↥ back to top</a></b></p>\n<p>The popular library D3 defines its functionality in a global object called <code class=\"language-text\">d3</code>.\nBecause this library is loaded through a <code class=\"language-text\">&lt;script&gt;</code> tag (instead of a module loader), its declaration uses namespaces to define its shape.\nFor the TypeScript compiler to see this shape, we use an ambient namespace declaration.\nFor example, we could begin writing it as follows:</p>\n<h5>D3.d.ts (simplified excerpt)</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> <span class=\"token constant\">D3</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Selectors</span> <span class=\"token punctuation\">{</span>\n        select<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Selection<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">:</span> EventTarget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Selection<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Event</span> <span class=\"token punctuation\">{</span>\n        x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n        y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Base</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Selectors</span> <span class=\"token punctuation\">{</span>\n        event<span class=\"token punctuation\">:</span> Event<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">var</span> d3<span class=\"token punctuation\">:</span> <span class=\"token constant\">D3</span><span class=\"token punctuation\">.</span>Base<span class=\"token punctuation\">;</span></code></pre></div>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/namespaces.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/namespaces.html","isOldHandbook":true}}}