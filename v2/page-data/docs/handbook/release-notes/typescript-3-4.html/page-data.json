{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/release-notes/typescript-3-4.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"cce0b511-c1e4-5db4-b7f1-7fd7db5df680","excerpt":"{% raw %}## Faster subsequent builds with the  flag TypeScript 3.4 introduces a new flag called  which tells TypeScript to save information about the project…","html":"<p>{% raw %}## Faster subsequent builds with the <code class=\"language-text\">--incremental</code> flag</p>\n<p>TypeScript 3.4 introduces a new flag called <code class=\"language-text\">--incremental</code> which tells TypeScript to save information about the project graph from the last compilation.\nThe next time TypeScript is invoked with <code class=\"language-text\">--incremental</code>, it will use that information to detect the least costly way to type-check and emit changes to your project.</p>\n<div class=\"gatsby-highlight\" data-language=\"json5\"><pre class=\"language-json5\"><code class=\"language-json5\"><span class=\"token comment\">// tsconfig.json</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"incremental\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./lib\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./src\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>By default with these settings, when we run <code class=\"language-text\">tsc</code>, TypeScript will look for a file called <code class=\"language-text\">.tsbuildinfo</code> in the output directory (<code class=\"language-text\">./lib</code>).\nIf <code class=\"language-text\">./lib/.tsbuildinfo</code> doesn’t exist, it’ll be generated.\nBut if it does, <code class=\"language-text\">tsc</code> will try to use that file to incrementally type-check and update our output files.</p>\n<p>These <code class=\"language-text\">.tsbuildinfo</code> files can be safely deleted and don’t have any impact on our code at runtime - they’re purely used to make compilations faster.\nWe can also name them anything that we want, and place them anywhere we want using the <code class=\"language-text\">--tsBuildInfoFile</code> flag.</p>\n<div class=\"gatsby-highlight\" data-language=\"json5\"><pre class=\"language-json5\"><code class=\"language-json5\"><span class=\"token comment\">// front-end.tsconfig.json</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"incremental\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"tsBuildInfoFile\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./buildcache/front-end\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./lib\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./src\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Composite projects</h3>\n<p>Part of the intent with composite projects (<code class=\"language-text\">tsconfig.json</code>s with <code class=\"language-text\">composite</code> set to <code class=\"language-text\">true</code>) is that references between different projects can be built incrementally.\nAs such, composite projects will <strong>always</strong> produce <code class=\"language-text\">.tsbuildinfo</code> files.</p>\n<h3><code class=\"language-text\">outFile</code></h3>\n<p>When <code class=\"language-text\">outFile</code> is used, the build information file’s name will be based on the output file’s name.\nAs an example, if our output JavaScript file is <code class=\"language-text\">./output/foo.js</code>, then under the <code class=\"language-text\">--incremental</code> flag, TypeScript will generate the file <code class=\"language-text\">./output/foo.tsbuildinfo</code>.\nAs above, this can be controlled with the <code class=\"language-text\">--tsBuildInfoFile</code> flag.</p>\n<h2>Higher order type inference from generic functions</h2>\n<p>TypeScript 3.4 can now produce generic function types when inference from other generic functions produces free type variables for inferences.\nThis means many function composition patterns now work better in 3.4.</p>\n<p>To get more specific, let’s build up some motivation and consider the following <code class=\"language-text\">compose</code> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> compose<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">f</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arg<span class=\"token punctuation\">:</span> <span class=\"token constant\">A</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">B</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">g</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arg<span class=\"token punctuation\">:</span> <span class=\"token constant\">B</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">C</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arg<span class=\"token punctuation\">:</span> <span class=\"token constant\">A</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">C</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">compose</code> takes two other functions:</p>\n<ul>\n<li><code class=\"language-text\">f</code> which takes some argument (of type <code class=\"language-text\">A</code>) and returns a value of type <code class=\"language-text\">B</code></li>\n<li><code class=\"language-text\">g</code> which takes an argument of type <code class=\"language-text\">B</code> (the type <code class=\"language-text\">f</code> returned), and returns a value of type <code class=\"language-text\">C</code></li>\n</ul>\n<p><code class=\"language-text\">compose</code> then returns a function which feeds its argument through <code class=\"language-text\">f</code> and then <code class=\"language-text\">g</code>.</p>\n<p>When calling this function, TypeScript will try to figure out the types of <code class=\"language-text\">A</code>, <code class=\"language-text\">B</code>, and <code class=\"language-text\">C</code> through a process called <em>type argument inference</em>.\nThis inference process usually works pretty well:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getDisplayName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p<span class=\"token punctuation\">:</span> Person</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// has type '(p: Person) => number'</span>\n<span class=\"token keyword\">const</span> getDisplayNameLength <span class=\"token operator\">=</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>\n    getDisplayName<span class=\"token punctuation\">,</span>\n    getLength<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// works and returns the type 'number'</span>\n<span class=\"token function\">getDisplayNameLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Person McPersonface\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The inference process is fairly straightforward here because <code class=\"language-text\">getDisplayName</code> and <code class=\"language-text\">getLength</code> use types that can easily be referenced.\nHowever, in TypeScript 3.3 and earlier, generic functions like <code class=\"language-text\">compose</code> didn’t work so well when passed other generic functions.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> makeArray<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> makeBox<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Box<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// has type '(arg: {}) => Box&lt;{}[]>'</span>\n<span class=\"token keyword\">const</span> makeBoxedArray <span class=\"token operator\">=</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>\n    makeArray<span class=\"token punctuation\">,</span>\n    makeBox<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">makeBoxedArray</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//                                ~~~~~~~~~~~</span>\n<span class=\"token comment\">// error: Property 'toUpperCase' does not exist on type '{}'.</span></code></pre></div>\n<p>In older versions, TypeScript would infer the empty object type (<code class=\"language-text\">{}</code>) when inferring from other type variables like <code class=\"language-text\">T</code> and <code class=\"language-text\">U</code>.</p>\n<p>During type argument inference in TypeScript 3.4, for a call to a generic function that returns a function type, TypeScript <em>will</em>, as appropriate, propagate type parameters from generic function arguments onto the resulting function type.</p>\n<p>In other words, instead of producing the type</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Box<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></code></pre></div>\n<p>TypeScript 3.4 produces the type</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Box<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></code></pre></div>\n<p>Notice that <code class=\"language-text\">T</code> has been propagated from <code class=\"language-text\">makeArray</code> into the resulting type’s type parameter list.\nThis means that genericity from <code class=\"language-text\">compose</code>’s arguments has been preserved and our <code class=\"language-text\">makeBoxedArray</code> sample will just work!</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> makeArray<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> makeBox<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Box<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// has type '&lt;T>(arg: T) => Box&lt;T[]>'</span>\n<span class=\"token keyword\">const</span> makeBoxedArray <span class=\"token operator\">=</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>\n    makeArray<span class=\"token punctuation\">,</span>\n    makeBox<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// works with no problem!</span>\n<span class=\"token function\">makeBoxedArray</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>For more details, you can <a href=\"https://github.com/Microsoft/TypeScript/pull/30215\">read more at the original change</a>.</p>\n<h2>Improvements for <code class=\"language-text\">ReadonlyArray</code> and <code class=\"language-text\">readonly</code> tuples</h2>\n<p>TypeScript 3.4 makes it a little bit easier to use read-only array-like types.</p>\n<h3>A new syntax for <code class=\"language-text\">ReadonlyArray</code></h3>\n<p>The <code class=\"language-text\">ReadonlyArray</code> type describes <code class=\"language-text\">Array</code>s that can only be read from.\nAny variable with a reference to a <code class=\"language-text\">ReadonlyArray</code> can’t add, remove, or replace any elements of the array.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">:</span> ReadonlyArray<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// okay</span>\n    arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>While it’s good practice to use <code class=\"language-text\">ReadonlyArray</code> over <code class=\"language-text\">Array</code> when no mutation is intended, it’s often been a pain given that arrays have a nicer syntax.\nSpecifically, <code class=\"language-text\">number[]</code> is a shorthand version of <code class=\"language-text\">Array&lt;number&gt;</code>, just as <code class=\"language-text\">Date[]</code> is a shorthand for <code class=\"language-text\">Array&lt;Date&gt;</code>.</p>\n<p>TypeScript 3.4 introduces a new syntax for <code class=\"language-text\">ReadonlyArray</code> using a new <code class=\"language-text\">readonly</code> modifier for array types.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">:</span> <span class=\"token keyword\">readonly</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// okay</span>\n    arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3><code class=\"language-text\">readonly</code> tuples</h3>\n<p>TypeScript 3.4 also introduces new support for <code class=\"language-text\">readonly</code> tuples.\nWe can prefix any tuple type with the <code class=\"language-text\">readonly</code> keyword to make it a <code class=\"language-text\">readonly</code> tuple, much like we now can with array shorthand syntax.\nAs you might expect, unlike ordinary tuples whose slots could be written to, <code class=\"language-text\">readonly</code> tuples only permit reading from those positions.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pair<span class=\"token punctuation\">:</span> <span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// okay</span>\n    pair<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello!\"</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// error</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The same way that ordinary tuples are types that extend from <code class=\"language-text\">Array</code> - a tuple with elements of type <code>T<sub>1</sub></code>, <code>T<sub>2</sub></code>, … <code>T<sub>n</sub></code> extends from <code>Array&#x3C; T<sub>1</sub> | T<sub>2</sub> | … T<sub>n</sub> ></code> - <code class=\"language-text\">readonly</code> tuples are types that extend from <code class=\"language-text\">ReadonlyArray</code>. So a <code class=\"language-text\">readonly</code> tuple with elements <code>T<sub>1</sub></code>, <code>T<sub>2</sub></code>, … <code>T<sub>n</sub></code> extends from <code>ReadonlyArray&#x3C; T<sub>1</sub> | T<sub>2</sub> | … T<sub>n</sub> ></code>.</p>\n<h3><code class=\"language-text\">readonly</code> mapped type modifiers and <code class=\"language-text\">readonly</code> arrays</h3>\n<p>In earlier versions of TypeScript, we generalized mapped types to operate differently on array-like types.\nThis meant that a mapped type like <code class=\"language-text\">Boxify</code> could work on arrays and tuples alike.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Boxify<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> Box<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// { a: Box&lt;string>, b: Box&lt;number> }</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> Boxify<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Array&lt;Box&lt;number>></span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">B</span> <span class=\"token operator\">=</span> Boxify<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [Box&lt;string>, Box&lt;number>]</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">C</span> <span class=\"token operator\">=</span> Boxify<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Unfortunately, mapped types like the <code class=\"language-text\">Readonly</code> utility type were effectively no-ops on array and tuple types.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// lib.d.ts</span>\n<span class=\"token keyword\">type</span> Readonly<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// How code acted *before* TypeScript 3.4</span>\n\n<span class=\"token comment\">// { readonly a: string, readonly b: number }</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// number[]</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">B</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [string, boolean]</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">C</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In TypeScript 3.4, the <code class=\"language-text\">readonly</code> modifier in a mapped type will automatically convert array-like types to their corresponding <code class=\"language-text\">readonly</code> counterparts.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// How code acts now *with* TypeScript 3.4</span>\n\n<span class=\"token comment\">// { readonly a: string, readonly b: number }</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// readonly number[]</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">B</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// readonly [string, boolean]</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">C</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Similarly, you could write a utility type like <code class=\"language-text\">Writable</code> mapped type that strips away <code class=\"language-text\">readonly</code>-ness, and that would convert <code class=\"language-text\">readonly</code> array containers back to their mutable equivalents.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Writable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">-</span><span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// { a: string, b: number }</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> Writable<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">readonly</span> a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">readonly</span> b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// number[]</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">B</span> <span class=\"token operator\">=</span> Writable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">readonly</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [string, boolean]</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">C</span> <span class=\"token operator\">=</span> Writable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Caveats</h3>\n<p>Despite its appearance, the <code class=\"language-text\">readonly</code> type modifier can only be used for syntax on array types and tuple types.\nIt is not a general-purpose type operator.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> err1<span class=\"token punctuation\">:</span> <span class=\"token keyword\">readonly</span> Set<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error!</span>\n<span class=\"token keyword\">let</span> err2<span class=\"token punctuation\">:</span> <span class=\"token keyword\">readonly</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error!</span>\n\n<span class=\"token keyword\">let</span> okay<span class=\"token punctuation\">:</span> <span class=\"token keyword\">readonly</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// works fine</span></code></pre></div>\n<p>You can <a href=\"https://github.com/Microsoft/TypeScript/pull/29435\">see more details in the pull request</a>.</p>\n<h2><code class=\"language-text\">const</code> assertions</h2>\n<p>TypeScript 3.4 introduces a new construct for literal values called <em><code class=\"language-text\">const</code></em> assertions.\nIts syntax is a type assertion with <code class=\"language-text\">const</code> in place of the type name (e.g. <code class=\"language-text\">123 as const</code>).\nWhen we construct new literal expressions with <code class=\"language-text\">const</code> assertions, we can signal to the language that</p>\n<ul>\n<li>no literal types in that expression should be widened (e.g. no going from <code class=\"language-text\">&quot;hello&quot;</code> to <code class=\"language-text\">string</code>)</li>\n<li>object literals get <code class=\"language-text\">readonly</code> properties</li>\n<li>array literals become <code class=\"language-text\">readonly</code> tuples</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Type '\"hello\"'</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Type 'readonly [10, 20]'</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Type '{ readonly text: \"hello\" }'</span>\n<span class=\"token keyword\">let</span> z <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token string\">\"hello\"</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Outside of <code class=\"language-text\">.tsx</code> files, the angle bracket assertion syntax can also be used.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Type '\"hello\"'</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span><span class=\"token operator\">></span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Type 'readonly [10, 20]'</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Type '{ readonly text: \"hello\" }'</span>\n<span class=\"token keyword\">let</span> z <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token string\">\"hello\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This feature means that types that would otherwise be used just to hint immutability to the compiler can often be omitted.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Works with no types referenced or declared.</span>\n<span class=\"token comment\">// We only needed a single const assertion.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getShapes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span> kind<span class=\"token punctuation\">:</span> <span class=\"token string\">\"circle\"</span><span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span> kind<span class=\"token punctuation\">:</span> <span class=\"token string\">\"square\"</span><span class=\"token punctuation\">,</span> sideLength<span class=\"token punctuation\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> shape <span class=\"token keyword\">of</span> <span class=\"token function\">getShapes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Narrows perfectly!</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">.</span>kind <span class=\"token operator\">===</span> <span class=\"token string\">\"circle\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Circle radius\"</span><span class=\"token punctuation\">,</span> shape<span class=\"token punctuation\">.</span>radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Square side length\"</span><span class=\"token punctuation\">,</span> shape<span class=\"token punctuation\">.</span>sideLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice the above needed no type annotations.\nThe <code class=\"language-text\">const</code> assertion allowed TypeScript to take the most specific type of the expression.</p>\n<p>This can even be used to enable <code class=\"language-text\">enum</code>-like patterns in plain JavaScript code if you choose not to use TypeScript’s <code class=\"language-text\">enum</code> construct.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> Colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    red<span class=\"token punctuation\">:</span> <span class=\"token string\">\"RED\"</span><span class=\"token punctuation\">,</span>\n    blue<span class=\"token punctuation\">:</span> <span class=\"token string\">\"BLUE\"</span><span class=\"token punctuation\">,</span>\n    green<span class=\"token punctuation\">:</span> <span class=\"token string\">\"GREEN\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// or use an 'export default'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n    red<span class=\"token punctuation\">:</span> <span class=\"token string\">\"RED\"</span><span class=\"token punctuation\">,</span>\n    blue<span class=\"token punctuation\">:</span> <span class=\"token string\">\"BLUE\"</span><span class=\"token punctuation\">,</span>\n    green<span class=\"token punctuation\">:</span> <span class=\"token string\">\"GREEN\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Caveats</h3>\n<p>One thing to note is that <code class=\"language-text\">const</code> assertions can only be applied immediately on simple literal expressions.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Error! A 'const' assertion can only be applied to a</span>\n<span class=\"token comment\">// to a string, number, boolean, array, or object literal.</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Works!</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">?</span>\n    <span class=\"token number\">0</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">:</span>\n    <span class=\"token number\">1</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Another thing to keep in mind is that <code class=\"language-text\">const</code> contexts don’t immediately convert an expression to be fully immutable.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span>\n    contents<span class=\"token punctuation\">:</span> arr<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\nfoo<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// error!</span>\nfoo<span class=\"token punctuation\">.</span>contents <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// error!</span>\n\nfoo<span class=\"token punctuation\">.</span>contents<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ...works!</span></code></pre></div>\n<p>For more details, you can <a href=\"https://github.com/Microsoft/TypeScript/pull/29510\">check out the respective pull request</a>.</p>\n<h2>Type-checking for <code class=\"language-text\">globalThis</code></h2>\n<p>TypeScript 3.4 introduces support for type-checking ECMAScript’s new <code class=\"language-text\">globalThis</code> - a global variable that, well, refers to the global scope.\nUnlike the above solutions, <code class=\"language-text\">globalThis</code> provides a standard way for accessing the global scope which can be used across different environments.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// in a global file:</span>\n\n<span class=\"token keyword\">var</span> abc <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Refers to 'abc' from above.</span>\nglobalThis<span class=\"token punctuation\">.</span>abc <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note that global variables declared with <code class=\"language-text\">let</code> and <code class=\"language-text\">const</code> don’t show up on <code class=\"language-text\">globalThis</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// error! Property 'answer' does not exist on 'typeof globalThis'.</span>\nglobalThis<span class=\"token punctuation\">.</span>answer <span class=\"token operator\">=</span> <span class=\"token number\">333333</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>It’s also important to note that TypeScript doesn’t transform references to <code class=\"language-text\">globalThis</code> when compiling to older versions of ECMAScript.\nAs such, unless you’re targeting evergreen browsers (which already support <code class=\"language-text\">globalThis</code>), you may want to <a href=\"https://github.com/ljharb/globalThis\">use an appropriate polyfill</a> instead.</p>\n<p>For more details on the implementation, see <a href=\"https://github.com/Microsoft/TypeScript/pull/29332\">the feature’s pull request</a>.</p>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-3-4.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/release-notes/typescript-3-4.html","isOldHandbook":true}}}