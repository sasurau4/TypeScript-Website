{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/release-notes/typescript-3-0.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"e73ab4a4-f13b-5f4f-b581-be4e1103156b","excerpt":"{% raw %}## Project References TypeScript 3.0 introduces a new concept of project references. Project references allow TypeScript projects to depend on otherâ€¦","html":"<p>{% raw %}## Project References</p>\n<p>TypeScript 3.0 introduces a new concept of project references. Project references allow TypeScript projects to depend on other TypeScript projects - specifically, allowing <code class=\"language-text\">tsconfig.json</code> files to reference other <code class=\"language-text\">tsconfig.json</code> files. Specifying these dependencies makes it easier to split your code into smaller projects, since it gives TypeScript (and tools around it) a way to understand build ordering and output structure.</p>\n<p>TypeScript 3.0 also introduces a new mode for tsc, the <code class=\"language-text\">--build</code> flag, that works hand-in-hand with project references to enable faster TypeScript builds.</p>\n<p>See <a href=\"../Project%20References.md\">Project References handbook page</a> for more documentation.</p>\n<h2>Tuples in rest parameters and spread expressions</h2>\n<p>TypeScript 3.0 adds support to multiple new capabilities to interact with function parameter lists as tuple types.\nTypeScript 3.0 adds support for:</p>\n<ul>\n<li><a href=\"#rest-parameters-with-tuple-types\">Expansion of rest parameters with tuple types into discrete parameters.</a></li>\n<li><a href=\"#spread-expressions-with-tuple-types\">Expansion of spread expressions with tuple types into discrete arguments.</a></li>\n<li><a href=\"#generic-rest-parameters\">Generic rest parameters and corresponding inference of tuple types.</a></li>\n<li><a href=\"#optional-elements-in-tuple-types\">Optional elements in tuple types.</a></li>\n<li><a href=\"#rest-elements-in-tuple-types\">Rest elements in tuple types.</a></li>\n</ul>\n<p>With these features it becomes possible to strongly type a number of higher-order functions that transform functions and their parameter lists.</p>\n<h2>Rest parameters with tuple types</h2>\n<p>When a rest parameter has a tuple type, the tuple type is expanded into a sequence of discrete parameters.\nFor example the following two declarations are equivalent:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">args_0<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> args_1<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> args_2<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Spread expressions with tuple types</h2>\n<p>When a function call includes a spread expression of a tuple type as the last argument, the spread expression corresponds to a sequence of discrete arguments of the tuple element types.</p>\n<p>Thus, the following calls are equivalent:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> args<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Generic rest parameters</h2>\n<p>A rest parameter is permitted to have a generic type that is constrained to an array type, and type inference can infer tuple types for such generic rest parameters. This enables higher-order capturing and spreading of partial parameter lists:</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> bind<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">f</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> <span class=\"token constant\">U</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">V</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> <span class=\"token constant\">U</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">V</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">f3</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> f2 <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>f3<span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// (y: string, z: boolean) => void</span>\n<span class=\"token keyword\">const</span> f1 <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>f2<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// (z: boolean) => void</span>\n<span class=\"token keyword\">const</span> f0 <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// () => void</span>\n\n<span class=\"token function\">f3</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">f0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the declaration of <code class=\"language-text\">f2</code> above, type inference infers types <code class=\"language-text\">number</code>, <code class=\"language-text\">[string, boolean]</code> and <code class=\"language-text\">void</code> for <code class=\"language-text\">T</code>, <code class=\"language-text\">U</code> and <code class=\"language-text\">V</code> respectively.</p>\n<p>Note that when a tuple type is inferred from a sequence of parameters and later expanded into a parameter list, as is the case for <code class=\"language-text\">U</code>, the original parameter names are used in the expansion (however, the names have no semantic meaning and are not otherwise observable).</p>\n<h2>Optional elements in tuple types</h2>\n<p>Tuple types now permit a <code class=\"language-text\">?</code> postfix on element types to indicate that the element is optional:</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> t<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">boolean</span><span class=\"token operator\">?</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nt <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nt <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nt <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">42</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In <code class=\"language-text\">--strictNullChecks</code> mode, a <code class=\"language-text\">?</code> modifier automatically includes <code class=\"language-text\">undefined</code> in the element type, similar to optional parameters.</p>\n<p>A tuple type permits an element to be omitted if it has a postfix <code class=\"language-text\">?</code> modifier on its type and all elements to the right of it also have <code class=\"language-text\">?</code> modifiers.</p>\n<p>When tuple types are inferred for rest parameters, optional parameters in the source become optional tuple elements in the inferred type.</p>\n<p>The <code class=\"language-text\">length</code> property of a tuple type with optional elements is a union of numeric literal types representing the possible lengths.\nFor example, the type of the <code class=\"language-text\">length</code> property in the tuple type <code class=\"language-text\">[number, string?, boolean?]</code> is <code class=\"language-text\">1 | 2 | 3</code>.</p>\n<h3>Rest elements in tuple types</h3>\n<p>The last element of a tuple type can be a rest element of the form <code class=\"language-text\">...X</code>, where <code class=\"language-text\">X</code> is an array type.\nA rest element indicates that the tuple type is open-ended and may have zero or more additional elements of the array element type.\nFor example, <code class=\"language-text\">[number, ...string[]]</code> means tuples with a <code class=\"language-text\">number</code> element followed by any number of <code class=\"language-text\">string</code> elements.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> tuple<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> args<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> numbers<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">getArrayOfNumbers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> t1 <span class=\"token operator\">=</span> <span class=\"token function\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// [string, number, boolean]</span>\n<span class=\"token keyword\">const</span> t2 <span class=\"token operator\">=</span> <span class=\"token function\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// [string, ...number[]]</span></code></pre></div>\n<p>The type of the <code class=\"language-text\">length</code> property of a tuple type with a rest element is <code class=\"language-text\">number</code>.</p>\n<h2>New <code class=\"language-text\">unknown</code> top type</h2>\n<p>TypeScript 3.0 introduces a new top type <code class=\"language-text\">unknown</code>.\n<code class=\"language-text\">unknown</code> is the type-safe counterpart of <code class=\"language-text\">any</code>.\nAnything is assignable to <code class=\"language-text\">unknown</code>, but <code class=\"language-text\">unknown</code> isnâ€™t assignable to anything but itself and <code class=\"language-text\">any</code> without a type assertion or a control flow based narrowing.\nLikewise, no operations are permitted on an <code class=\"language-text\">unknown</code> without first asserting or narrowing to a more specific type.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// In an intersection everything absorbs unknown</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T00</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">unknown</span> <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// null</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T01</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">unknown</span> <span class=\"token operator\">&amp;</span> undefined<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// undefined</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T02</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">unknown</span> <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;</span> undefined<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// null &amp; undefined (which becomes never)</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T03</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">unknown</span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T04</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">unknown</span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string[]</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T05</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">unknown</span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// unknown</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T06</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">unknown</span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// any</span>\n\n<span class=\"token comment\">// In a union an unknown absorbs everything</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T10</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">unknown</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// unknown</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T11</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">unknown</span> <span class=\"token operator\">|</span> undefined<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// unknown</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T12</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">unknown</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> undefined<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// unknown</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T13</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">unknown</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// unknown</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T14</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">unknown</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// unknown</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T15</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">unknown</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// unknown</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T16</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">unknown</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// any</span>\n\n<span class=\"token comment\">// Type variable and unknown in union and intersection</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T20</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// T &amp; {}</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T21</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// T | {}</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T22</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// T</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T23</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// unknown</span>\n\n<span class=\"token comment\">// unknown in conditional types</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T30</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">unknown</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">T</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Deferred</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T31</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">unknown</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Deferred (so it distributes)</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T32</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">never</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">T</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T33</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">never</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Deferred</span>\n\n<span class=\"token comment\">// keyof unknown</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T40</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string | number | symbol</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T41</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// never</span>\n\n<span class=\"token comment\">// Only equality operators are allowed with unknown</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f10</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">unknown</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    x <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    x <span class=\"token operator\">!==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    x <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\n    x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\n    x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\n    <span class=\"token operator\">-</span>x<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\n    <span class=\"token operator\">+</span>x<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// No property accesses, element accesses, or function calls</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f11</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">unknown</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    x<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\n    x<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\n    <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// typeof, instanceof, and user defined type predicates</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">isFunction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">unknown</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> x <span class=\"token keyword\">is</span> <span class=\"token builtin\">Function</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f20</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">unknown</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> x <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        x<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string | number</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        x<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isFunction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        x<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Function</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Homomorphic mapped type over unknown</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T50</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T51</span> <span class=\"token operator\">=</span> <span class=\"token constant\">T50</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// { [x: string]: number }</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T52</span> <span class=\"token operator\">=</span> <span class=\"token constant\">T50</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">unknown</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// {}</span>\n\n<span class=\"token comment\">// Anything is assignable to unknown</span>\n\n<span class=\"token keyword\">function</span> f21<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>pAny<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> pNever<span class=\"token punctuation\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">,</span> pT<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span>\n    x <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    x <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n    x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    x <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n    x <span class=\"token operator\">=</span> pAny<span class=\"token punctuation\">;</span>\n    x <span class=\"token operator\">=</span> pNever<span class=\"token punctuation\">;</span>\n    x <span class=\"token operator\">=</span> pT<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// unknown assignable only to itself and any</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f22</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">unknown</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> v1<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> v2<span class=\"token punctuation\">:</span> <span class=\"token builtin\">unknown</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> v3<span class=\"token punctuation\">:</span> object <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">let</span> v4<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">let</span> v5<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">let</span> v6<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">let</span> v7<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> undefined <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Type parameter 'T extends unknown' not related to object</span>\n\n<span class=\"token keyword\">function</span> f23<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">unknown</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> y<span class=\"token punctuation\">:</span> object <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Anything but primitive assignable to { [x: string]: unknown }</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f24</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">unknown</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    x <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    x <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    x <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Locals of type unknown always considered initialized</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f25</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Spread of unknown causes result to be unknown</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f26</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> o1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>x <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// { a: number }</span>\n    <span class=\"token keyword\">let</span> o2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>y <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// unknown</span>\n    <span class=\"token keyword\">let</span> o3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>y<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>z <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// any</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Functions with unknown return type don't need return expressions</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f27</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">unknown</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Rest type cannot be created from unknown</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f28</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">unknown</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>a <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Class properties of type unknown don't need definite assignment</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C1</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\n    b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Support for <code class=\"language-text\">defaultProps</code> in JSX</h2>\n<p>TypeScript 2.9 and earlier didnâ€™t leverage <a href=\"https://reactjs.org/docs/typechecking-with-proptypes.html#default-prop-values\">React <code class=\"language-text\">defaultProps</code></a> declarations inside JSX components.\nUsers would often have to declare properties optional and use non-null assertions inside of <code class=\"language-text\">render</code>, or theyâ€™d use type-assertions to fix up the type of the component before exporting it.</p>\n<p>TypeScript 3.0 adds support for a new type alias in the <code class=\"language-text\">JSX</code> namespace called <code class=\"language-text\">LibraryManagedAttributes</code>.\nThis helper type defines a transformation on the componentâ€™s <code class=\"language-text\">Props</code> type, before using to check a JSX expression targeting it; thus allowing customization like: how conflicts between provided props and inferred props are handled, how inferences are mapped, how optionality is handled, and how inferences from differing places should be combined.</p>\n<p>In short using this general type, we can model Reactâ€™s specific behavior for things like <code class=\"language-text\">defaultProps</code> and, to some extent, <code class=\"language-text\">propTypes</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Greet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Props</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">static</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\n// Type-checks! No type assertions needed!\nlet el = </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Greet</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<h2>Caveats</h2>\n<h3>Explicit types on <code class=\"language-text\">defaultProps</code></h3>\n<p>The default-ed properties are inferred from the <code class=\"language-text\">defaultProps</code> property type. If an explicit type annotation is added, e.g. <code class=\"language-text\">static defaultProps: Partial&lt;Props&gt;;</code> the compiler will not be able to identify which properties have defaults (since the type of <code class=\"language-text\">defaultProps</code> include all properties of <code class=\"language-text\">Props</code>).</p>\n<p>Use <code class=\"language-text\">static defaultProps: Pick&lt;Props, &quot;name&quot;&gt;;</code> as an explicit type annotation instead, or do not add a type annotation as done in the example above.</p>\n<p>For function components (formerly known as SFCs) use ES2015 default initializers:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"world\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span> Props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Changes to <code class=\"language-text\">@types/React</code></h4>\n<p>Corresponding changes to add <code class=\"language-text\">LibraryManagedAttributes</code> definition to the <code class=\"language-text\">JSX</code> namespace in <code class=\"language-text\">@types/React</code> are still needed.\nKeep in mind that there are some limitations.</p>\n<h2><code class=\"language-text\">/// &lt;reference lib=&quot;...&quot; /&gt;</code> reference directives</h2>\n<p>TypeScript adds a new triple-slash-reference directive (<code class=\"language-text\">/// &lt;reference lib=&quot;name&quot; /&gt;</code>), allowing a file to explicitly include an existing built-in <em>lib</em> file.</p>\n<p>Built-in <em>lib</em> files are referenced in the same fashion as the <code class=\"language-text\">&quot;lib&quot;</code> compiler option in <em>tsconfig.json</em> (e.g. use <code class=\"language-text\">lib=&quot;es2015&quot;</code> and not <code class=\"language-text\">lib=&quot;lib.es2015.d.ts&quot;</code>, etc.).</p>\n<p>For declaration file authors who relay on built-in types, e.g. DOM APIs or built-in JS run-time constructors like <code class=\"language-text\">Symbol</code> or <code class=\"language-text\">Iterable</code>, triple-slash-reference lib directives are the recommended. Previously these .d.ts files had to add forward/duplicate declarations of such types.</p>\n<h5>Example</h5>\n<p>Using <code class=\"language-text\">/// &lt;reference lib=&quot;es2017.string&quot; /&gt;</code> to one of the files in a compilation is equivalent to compiling with <code class=\"language-text\">--lib es2017.string</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/// &lt;reference lib=\"es2017.string\" /></span>\n\n<span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-3-0.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/release-notes/typescript-3-0.html","isOldHandbook":true}}}