{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/release-notes/typescript-2-2.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"3f76b145-ea74-5d63-add7-ad5d51f9ee08","excerpt":"{% raw %}## Support for Mix-in classes TypeScript 2.2 adds support for the ECMAScript 2015 mixin class pattern (see MDN Mixin description and “Real” Mixins with…","html":"<p>{% raw %}## Support for Mix-in classes</p>\n<p>TypeScript 2.2 adds support for the ECMAScript 2015 mixin class pattern (see <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Mix-ins\">MDN Mixin description</a> and <a href=\"http://justinfagnani.com/2015/12/21/real-mixins-with-javascript-classes/\">“Real” Mixins with JavaScript Classes</a> for more details) as well as rules for combining mixin construct signatures with regular construct signatures in intersection types.</p>\n<h5>First some terminology</h5>\n<p>A <strong>mixin constructor type</strong> refers to a type that has a single construct signature with a single rest argument of type <code class=\"language-text\">any[]</code> and an object-like return type. For example, given an object-like type <code class=\"language-text\">X</code>, <code class=\"language-text\">new (...args: any[]) =&gt; X</code> is a mixin constructor type with an instance type <code class=\"language-text\">X</code>.</p>\n<p>A <strong>mixin class</strong> is a class declaration or expression that <code class=\"language-text\">extends</code> an expression of a type parameter type. The following rules apply to mixin class declarations:</p>\n<ul>\n<li>The type parameter type of the <code class=\"language-text\">extends</code> expression must be constrained to a mixin constructor type.</li>\n<li>The constructor of a mixin class (if any) must have a single rest parameter of type <code class=\"language-text\">any[]</code> and must use the spread operator to pass those parameters as arguments in a <code class=\"language-text\">super(...args)</code> call.</li>\n</ul>\n<p>Given an expression <code class=\"language-text\">Base</code> of a parametric type <code class=\"language-text\">T</code> with a constraint <code class=\"language-text\">X</code>, a mixin class <code class=\"language-text\">class C extends Base {...}</code> is processed as if <code class=\"language-text\">Base</code> had type <code class=\"language-text\">X</code> and the resulting type is the intersection <code class=\"language-text\">typeof C &amp; T</code>.\nIn other words, a mixin class is represented as an intersection between the mixin class constructor type and the parametric base class constructor type.</p>\n<p>When obtaining the construct signatures of an intersection type that contains mixin constructor types, the mixin construct signatures are discarded and their instance types are mixed into the return types of the other construct signatures in the intersection type.\nFor example, the intersection type <code class=\"language-text\">{ new(...args: any[]) =&gt; A } &amp; { new(s: string) =&gt; B }</code> has a single construct signature <code class=\"language-text\">new(s: string) =&gt; A &amp; B</code>.</p>\n<h5>Putting all of the above rules together in an example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">public</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">public</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Constructor<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> Tagged<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Constructor</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>Base<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> Base <span class=\"token punctuation\">{</span>\n        _tag<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_tag <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> TaggedPoint <span class=\"token operator\">=</span> <span class=\"token function\">Tagged</span><span class=\"token punctuation\">(</span>Point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> point <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TaggedPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npoint<span class=\"token punctuation\">.</span>_tag <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Customer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Tagged</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    accountBalance<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> customer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Joe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncustomer<span class=\"token punctuation\">.</span>_tag <span class=\"token operator\">=</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">;</span>\ncustomer<span class=\"token punctuation\">.</span>accountBalance <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Mixin classes can constrain the types of classes they can mix into by specifying a construct signature return type in the constraint for the type parameter.\nFor example, the following <code class=\"language-text\">WithLocation</code> function implements a subclass factory that adds a <code class=\"language-text\">getLocation</code> method to any class that satisfies the <code class=\"language-text\">Point</code> interface (i.e. that has <code class=\"language-text\">x</code> and <code class=\"language-text\">y</code> properties of type <code class=\"language-text\">number</code>).</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n    x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> WithLocation <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Constructor</span><span class=\"token operator\">&lt;</span>Point<span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Base<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> Base <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">getLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<h2><code class=\"language-text\">object</code> type</h2>\n<p>TypeScript did not have a type that represents the non-primitive type, i.e. any thing that is not <code class=\"language-text\">number</code>, <code class=\"language-text\">string</code>, <code class=\"language-text\">boolean</code>, <code class=\"language-text\">symbol</code>, <code class=\"language-text\">null</code>, or <code class=\"language-text\">undefined</code>. Enter the new <code class=\"language-text\">object</code> type.</p>\n<p>With <code class=\"language-text\">object</code> type, APIs like <code class=\"language-text\">Object.create</code> can be better represented. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o<span class=\"token punctuation\">:</span> object <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> prop<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\n\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span>undefined<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></code></pre></div>\n<h2>Support for <code class=\"language-text\">new.target</code></h2>\n<p>The <code class=\"language-text\">new.target</code> meta-property is new syntax introduced in ES2015.\nWhen an instance of a constructor is created via <code class=\"language-text\">new</code>, the value of <code class=\"language-text\">new.target</code> is set to be a reference to the constructor function initially used to allocate the instance.\nIf a function is called rather than constructed via <code class=\"language-text\">new</code>, <code class=\"language-text\">new.target</code> is set to <code class=\"language-text\">undefined</code>.</p>\n<p><code class=\"language-text\">new.target</code> comes in handy when <code class=\"language-text\">Object.setPrototypeOf</code> or <code class=\"language-text\">__proto__</code> needs to be set in a class constructor. One such use case is inheriting from <code class=\"language-text\">Error</code> in NodeJS v4 and higher.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomError</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Error' breaks prototype chain here</span>\n        Object<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// restore prototype chain</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This results in the generated JS</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> CustomError <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_super</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">__extends</span><span class=\"token punctuation\">(</span>CustomError<span class=\"token punctuation\">,</span> _super<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">CustomError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> _newTarget <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> _this <span class=\"token operator\">=</span> <span class=\"token function\">_super</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 'Error' breaks prototype chain here</span>\n    _this<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> <span class=\"token class-name\">_newTarget</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span> <span class=\"token comment\">// restore prototype chain</span>\n    <span class=\"token keyword\">return</span> _this<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> CustomError<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">new.target</code> also comes in handy for writing constructable functions, for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* called via 'new' */</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Which translates to:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> _newTarget <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">f</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>constructor <span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_newTarget<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* called via 'new' */</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Better checking for <code class=\"language-text\">null</code>/<code class=\"language-text\">undefined</code> in operands of expressions</h2>\n<p>TypeScript 2.2 improves checking of nullable operands in expressions. Specifically, these are now flagged as errors:</p>\n<ul>\n<li>If either operand of a <code class=\"language-text\">+</code> operator is nullable, and neither operand is of type <code class=\"language-text\">any</code> or <code class=\"language-text\">string</code>.</li>\n<li>If either operand of a <code class=\"language-text\">-</code>, <code class=\"language-text\">*</code>, <code class=\"language-text\">**</code>, <code class=\"language-text\">/</code>, <code class=\"language-text\">%</code>, <code class=\"language-text\">&lt;&lt;</code>, <code class=\"language-text\">&gt;&gt;</code>, <code class=\"language-text\">&gt;&gt;&gt;</code>, <code class=\"language-text\">&amp;</code>, <code class=\"language-text\">|</code>, or <code class=\"language-text\">^</code> operator is nullable.</li>\n<li>If either operand of a <code class=\"language-text\">&lt;</code>, <code class=\"language-text\">&gt;</code>, <code class=\"language-text\">&lt;=</code>, <code class=\"language-text\">&gt;=</code>, or <code class=\"language-text\">in</code> operator is nullable.</li>\n<li>If the right operand of an <code class=\"language-text\">instanceof</code> operator is nullable.</li>\n<li>If the operand of a <code class=\"language-text\">+</code>, <code class=\"language-text\">-</code>, <code class=\"language-text\">~</code>, <code class=\"language-text\">++</code>, or <code class=\"language-text\">--</code> unary operator is nullable.</li>\n</ul>\n<p>An operand is considered nullable if the type of the operand is <code class=\"language-text\">null</code> or <code class=\"language-text\">undefined</code> or a union type that includes <code class=\"language-text\">null</code> or <code class=\"language-text\">undefined</code>.\nNote that the union type case only only occurs in <code class=\"language-text\">--strictNullChecks</code> mode because <code class=\"language-text\">null</code> and <code class=\"language-text\">undefined</code> disappear from unions in classic type checking mode.</p>\n<h2>Dotted property for types with string index signatures</h2>\n<p>Types with a string index signature can be indexed using the <code class=\"language-text\">[]</code> notation, but were not allowed to use the <code class=\"language-text\">.</code>.\nStarting with TypeScript 2.2 using either should be allowed.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">StringMap</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> map<span class=\"token punctuation\">:</span> StringMap<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\nmap<span class=\"token punctuation\">[</span><span class=\"token string\">\"prop1\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span>prop2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This only apply to types with an <em>explicit</em> string index signature.\nIt is still an error to access unknown properties on a type using <code class=\"language-text\">.</code> notation.</p>\n<h2>Support for spread operator on JSX element children</h2>\n<p>TypeScript 2.2 adds support for using spread on a JSX element children.\nPlease see <a href=\"https://github.com/facebook/jsx/issues/57\">facebook/jsx#57</a> for more details.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">Todo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prop<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> key<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> todo<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>prop<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> prop<span class=\"token punctuation\">.</span>todo<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">TodoList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> todos <span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span> TodoListProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>todos<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>Todo key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> todo<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">.</span>todo<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span> TodoListProps<span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&lt;</span>TodoList <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>x<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<h2>New <code class=\"language-text\">jsx: react-native</code></h2>\n<p>React-native build pipeline expects all files to have a <code class=\"language-text\">.js</code> extensions even if the file contains JSX syntax.\nThe new <code class=\"language-text\">--jsx</code> value <code class=\"language-text\">react-native</code> will persevere the JSX syntax in the output file, but give it a <code class=\"language-text\">.js</code> extension.</p>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-2-2.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/release-notes/typescript-2-2.html","isOldHandbook":true}}}