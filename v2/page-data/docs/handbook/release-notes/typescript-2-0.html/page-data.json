{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/release-notes/typescript-2-0.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"6d1907dd-4900-537f-afac-b7bcfa34a573","excerpt":"{% raw %}## Null- and undefined-aware types TypeScript has two special types, Null and Undefined, that have the values  and  respectively.\nPreviously it was not…","html":"<p>{% raw %}## Null- and undefined-aware types</p>\n<p>TypeScript has two special types, Null and Undefined, that have the values <code class=\"language-text\">null</code> and <code class=\"language-text\">undefined</code> respectively.\nPreviously it was not possible to explicitly name these types, but <code class=\"language-text\">null</code> and <code class=\"language-text\">undefined</code> may now be used as type names regardless of type checking mode.</p>\n<p>The type checker previously considered <code class=\"language-text\">null</code> and <code class=\"language-text\">undefined</code> assignable to anything.\nEffectively, <code class=\"language-text\">null</code> and <code class=\"language-text\">undefined</code> were valid values of <em>every</em> type and it wasn’t possible to specifically exclude them (and therefore not possible to detect erroneous use of them).</p>\n<h2><code class=\"language-text\">--strictNullChecks</code></h2>\n<p><code class=\"language-text\">--strictNullChecks</code> switches to a new strict null checking mode.</p>\n<p>In strict null checking mode, the <code class=\"language-text\">null</code> and <code class=\"language-text\">undefined</code> values are <em>not</em> in the domain of every type and are only assignable to themselves and <code class=\"language-text\">any</code> (the one exception being that <code class=\"language-text\">undefined</code> is also assignable to <code class=\"language-text\">void</code>).\nSo, whereas <code class=\"language-text\">T</code> and <code class=\"language-text\">T | undefined</code> are considered synonymous in regular type checking mode (because <code class=\"language-text\">undefined</code> is considered a subtype of any <code class=\"language-text\">T</code>), they are different types in strict type checking mode, and only <code class=\"language-text\">T | undefined</code> permits <code class=\"language-text\">undefined</code> values. The same is true for the relationship of <code class=\"language-text\">T</code> to <code class=\"language-text\">T | null</code>.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Compiled with --strictNullChecks</span>\n<span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> undefined<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> z<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> undefined<span class=\"token punctuation\">;</span>\nx <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Ok</span>\ny <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Ok</span>\nz <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Ok</span>\nx <span class=\"token operator\">=</span> undefined<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\ny <span class=\"token operator\">=</span> undefined<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Ok</span>\nz <span class=\"token operator\">=</span> undefined<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Ok</span>\nx <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\ny <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\nz <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Ok</span>\nx <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\nx <span class=\"token operator\">=</span> z<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\ny <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Ok</span>\ny <span class=\"token operator\">=</span> z<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\nz <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Ok</span>\nz <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Ok</span></code></pre></div>\n<h2>Assigned-before-use checking</h2>\n<p>In strict null checking mode the compiler requires every reference to a local variable of a type that doesn’t include <code class=\"language-text\">undefined</code> to be preceded by an assignment to that variable in every possible preceding code path.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Compiled with --strictNullChecks</span>\n<span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> z<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> undefined<span class=\"token punctuation\">;</span>\nx<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error, reference not preceded by assignment</span>\ny<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error, reference not preceded by assignment</span>\nz<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Ok</span>\nx <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\ny <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\nx<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Ok</span>\ny<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Ok</span></code></pre></div>\n<p>The compiler checks that variables are definitely assigned by performing <em>control flow based type analysis</em>. See later for further details on this topic.</p>\n<h2>Optional parameters and properties</h2>\n<p>Optional parameters and properties automatically have <code class=\"language-text\">undefined</code> added to their types, even when their type annotations don’t specifically include <code class=\"language-text\">undefined</code>.\nFor example, the following two types are identical:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Compiled with --strictNullChecks</span>\n<span class=\"token keyword\">type</span> <span class=\"token function-variable function\">T1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// x has type number | undefined</span>\n<span class=\"token keyword\">type</span> <span class=\"token function-variable function\">T2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> undefined</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// x has type number | undefined</span></code></pre></div>\n<h2>Non-null and non-undefined type guards</h2>\n<p>A property access or a function call produces a compile-time error if the object or function is of a type that includes <code class=\"language-text\">null</code> or <code class=\"language-text\">undefined</code>.\nHowever, type guards are extended to support non-null and non-undefined checks.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Compiled with --strictNullChecks</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> undefined<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Ok, type of x is number here</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error, type of x is number? here</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> x <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Type of a is string</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> x <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Type of b is string | 0 | null | undefined</span></code></pre></div>\n<p>Non-null and non-undefined type guards may use the <code class=\"language-text\">==</code>, <code class=\"language-text\">!=</code>, <code class=\"language-text\">===</code>, or <code class=\"language-text\">!==</code> operator to compare to <code class=\"language-text\">null</code> or <code class=\"language-text\">undefined</code>, as in <code class=\"language-text\">x != null</code> or <code class=\"language-text\">x === undefined</code>.\nThe effects on subject variable types accurately reflect JavaScript semantics (e.g. double-equals operators check for both values no matter which one is specified whereas triple-equals only checks for the specified value).</p>\n<h2>Dotted names in type guards</h2>\n<p>Type guards previously only supported checking local variables and parameters.\nType guards now support checking “dotted names” consisting of a variable or parameter name followed one or more property accesses.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Options</span> <span class=\"token punctuation\">{</span>\n    location<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        x<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n        y<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> Options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options <span class=\"token operator\">&amp;&amp;</span> options<span class=\"token punctuation\">.</span>location <span class=\"token operator\">&amp;&amp;</span> options<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Type of x is number</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Type guards for dotted names also work with user defined type guard functions and the <code class=\"language-text\">typeof</code> and <code class=\"language-text\">instanceof</code> operators and do not depend on the <code class=\"language-text\">--strictNullChecks</code> compiler option.</p>\n<p>A type guard for a dotted name has no effect following an assignment to any part of the dotted name.\nFor example, a type guard for <code class=\"language-text\">x.y.z</code> will have no effect following an assignment to <code class=\"language-text\">x</code>, <code class=\"language-text\">x.y</code>, or <code class=\"language-text\">x.y.z</code>.</p>\n<h2>Expression operators</h2>\n<p>Expression operators permit operand types to include <code class=\"language-text\">null</code> and/or <code class=\"language-text\">undefined</code> but always produce values of non-null and non-undefined types.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Compiled with --strictNullChecks</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Produces value of type number</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">&amp;&amp;</code> operator adds <code class=\"language-text\">null</code> and/or <code class=\"language-text\">undefined</code> to the type of the right operand depending on which are present in the type of the left operand, and the <code class=\"language-text\">||</code> operator removes both <code class=\"language-text\">null</code> and <code class=\"language-text\">undefined</code> from the type of the left operand in the resulting union type.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Compiled with --strictNullChecks</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Entity</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span> Entity <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> x <span class=\"token operator\">&amp;&amp;</span> x<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// s is of type string | null</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> x <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"test\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// y is of type Entity</span></code></pre></div>\n<h2>Type widening</h2>\n<p>The <code class=\"language-text\">null</code> and <code class=\"language-text\">undefined</code> types are <em>not</em> widened to <code class=\"language-text\">any</code> in strict null checking mode.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> z <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Type of z is null</span></code></pre></div>\n<p>In regular type checking mode the inferred type of <code class=\"language-text\">z</code> is <code class=\"language-text\">any</code> because of widening, but in strict null checking mode the inferred type of <code class=\"language-text\">z</code> is <code class=\"language-text\">null</code> (and therefore, absent a type annotation, <code class=\"language-text\">null</code> is the only possible value for <code class=\"language-text\">z</code>).</p>\n<h2>Non-null assertion operator</h2>\n<p>A new <code class=\"language-text\">!</code> post-fix expression operator may be used to assert that its operand is non-null and non-undefined in contexts where the type checker is unable to conclude that fact.\nSpecifically, the operation <code class=\"language-text\">x!</code> produces a value of the type of <code class=\"language-text\">x</code> with <code class=\"language-text\">null</code> and <code class=\"language-text\">undefined</code> excluded.\nSimilar to type assertions of the forms <code class=\"language-text\">&lt;T&gt;x</code> and <code class=\"language-text\">x as T</code>, the <code class=\"language-text\">!</code> non-null assertion operator is simply removed in the emitted JavaScript code.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Compiled with --strictNullChecks</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">validateEntity</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> Entity</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Throw exception if e is null or invalid entity</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">processEntity</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> Entity</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">validateEntity</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> e<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Assert that e is non-null and access name</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Compatibility</h2>\n<p>The new features are designed such that they can be used in both strict null checking mode and regular type checking mode.\nIn particular, the <code class=\"language-text\">null</code> and <code class=\"language-text\">undefined</code> types are automatically erased from union types in regular type checking mode (because they are subtypes of all other types), and the <code class=\"language-text\">!</code> non-null assertion expression operator is permitted but has no effect in regular type checking mode. Thus, declaration files that are updated to use null- and undefined-aware types can still be used in regular type checking mode for backwards compatibility.</p>\n<p>In practical terms, strict null checking mode requires that all files in a compilation are null- and undefined-aware.</p>\n<h2>Control flow based type analysis</h2>\n<p>TypeScript 2.0 implements a control flow-based type analysis for local variables and parameters.\nPreviously, the type analysis performed for type guards was limited to <code class=\"language-text\">if</code> statements and <code class=\"language-text\">?:</code> conditional expressions and didn’t include effects of assignments and control flow constructs such as <code class=\"language-text\">return</code> and <code class=\"language-text\">break</code> statements.\nWith TypeScript 2.0, the type checker analyses all possible flows of control in statements and expressions to produce the most specific type possible (the <em>narrowed type</em>) at any given location for a local variable or parameter that is declared to have a union type.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">boolean</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// type of x is string here</span>\n        x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// type of x is number here</span>\n    <span class=\"token punctuation\">}</span>\n    x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// type of x is number | boolean here</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// type of x is string here</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Control flow based type analysis is particularly relevant in <code class=\"language-text\">--strictNullChecks</code> mode because nullable types are represented using union types:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// type of x is string in remainder of function</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Furthermore, in <code class=\"language-text\">--strictNullChecks</code> mode, control flow based type analysis includes <em>definite assignment analysis</em> for local variables of types that don’t permit the value <code class=\"language-text\">undefined</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">mumble</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">check<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Type doesn't permit undefined</span>\n    x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error, x is undefined</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>check<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n    <span class=\"token punctuation\">}</span>\n    x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error, x is possibly undefined</span>\n    x <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Tagged union types</h2>\n<p>TypeScript 2.0 implements support for tagged (or discriminated) union types.\nSpecifically, the TS compiler now support type guards that narrow union types based on tests of a discriminant property and furthermore extend that capability to <code class=\"language-text\">switch</code> statements.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Square</span> <span class=\"token punctuation\">{</span>\n    kind<span class=\"token punctuation\">:</span> <span class=\"token string\">\"square\"</span><span class=\"token punctuation\">;</span>\n    size<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token punctuation\">{</span>\n    kind<span class=\"token punctuation\">:</span> <span class=\"token string\">\"rectangle\"</span><span class=\"token punctuation\">;</span>\n    width<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    height<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">{</span>\n    kind<span class=\"token punctuation\">:</span> <span class=\"token string\">\"circle\"</span><span class=\"token punctuation\">;</span>\n    radius<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Shape <span class=\"token operator\">=</span> Square <span class=\"token operator\">|</span> Rectangle <span class=\"token operator\">|</span> Circle<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">:</span> Shape</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// In the following switch statement, the type of s is narrowed in each case clause</span>\n    <span class=\"token comment\">// according to the value of the discriminant property, thus allowing the other properties</span>\n    <span class=\"token comment\">// of that variant to be accessed without a type assertion.</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>kind<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"square\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>size <span class=\"token operator\">*</span> s<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"rectangle\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> s<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"circle\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> s<span class=\"token punctuation\">.</span>radius <span class=\"token operator\">*</span> s<span class=\"token punctuation\">.</span>radius<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">:</span> Shape</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>kind <span class=\"token operator\">===</span> <span class=\"token string\">\"square\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        s<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Square</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        s<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Rectangle | Circle</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">:</span> Shape</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>kind <span class=\"token operator\">===</span> <span class=\"token string\">\"square\"</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">.</span>kind <span class=\"token operator\">===</span> <span class=\"token string\">\"rectangle\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    s<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Circle</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A <em>discriminant property type guard</em> is an expression of the form <code class=\"language-text\">x.p == v</code>, <code class=\"language-text\">x.p === v</code>, <code class=\"language-text\">x.p != v</code>, or <code class=\"language-text\">x.p !== v</code>, where <code class=\"language-text\">p</code> and <code class=\"language-text\">v</code> are a property and an expression of a string literal type or a union of string literal types.\nThe discriminant property type guard narrows the type of <code class=\"language-text\">x</code> to those constituent types of <code class=\"language-text\">x</code> that have a discriminant property <code class=\"language-text\">p</code> with one of the possible values of <code class=\"language-text\">v</code>.</p>\n<p>Note that we currently only support discriminant properties of string literal types.\nWe intend to later add support for boolean and numeric literal types.</p>\n<h2>The <code class=\"language-text\">never</code> type</h2>\n<p>TypeScript 2.0 introduces a new primitive type <code class=\"language-text\">never</code>.\nThe <code class=\"language-text\">never</code> type represents the type of values that never occur.\nSpecifically, <code class=\"language-text\">never</code> is the return type for functions that never return and <code class=\"language-text\">never</code> is the type of variables under type guards that are never true.</p>\n<p>The <code class=\"language-text\">never</code> type has the following characteristics:</p>\n<ul>\n<li><code class=\"language-text\">never</code> is a subtype of and assignable to every type.</li>\n<li>No type is a subtype of or assignable to <code class=\"language-text\">never</code> (except <code class=\"language-text\">never</code> itself).</li>\n<li>In a function expression or arrow function with no return type annotation, if the function has no <code class=\"language-text\">return</code> statements, or only <code class=\"language-text\">return</code> statements with expressions of type <code class=\"language-text\">never</code>, and if the end point of the function is not reachable (as determined by control flow analysis), the inferred return type for the function is <code class=\"language-text\">never</code>.</li>\n<li>In a function with an explicit <code class=\"language-text\">never</code> return type annotation, all <code class=\"language-text\">return</code> statements (if any) must have expressions of type <code class=\"language-text\">never</code> and the end point of the function must not be reachable.</li>\n</ul>\n<p>Because <code class=\"language-text\">never</code> is a subtype of every type, it is always omitted from union types and it is ignored in function return type inference as long as there are other types being returned.</p>\n<p>Some examples of functions returning <code class=\"language-text\">never</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Function returning never must have unreachable end point</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Inferred return type is never</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Something failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Function returning never must have unreachable end point</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">infiniteLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Some examples of use of functions returning <code class=\"language-text\">never</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Inferred return type is number</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">move1</span><span class=\"token punctuation\">(</span>direction<span class=\"token punctuation\">:</span> <span class=\"token string\">\"up\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"down\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>direction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"up\"</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"down\"</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Should never get here\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Inferred return type is number</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">move2</span><span class=\"token punctuation\">(</span>direction<span class=\"token punctuation\">:</span> <span class=\"token string\">\"up\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"down\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> direction <span class=\"token operator\">===</span> <span class=\"token string\">\"up\"</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span>\n        direction <span class=\"token operator\">===</span> <span class=\"token string\">\"down\"</span> <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">:</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Should never get here\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Inferred return type is T</span>\n<span class=\"token keyword\">function</span> check<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span> <span class=\"token operator\">|</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">||</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Undefined value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Because <code class=\"language-text\">never</code> is assignable to every type, a function returning <code class=\"language-text\">never</code> can be used when a callback returning a more specific type is required:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">cb</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Read-only properties and index signatures</h2>\n<p>A property or index signature can now be declared with the <code class=\"language-text\">readonly</code> modifier is considered read-only.</p>\n<p>Read-only properties may have initializers and may be assigned to in constructors within the same class declaration, but otherwise assignments to read-only properties are disallowed.</p>\n<p>In addition, entities are <em>implicitly</em> read-only in several situations:</p>\n<ul>\n<li>A property declared with a <code class=\"language-text\">get</code> accessor and no <code class=\"language-text\">set</code> accessor is considered read-only.</li>\n<li>In the type of an enum object, enum members are considered read-only properties.</li>\n<li>In the type of a module object, exported <code class=\"language-text\">const</code> variables are considered read-only properties.</li>\n<li>An entity declared in an <code class=\"language-text\">import</code> statement is considered read-only.</li>\n<li>An entity accessed through an ES2015 namespace import is considered read-only (e.g. <code class=\"language-text\">foo.x</code> is read-only when <code class=\"language-text\">foo</code> is declared as <code class=\"language-text\">import * as foo from &quot;foo&quot;</code>).</li>\n</ul>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">readonly</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">readonly</span> y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> p1<span class=\"token punctuation\">:</span> Point <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\np1<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error, p1.x is read-only</span>\n\n<span class=\"token keyword\">var</span> p2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> p3<span class=\"token punctuation\">:</span> Point <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Ok, read-only alias for p2</span>\np3<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error, p3.x is read-only</span>\np2<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Ok, but also changes p3.x because of aliasing</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">readonly</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">readonly</span> b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Assignment permitted in constructor</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> b<span class=\"token punctuation\">:</span> ReadonlyArray<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\nb<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// Error, elements are read-only</span>\nb<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Error, no push method (because it mutates array)</span>\nb<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error, length is read-only</span>\na <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// Error, mutating methods are missing</span></code></pre></div>\n<h2>Specifying the type of <code class=\"language-text\">this</code> for functions</h2>\n<p>Following up on specifying the type of <code class=\"language-text\">this</code> in a class or an interface, functions and methods can now declare the type of <code class=\"language-text\">this</code> they expect.</p>\n<p>By default the type of <code class=\"language-text\">this</code> inside a function is <code class=\"language-text\">any</code>.\nStarting with TypeScript 2.0, you can provide an explicit <code class=\"language-text\">this</code> parameter.\n<code class=\"language-text\">this</code> parameters are fake parameters that come first in the parameter list of a function:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// make sure `this` is unusable in this standalone function</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2><code class=\"language-text\">this</code> parameters in callbacks</h2>\n<p>Libraries can also use <code class=\"language-text\">this</code> parameters to declare how callbacks will be invoked.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">UIElement</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">addClickListener</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">onclick</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">:</span> Event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">this: void</code> means that <code class=\"language-text\">addClickListener</code> expects <code class=\"language-text\">onclick</code> to be a function that does not require a <code class=\"language-text\">this</code> type.</p>\n<p>Now if you annotate calling code with <code class=\"language-text\">this</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Handler</span> <span class=\"token punctuation\">{</span>\n    info<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">onClickBad</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">:</span> Handler<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">:</span> Event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// oops, used this here. using this callback would crash at runtime</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>info <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> h <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Handler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuiElement<span class=\"token punctuation\">.</span><span class=\"token function\">addClickListener</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">.</span>onClickBad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error!</span></code></pre></div>\n<h2><code class=\"language-text\">--noImplicitThis</code></h2>\n<p>A new flag is also added in TypeScript 2.0 to flag all uses of <code class=\"language-text\">this</code> in functions without an explicit type annotation.</p>\n<h2>Glob support in <code class=\"language-text\">tsconfig.json</code></h2>\n<p>Glob support is here!! Glob support has been <a href=\"https://github.com/Microsoft/TypeScript/issues/1927\">one of the most requested features</a>.</p>\n<p>Glob-like file patterns are supported two properties <code class=\"language-text\">&quot;include&quot;</code> and <code class=\"language-text\">&quot;exclude&quot;</code>.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"removeComments\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"preserveConstEnums\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"outFile\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"../../built/local/tsc.js\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"src/**/*\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"node_modules\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"**/*.spec.ts\"</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The supported glob wildcards are:</p>\n<ul>\n<li><code class=\"language-text\">*</code> matches zero or more characters (excluding directory separators)</li>\n<li><code class=\"language-text\">?</code> matches any one character (excluding directory separators)</li>\n<li><code class=\"language-text\">**/</code> recursively matches any subdirectory</li>\n</ul>\n<p>If a segment of a glob pattern includes only <code class=\"language-text\">*</code> or <code class=\"language-text\">.*</code>, then only files with supported extensions are included (e.g. <code class=\"language-text\">.ts</code>, <code class=\"language-text\">.tsx</code>, and <code class=\"language-text\">.d.ts</code> by default with <code class=\"language-text\">.js</code> and <code class=\"language-text\">.jsx</code> if <code class=\"language-text\">allowJs</code> is set to true).</p>\n<p>If the <code class=\"language-text\">&quot;files&quot;</code> and <code class=\"language-text\">&quot;include&quot;</code> are both left unspecified, the compiler defaults to including all TypeScript (<code class=\"language-text\">.ts</code>, <code class=\"language-text\">.d.ts</code> and <code class=\"language-text\">.tsx</code>) files in the containing directory and subdirectories except those excluded using the <code class=\"language-text\">&quot;exclude&quot;</code> property. JS files (<code class=\"language-text\">.js</code> and <code class=\"language-text\">.jsx</code>) are also included if <code class=\"language-text\">allowJs</code> is set to true.</p>\n<p>If the <code class=\"language-text\">&quot;files&quot;</code> or <code class=\"language-text\">&quot;include&quot;</code> properties are specified, the compiler will instead include the union of the files included by those two properties.\nFiles in the directory specified using the <code class=\"language-text\">&quot;outDir&quot;</code> compiler option are always excluded unless explicitly included via the <code class=\"language-text\">&quot;files&quot;</code> property (even when the ”<code class=\"language-text\">exclude</code>” property is specified).</p>\n<p>Files included using <code class=\"language-text\">&quot;include&quot;</code> can be filtered using the <code class=\"language-text\">&quot;exclude&quot;</code> property.\nHowever, files included explicitly using the <code class=\"language-text\">&quot;files&quot;</code> property are always included regardless of <code class=\"language-text\">&quot;exclude&quot;</code>.\nThe <code class=\"language-text\">&quot;exclude&quot;</code> property defaults to excluding the <code class=\"language-text\">node_modules</code>, <code class=\"language-text\">bower_components</code>, and <code class=\"language-text\">jspm_packages</code> directories when not specified.</p>\n<h2>Module resolution enhancements: BaseUrl, Path mapping, rootDirs and tracing</h2>\n<p>TypeScript 2.0 provides a set of additional module resolution knops to <em>inform</em> the compiler where to find declarations for a given module.</p>\n<p>See <a href=\"http://www.typescriptlang.org/docs/handbook/module-resolution.html\">Module Resolution</a> documentation for more details.</p>\n<h2>Base URL</h2>\n<p>Using a <code class=\"language-text\">baseUrl</code> is a common practice in applications using AMD module loaders where modules are “deployed” to a single folder at run-time.\nAll module imports with non-relative names are assumed to be relative to the <code class=\"language-text\">baseUrl</code>.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./modules\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now imports to <code class=\"language-text\">&quot;moduleA&quot;</code> would be looked up in <code class=\"language-text\">./modules/moduleA</code></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token constant\">A</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"moduleA\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Path mapping</h2>\n<p>Sometimes modules are not directly located under <em>baseUrl</em>.\nLoaders use a mapping configuration to map module names to files at run-time, see <a href=\"http://requirejs.org/docs/api.html#config-paths\">RequireJs documentation</a> and <a href=\"https://github.com/systemjs/systemjs/blob/master/docs/overview.md#map-config\">SystemJS documentation</a>.</p>\n<p>The TypeScript compiler supports the declaration of such mappings using <code class=\"language-text\">&quot;paths&quot;</code> property in <code class=\"language-text\">tsconfig.json</code> files.</p>\n<h5>Example</h5>\n<p>For instance, an import to a module <code class=\"language-text\">&quot;jquery&quot;</code> would be translated at runtime to <code class=\"language-text\">&quot;node_modules/jquery/dist/jquery.slim.min.js&quot;</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./node_modules\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"jquery\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"jquery/dist/jquery.slim.min\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Using <code class=\"language-text\">&quot;paths&quot;</code> also allow for more sophisticated mappings including multiple fall back locations.\nConsider a project configuration where only some modules are available in one location, and the rest are in another.</p>\n<h2>Virtual Directories with <code class=\"language-text\">rootDirs</code></h2>\n<p>Using ‘rootDirs’, you can inform the compiler of the <em>roots</em> making up this “virtual” directory;\nand thus the compiler can resolve relative modules imports within these “virtual” directories <em>as if</em> were merged together in one directory.</p>\n<h5>Example</h5>\n<p>Given this project structure:</p>\n<div class=\"gatsby-highlight\" data-language=\"tree\"><pre class=\"language-tree\"><code class=\"language-tree\"> src\n └── views\n     └── view1.ts (imports &#39;./template1&#39;)\n     └── view2.ts\n\n generated\n └── templates\n         └── views\n             └── template1.ts (imports &#39;./view2&#39;)</code></pre></div>\n<p>A build step will copy the files in <code class=\"language-text\">/src/views</code> and <code class=\"language-text\">/generated/templates/views</code> to the same directory in the output.\nAt run-time, a view can expect its template to exist next to it, and thus should import it using a relative name as <code class=\"language-text\">&quot;./template&quot;</code>.</p>\n<p><code class=\"language-text\">&quot;rootDirs&quot;</code> specify a list of <em>roots</em> whose contents are expected to merge at run-time.\nSo following our example, the <code class=\"language-text\">tsconfig.json</code> file should look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"rootDirs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"src/views\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"generated/templates/views\"</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Tracing module resolution</h2>\n<p><code class=\"language-text\">--traceResolution</code> offers a handy way to understand how modules have been resolved by the compiler.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">tsc --traceResolution</code></pre></div>\n<h2>Shorthand ambient module declarations</h2>\n<p>If you don’t want to take the time to write out declarations before using a new module, you can now just use a shorthand declaration to get started quickly.</p>\n<h5>declarations.d.ts</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">\"hot-new-module\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>All imports from a shorthand module will have the any type.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>y<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"hot-new-module\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">x</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Wildcard character in module names</h2>\n<p>Importing none-code resources using module loaders extension (e.g. <a href=\"https://github.com/amdjs/amdjs-api/blob/master/LoaderPlugins.md\">AMD</a> or <a href=\"https://github.com/systemjs/systemjs/blob/master/docs/creating-plugins.md\">SystemJS</a>) has not been easy before;\npreviously an ambient module declaration had to be defined for each resource.</p>\n<p>TypeScript 2.0 supports the use of the wildcard character (<code class=\"language-text\">*</code>) to declare a “family” of module names;\nthis way, a declaration is only required once for an extension, and not for every resource.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">\"*!text\"</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> content<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> content<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Some do it the other way around.</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">\"json!*\"</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now you can import things that match <code class=\"language-text\">&quot;*!text&quot;</code> or <code class=\"language-text\">&quot;json!*&quot;</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> fileContent <span class=\"token keyword\">from</span> <span class=\"token string\">\"./xyz.txt!text\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> data <span class=\"token keyword\">from</span> <span class=\"token string\">\"json!http://example.com/data.json\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> fileContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Wildcard module names can be even more useful when migrating from an un-typed code base.\nCombined with Shorthand ambient module declarations, a set of modules can be easily declared as <code class=\"language-text\">any</code>.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">\"myLibrary/*\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>All imports to any module under <code class=\"language-text\">myLibrary</code> would be considered to have the type <code class=\"language-text\">any</code> by the compiler;\nthus, shutting down any checking on the shapes or types of these modules.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> readFile <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> \"myLibrary<span class=\"token operator\">/</span>fileSystem<span class=\"token operator\">/</span>readFile`<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// readFile is 'any'</span></code></pre></div>\n<h2>Support for UMD module definitions</h2>\n<p>Some libraries are designed to be used in many module loaders, or with no module loading (global variables).\nThese are known as <a href=\"https://github.com/umdjs/umd\">UMD</a> or <a href=\"http://isomorphic.net\">Isomorphic</a> modules.\nThese libraries can be accessed through either an import or a global variable.</p>\n<p>For example:</p>\n<h5>math-lib.d.ts</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">namespace</span> mathLib<span class=\"token punctuation\">;</span></code></pre></div>\n<p>The library can then be used as an import within modules:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> isPrime <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"math-lib\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmathLib<span class=\"token punctuation\">.</span><span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ERROR: can't use the global definition from inside a module</span></code></pre></div>\n<p>It can also be used as a global variable, but only inside of a script.\n(A script is a file with no imports or exports.)</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">mathLib<span class=\"token punctuation\">.</span><span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Optional class properties</h2>\n<p>Optional properties and methods can now be declared in classes, similar to what is already permitted in interfaces.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Bar</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    b<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    g<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Body of optional method can be omitted</span>\n    h<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When compiled in <code class=\"language-text\">--strictNullChecks</code> mode, optional properties and methods automatically have <code class=\"language-text\">undefined</code> included in their type. Thus, the <code class=\"language-text\">b</code> property above is of type <code class=\"language-text\">number | undefined</code> and the <code class=\"language-text\">g</code> method above is of type <code class=\"language-text\">(() =&gt; number) | undefined</code>.\nType guards can be used to strip away the <code class=\"language-text\">undefined</code> part of the type:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> Bar</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    x<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// number</span>\n    x<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// number | undefined</span>\n    x<span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// () => number</span>\n    x<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// (() => number) | undefined</span>\n    <span class=\"token keyword\">let</span> f1 <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// number</span>\n    <span class=\"token keyword\">let</span> g1 <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>g <span class=\"token operator\">&amp;&amp;</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// number | undefined</span>\n    <span class=\"token keyword\">let</span> g2 <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>g <span class=\"token operator\">?</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// number</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Private and Protected Constructors</h2>\n<p>A class constructor may be marked <code class=\"language-text\">private</code> or <code class=\"language-text\">protected</code>.\nA class with private constructor cannot be instantiated outside the class body, and cannot be extended.\nA class with protected constructor cannot be instantiated outside the class body, but can be extended.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> instance<span class=\"token punctuation\">:</span> Singleton<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Singleton<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            Singleton<span class=\"token punctuation\">.</span>instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> Singleton<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error: constructor of 'Singleton' is private.</span>\n<span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> Singleton<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Abstract properties and accessors</h2>\n<p>An abstract class can declare abstract properties and/or accessors.\nAny sub class will need to declare the abstract properties or be marked as abstract.\nAbstract properties cannot have an initializer.\nAbstract accessors cannot have bodies.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">abstract</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">get</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">set</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">{</span>\n    name <span class=\"token operator\">=</span> <span class=\"token string\">\"derived\"</span><span class=\"token punctuation\">;</span>\n\n    value <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Implicit index signatures</h2>\n<p>An object literal type is now assignable to a type with an index signature if all known properties in the object literal are assignable to that index signature. This makes it possible to pass a variable that was initialized with an object literal as parameter to a function that expects a map or dictionary:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">httpService</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> headers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"application/x-www-form-urlencoded\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">httpService</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"application/x-www-form-urlencoded\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Ok</span>\n<span class=\"token function\">httpService</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> headers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Now ok, previously wasn't</span></code></pre></div>\n<h2>Including built-in type declarations with <code class=\"language-text\">--lib</code></h2>\n<p>Getting to ES6/ES2015 built-in API declarations were only limited to <code class=\"language-text\">target: ES6</code>.\nEnter <code class=\"language-text\">--lib</code>; with <code class=\"language-text\">--lib</code> you can specify a list of built-in API declaration groups that you can chose to include in your project.\nFor instance, if you expect your runtime to have support for <code class=\"language-text\">Map</code>, <code class=\"language-text\">Set</code> and <code class=\"language-text\">Promise</code> (e.g. most evergreen browsers today), just include <code class=\"language-text\">--lib es2015.collection,es2015.promise</code>.\nSimilarly you can exclude declarations you do not want to include in your project, e.g. DOM if you are working on a node project using <code class=\"language-text\">--lib es5,es6</code>.</p>\n<p>Here is a list of available API groups:</p>\n<ul>\n<li>dom</li>\n<li>webworker</li>\n<li>es5</li>\n<li>es6 / es2015</li>\n<li>es2015.core</li>\n<li>es2015.collection</li>\n<li>es2015.iterable</li>\n<li>es2015.promise</li>\n<li>es2015.proxy</li>\n<li>es2015.reflect</li>\n<li>es2015.generator</li>\n<li>es2015.symbol</li>\n<li>es2015.symbol.wellknown</li>\n<li>es2016</li>\n<li>es2016.array.include</li>\n<li>es2017</li>\n<li>es2017.object</li>\n<li>es2017.sharedmemory</li>\n<li>scripthost</li>\n</ul>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">tsc --target es5 --lib es5,es2015.promise</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"lib\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"es5\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"es2015.promise\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Flag unused declarations with <code class=\"language-text\">--noUnusedParameters</code> and <code class=\"language-text\">--noUnusedLocals</code></h2>\n<p>TypeScript 2.0 has two new flags to help you maintain a clean code base.\n<code class=\"language-text\">--noUnusedParameters</code> flags any unused function or method parameters errors.\n<code class=\"language-text\">--noUnusedLocals</code> flags any unused local (un-exported) declaration like variables, functions, classes, imports, etc…\nAlso, unused private members of a class would be flagged as errors under <code class=\"language-text\">--noUnusedLocals</code>.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> readFile <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./b\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//     ^ Error: `B` declared but never used</span>\n<span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//                                 ^^^^  Error: 'arg' declared but never used.</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Parameters declaration with names starting with <code class=\"language-text\">_</code> are exempt from the unused parameter checking.\ne.g.:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">returnNull</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// OK</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Module identifiers allow for <code class=\"language-text\">.js</code> extension</h2>\n<p>Before TypeScript 2.0, a module identifier was always assumed to be extension-less;\nfor instance, given an import as <code class=\"language-text\">import d from &quot;./moduleA.js&quot;</code>, the compiler looked up the definition of <code class=\"language-text\">&quot;moduleA.js&quot;</code> in <code class=\"language-text\">./moduleA.js.ts</code> or <code class=\"language-text\">./moduleA.js.d.ts</code>.\nThis made it hard to use bundling/loading tools like <a href=\"https://github.com/systemjs/systemjs\">SystemJS</a> that expect URI’s in their module identifier.</p>\n<p>With TypeScript 2.0, the compiler will look up definition of <code class=\"language-text\">&quot;moduleA.js&quot;</code> in  <code class=\"language-text\">./moduleA.ts</code> or <code class=\"language-text\">./moduleA.d.t</code>.</p>\n<h2>Support ‘target : es5’ with ‘module: es6’</h2>\n<p>Previously flagged as an invalid flag combination, <code class=\"language-text\">target: es5</code> and ‘module: es6’ is now supported.\nThis should facilitate using ES2015-based tree shakers like <a href=\"https://github.com/rollup/rollup\">rollup</a>.</p>\n<h2>Trailing commas in function parameter and argument lists</h2>\n<p>Trailing comma in function parameter and argument lists are now allowed.\nThis is an implementation for a <a href=\"https://jeffmo.github.io/es-trailing-function-commas/\">Stage-3 ECMAScript proposal</a> that emits down to valid ES3/ES5/ES6.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>\n  bar<span class=\"token punctuation\">:</span> Bar<span class=\"token punctuation\">,</span>\n  baz<span class=\"token punctuation\">:</span> Baz<span class=\"token punctuation\">,</span> <span class=\"token comment\">// trailing commas are OK in parameter lists</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Implementation...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>\n  bar<span class=\"token punctuation\">,</span>\n  baz<span class=\"token punctuation\">,</span> <span class=\"token comment\">// and in argument lists</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>New <code class=\"language-text\">--skipLibCheck</code></h2>\n<p>TypeScript 2.0 adds a new <code class=\"language-text\">--skipLibCheck</code> compiler option that causes type checking of declaration files (files with extension <code class=\"language-text\">.d.ts</code>) to be skipped.\nWhen a program includes large declaration files, the compiler spends a lot of time type checking declarations that are already known to not contain errors, and compile times may be significantly shortened by skipping declaration file type checks.</p>\n<p>Since declarations in one file can affect type checking in other files, some errors may not be detected when <code class=\"language-text\">--skipLibCheck</code> is specified.\nFor example, if a non-declaration file augments a type declared in a declaration file, errors may result that are only reported when the declaration file is checked.\nHowever, in practice such situations are rare.</p>\n<h2>Allow duplicate identifiers across declarations</h2>\n<p>This has been one common source of duplicate definition errors.\nMultiple declaration files defining the same members on interfaces.</p>\n<p>TypeScript 2.0 relaxes this constraint and allows duplicate identifiers across blocks, as long as they have <em>identical</em> types.</p>\n<p>Within the same block duplicate definitions are still disallowed.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Error</span> <span class=\"token punctuation\">{</span>\n    stack<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Error</span> <span class=\"token punctuation\">{</span>\n    code<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    stack<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// OK</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>New <code class=\"language-text\">--declarationDir</code></h2>\n<p><code class=\"language-text\">--declarationDir</code> allows for generating declaration files in a different location than JavaScript files.</p>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-2-0.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/release-notes/typescript-2-0.html","isOldHandbook":true}}}