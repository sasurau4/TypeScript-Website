{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/release-notes/typescript-2-3.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"766c68db-df7c-56a7-a69b-20f03ed5db27","excerpt":"{% raw %}## Generators and Iteration for ES5/ES3 First some ES2016 terminology: Iterators ES2015 introduced , which is an object that exposes three methods…","html":"<p>{% raw %}## Generators and Iteration for ES5/ES3</p>\n<p><em>First some ES2016 terminology:</em></p>\n<h5>Iterators</h5>\n<p><a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-iteration\">ES2015 introduced <code class=\"language-text\">Iterator</code></a>, which is an object that exposes three methods, <code class=\"language-text\">next</code>, <code class=\"language-text\">return</code>, and <code class=\"language-text\">throw</code>, as per the following interface:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Iterator</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> IteratorResult<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> IteratorResult<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">throw</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> IteratorResult<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This kind of iterator is useful for iterating over synchronously available values, such as the elements of an Array or the keys of a Map.\nAn object that supports iteration is said to be “iterable” if it has a <code class=\"language-text\">Symbol.iterator</code> method that returns an <code class=\"language-text\">Iterator</code> object.</p>\n<p>The Iterator protocol also defines the target of some of the ES2015 features like <code class=\"language-text\">for..of</code> and spread operator and the array rest in destructuring assignmnets.</p>\n<h5>Generators</h5>\n<p><a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-generatorfunction-objects\">ES2015 also introduced “Generators”</a>, which are functions that can be used to yield partial computation results via the <code class=\"language-text\">Iterator</code> interface and the <code class=\"language-text\">yield</code> keyword.\nGenerators can also internally delegate calls to another iterable through <code class=\"language-text\">yield *</code>. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>New <code class=\"language-text\">--downlevelIteration</code></h5>\n<p>Previously generators were only supported if the target is ES6/ES2015 or later.\nMoreover, constructs that operate on the Iterator protocol, e.g. <code class=\"language-text\">for..of</code> were only supported if they operate on arrays for targets below ES6/ES2015.</p>\n<p>TypeScript 2.3 adds full support for generators and the Iterator protocol for ES3 and ES5 targets with <code class=\"language-text\">--downlevelIteration</code> flag.</p>\n<p>With <code class=\"language-text\">--downlevelIteration</code>, the compiler uses new type check and emit behavior that attempts to call a <code class=\"language-text\">[Symbol.iterator]()</code> method on the iterated object if it is found, and creates a synthetic array iterator over the object if it is not.</p>\n<blockquote>\n<p>Please note that this requires a native <code class=\"language-text\">Symbol.iterator</code> or <code class=\"language-text\">Symbol.iterator</code> shim at runtime for any non-array values.</p>\n</blockquote>\n<p><code class=\"language-text\">for..of</code> statements,  Array Destructuring, and Spread elements in Array, Call, and New expressions support <code class=\"language-text\">Symbol.iterator</code> in ES5/E3 if available when using <code class=\"language-text\">--downlevelIteration</code>, but can be used on an Array even if it does not define <code class=\"language-text\">Symbol.iterator</code> at run time or design time.</p>\n<h2>Async Iteration</h2>\n<p>TypeScript 2.3 adds support for the async iterators and generators as described by the current <a href=\"https://github.com/tc39/proposal-async-iteration\">TC39 proposal</a>.</p>\n<h5>Async iterators</h5>\n<p>The Async Iteration introduces an <code class=\"language-text\">AsyncIterator</code>, which is similar to <code class=\"language-text\">Iterator</code>.\nThe difference lies in the fact that the <code class=\"language-text\">next</code>, <code class=\"language-text\">return</code>, and <code class=\"language-text\">throw</code> methods of an <code class=\"language-text\">AsyncIterator</code> return a <code class=\"language-text\">Promise</code> for the iteration result, rather than the result itself.\nThis allows the caller to enlist in an asynchronous notification for the time at which the <code class=\"language-text\">AsyncIterator</code> has advanced to the point of yielding a value.\nAn <code class=\"language-text\">AsyncIterator</code> has the following shape:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">AsyncIterator</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>IteratorResult<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">>></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>IteratorResult<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">>></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">throw</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>IteratorResult<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">>></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>An object that supports async iteration is said to be “iterable” if it has a <code class=\"language-text\">Symbol.asyncIterator</code> method that returns an <code class=\"language-text\">AsyncIterator</code> object.</p>\n<h5>Async Generators</h5>\n<p>The <a href=\"https://github.com/tc39/proposal-async-iteration\">Async Iteration proposal</a> introduces “Async Generators”, which are async functions that also can be used to yield partial computation results.\nAsync Generators can also delegate calls via <code class=\"language-text\">yield*</code> to either an iterable or async iterable:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As with Generators, Async Generators can only be function declarations, function expressions, or methods of classes or object literals.\nArrow functions cannot be Async Generators. Async Generators require a valid, global <code class=\"language-text\">Promise</code> implementation (either native or an ES2015-compatible polyfill), in addition to a valid <code class=\"language-text\">Symbol.asyncIterator</code> reference (either a native symbol or a shim).</p>\n<h5>The <code class=\"language-text\">for-await-of</code> Statement</h5>\n<p>Finally, ES2015 introduced the <code class=\"language-text\">for..of</code> statement as a means of iterating over an iterable.\nSimilarly, the Async Iteration proposal introduces the <code class=\"language-text\">for..await..of</code> statement to iterate over an async iterable:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> x <span class=\"token keyword\">of</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">for..await..of</code> statement is only legal within an Async Function or Async Generator.</p>\n<h5>Caveats</h5>\n<ul>\n<li>Keep in mind that our support for async iterators relies on support for <code class=\"language-text\">Symbol.asyncIterator</code> to exist at runtime. You may need to polyfill <code class=\"language-text\">Symbol.asyncIterator</code>, which for simple purposes can be as simple as: <code class=\"language-text\">(Symbol as any).asyncIterator = Symbol.asyncIterator || Symbol.for(&quot;Symbol.asyncIterator&quot;);</code></li>\n<li>You also need to include <code class=\"language-text\">esnext</code> in your <code class=\"language-text\">--lib</code> option, to get the <code class=\"language-text\">AsyncIterator</code> declaration if you do not already have it.</li>\n<li>Finally, if your target is ES5 or ES3, you’ll also need to set the <code class=\"language-text\">--downlevelIterators</code> flag.</li>\n</ul>\n<h2>Generic parameter defaults</h2>\n<p>TypeScript 2.3 adds support for declaring defaults for generic type parameters.</p>\n<h5>Example</h5>\n<p>Consider a function that creates a new <code class=\"language-text\">HTMLElement</code>, calling it with no arguments generates a <code class=\"language-text\">Div</code>; you can optionally pass a list of children as well. Previously you would have to define it as:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Container<span class=\"token operator\">&lt;</span>HTMLDivElement<span class=\"token punctuation\">,</span> HTMLDivElement<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> create<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Container<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> create<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Container<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>With generic parameter defaults we can reduce it to:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> create<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token operator\">=</span> HTMLDivElement<span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>element<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> children<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Container<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>A generic parameter default follows the following rules:</p>\n<ul>\n<li>A type parameter is deemed optional if it has a default.</li>\n<li>Required type parameters must not follow optional type parameters.</li>\n<li>Default types for a type parameter must satisfy the constraint for the type parameter, if it exists.</li>\n<li>When specifying type arguments, you are only required to specify type arguments for the required type parameters. Unspecified type parameters will resolve to their default types.</li>\n<li>If a default type is specified and inference cannot choose a candidate, the default type is inferred.</li>\n<li>A class or interface declaration that merges with an existing class or interface declaration may introduce a default for an existing type parameter.</li>\n<li>A class or interface declaration that merges with an existing class or interface declaration may introduce a new type parameter as long as it specifies a default.</li>\n</ul>\n<h2>New <code class=\"language-text\">--strict</code> master option</h2>\n<p>New checks added to TypeScript are often off by default to avoid breaking existing projects.\nWhile avoiding breakage is a good thing, this strategy has the drawback of making it increasingly complex to choose the highest level of type safety, and doing so requires explicit opt-in action on every TypeScript release.\nWith the <code class=\"language-text\">--strict</code> option it becomes possible to choose maximum type safety with the understanding that additional errors might be reported by newer versions of the compiler as improved type checking features are added.</p>\n<p>The new <code class=\"language-text\">--strict</code> compiler option represents the recommended setting of a number of type checking options. Specifically, specifying <code class=\"language-text\">--strict</code> corresponds to specifying all of the following options (and may in the future include more options):</p>\n<ul>\n<li><code class=\"language-text\">--strictNullChecks</code></li>\n<li><code class=\"language-text\">--noImplicitAny</code></li>\n<li><code class=\"language-text\">--noImplicitThis</code></li>\n<li><code class=\"language-text\">--alwaysStrict</code></li>\n</ul>\n<p>In exact terms, the <code class=\"language-text\">--strict</code> option sets the <em>default</em> value for the compiler options listed above.\nThis means it is still possible to individually control the options.\nFor example,</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">--strict --noImplicitThis false</code></pre></div>\n<p>has the effect of turning on all strict options <em>except</em> the <code class=\"language-text\">--noImplicitThis</code> option. Using this scheme it is possible to express configurations consisting of <em>all</em> strict options except some explicitly listed options.\nIn other words, it is now possible to default to the highest level of type safety but opt out of certain checks.</p>\n<p>Starting with TypeScript 2.3, the default <code class=\"language-text\">tsconfig.json</code> generated by <code class=\"language-text\">tsc --init</code> includes a <code class=\"language-text\">&quot;strict&quot;: true</code> setting in the <code class=\"language-text\">&quot;compilerOptions&quot;</code> section.\nThus, new projects started with <code class=\"language-text\">tsc --init</code> will by default have the highest level of type safety enabled.</p>\n<h2>Enhanced <code class=\"language-text\">--init</code> output</h2>\n<p>Along with setting <code class=\"language-text\">--strict</code> on by default, <code class=\"language-text\">tsc --init</code> has an enhanced output. Default <code class=\"language-text\">tsconfig.json</code> files generated by <code class=\"language-text\">tsc --init</code> now include a set of the common compiler options along with their descriptions commented out.\nJust un-comment the configuration you like to set to get the desired behavior; we hope the new output simplifies the setting up new projects and keeps configuration files readable as projects grow.</p>\n<h2>Errors in .js files with <code class=\"language-text\">--checkJs</code></h2>\n<p>By default the TypeScript compiler does not report any errors in .js files including using <code class=\"language-text\">--allowJs</code>.\nWith TypeScript 2.3 type-checking errors can also be reported in <code class=\"language-text\">.js</code> files with <code class=\"language-text\">--checkJs</code>.</p>\n<p>You can skip checking some files by adding <code class=\"language-text\">// @ts-nocheck</code> comment to them; conversely you can choose to check only a few <code class=\"language-text\">.js</code> files by adding <code class=\"language-text\">// @ts-check</code> comment to them without setting <code class=\"language-text\">--checkJs</code>.\nYou can also ignore errors on specific lines by adding <code class=\"language-text\">// @ts-ignore</code> on the preceding line.</p>\n<p><code class=\"language-text\">.js</code> files are still checked to ensure that they only include standard ECMAScript features; type annotations are only allowed in <code class=\"language-text\">.ts</code> files and are flagged as errors in <code class=\"language-text\">.js</code> files.\nJSDoc comments can be used to add some type information to your JavaScript code, see <a href=\"https://github.com/Microsoft/TypeScript/wiki/JSDoc-support-in-JavaScript\">JSDoc Support documentation</a> for more details about the supported JSDoc constructs.</p>\n<p>See <a href=\"https://github.com/Microsoft/TypeScript/wiki/Type-Checking-JavaScript-Files\">Type checking JavaScript Files documentation</a> for more details.</p>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-2-3.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/release-notes/typescript-2-3.html","isOldHandbook":true}}}