{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/release-notes/typescript-3-2.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"2d2aa64c-244a-5f7a-9e55-db4c37316a3f","excerpt":"{% raw %}##  TypeScript 3.2 introduces a new  compiler option (in the  family of options) with which the , , and  methods on function objects are strongly typed…","html":"<p>{% raw %}## <code class=\"language-text\">strictBindCallApply</code></p>\n<p>TypeScript 3.2 introduces a new <code class=\"language-text\">--strictBindCallApply</code> compiler option (in the <code class=\"language-text\">--strict</code> family of options) with which the <code class=\"language-text\">bind</code>, <code class=\"language-text\">call</code>, and <code class=\"language-text\">apply</code> methods on function objects are strongly typed and strictly checked.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>undefined<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// error: too few argumnts</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>undefined<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// error: 2nd argument is a number</span>\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>undefined<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error: too many arguments</span>\n<span class=\"token keyword\">let</span> d <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>undefined<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// okay! returns a string</span></code></pre></div>\n<p>This is achieved by introducing two new types, <code class=\"language-text\">CallableFunction</code> and <code class=\"language-text\">NewableFunction</code>, in <code class=\"language-text\">lib.d.ts</code>. These types contain specialized generic method declarations for <code class=\"language-text\">bind</code>, <code class=\"language-text\">call</code>, and <code class=\"language-text\">apply</code> for regular functions and constructor functions, respectively. The declarations use generic rest parameters (see #24897) to capture and reflect parameter lists in a strongly typed manner. In <code class=\"language-text\">--strictBindCallApply</code> mode these declarations are used in place of the (very permissive) declarations provided by type <code class=\"language-text\">Function</code>.</p>\n<h2>Caveats</h2>\n<p>Since the stricter checks may uncover previously unreported errors, this is a breaking change in <code class=\"language-text\">--strict</code> mode.</p>\n<p>Additionally, <a href=\"https://github.com/Microsoft/TypeScript/pull/27028#issuecomment-429334450\">another caveat</a> of this new functionality is that due to certain limitations, <code class=\"language-text\">bind</code>, <code class=\"language-text\">call</code>, and <code class=\"language-text\">apply</code> can’t yet fully model generic functions or functions that have overloads.\nWhen using these methods on a generic function, type parameters will be substituted with the empty object type (<code class=\"language-text\">{}</code>), and when used on a function with overloads, only the last overload will ever be modeled.</p>\n<h2>Generic spread expressions in object literals</h2>\n<p>In TypeScript 3.2, object literals now allow generic spread expressions which now produce intersection types, similar to the <code class=\"language-text\">Object.assign</code> function and JSX literals. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> taggedObject<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> tag<span class=\"token punctuation\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>obj<span class=\"token punctuation\">,</span> tag <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// T &amp; { tag: U }</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token function\">taggedObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"point\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// { x: number, y: number } &amp; { tag: \"point\" }</span></code></pre></div>\n<p>Property assignments and non-generic spread expressions are merged to the greatest extent possible on either side of a generic spread expression. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> foo1<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> obj1<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> obj2<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>obj1<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>t<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>obj2<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// { a: string, x: number } &amp; T &amp; { b: string, y: number }</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Non-generic spread expressions continue to be processed as before: Call and construct signatures are stripped, only non-method properties are preserved, and for properties with the same name, the type of the rightmost property is used. This contrasts with intersection types which concatenate call and construct signatures, preserve all properties, and intersect the types of properties with the same name. Thus, spreads of the same types may produce different results when they are created through instantiation of generic types:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> spread<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>t<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>u <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// T &amp; U</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">let</span> y<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> s1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>y <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// { a: string, b: string, c: boolean }</span>\n<span class=\"token keyword\">let</span> s2 <span class=\"token operator\">=</span> <span class=\"token function\">spread</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// { a: string, b: number } &amp; { b: string, c: boolean }</span>\n<span class=\"token keyword\">let</span> b1 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string</span>\n<span class=\"token keyword\">let</span> b2 <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// number &amp; string</span></code></pre></div>\n<h2>Generic object rest variables and parameters</h2>\n<p>TypeScript 3.2 also allows destructuring a rest binding from a generic variable. This is achieved by using the predefined <code class=\"language-text\">Pick</code> and <code class=\"language-text\">Exclude</code> helper types from <code class=\"language-text\">lib.d.ts</code>, and using the generic type in question as well as the names of the other bindings in the destructuring pattern.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> excludeTag<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span> tag<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> tag<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> rest<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Pick&lt;T, Exclude&lt;keyof T, \"tag\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> taggedPoint <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> tag<span class=\"token punctuation\">:</span> <span class=\"token string\">\"point\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> point <span class=\"token operator\">=</span> <span class=\"token function\">excludeTag</span><span class=\"token punctuation\">(</span>taggedPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// { x: number, y: number }</span></code></pre></div>\n<h2>BigInt</h2>\n<p>BigInts are part of an upcoming proposal in ECMAScript that allow us to model theoretically arbitrarily large integers.\nTypeScript 3.2 brings type-checking for BigInts, as well as support for emitting BigInt literals when targeting <code class=\"language-text\">esnext</code>.</p>\n<p>BigInt support in TypeScript introduces a new primitive type called the <code class=\"language-text\">bigint</code> (all lowercase).\nYou can get a <code class=\"language-text\">bigint</code> by calling the <code class=\"language-text\">BigInt()</code> function or by writing out a BigInt literal by adding an <code class=\"language-text\">n</code> to the end of any integer numeric literal:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> foo<span class=\"token punctuation\">:</span> bigint <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// the BigInt function</span>\n<span class=\"token keyword\">let</span> bar<span class=\"token punctuation\">:</span> bigint <span class=\"token operator\">=</span> <span class=\"token number\">100n</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// a BigInt literal</span>\n\n<span class=\"token comment\">// *Slaps roof of fibonacci function*</span>\n<span class=\"token comment\">// This bad boy returns ints that can get *so* big!</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">:</span> bigint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1n</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> last <span class=\"token operator\">=</span> <span class=\"token number\">0n</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0n</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> current <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n        result <span class=\"token operator\">+=</span> last<span class=\"token punctuation\">;</span>\n        last <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000n</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>While you might imagine close interaction between <code class=\"language-text\">number</code> and <code class=\"language-text\">bigint</code>, the two are separate domains.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">let</span> foo<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">let</span> bar<span class=\"token punctuation\">:</span> bigint<span class=\"token punctuation\">;</span>\n\nfoo <span class=\"token operator\">=</span> bar<span class=\"token punctuation\">;</span> <span class=\"token comment\">// error: Type 'bigint' is not assignable to type 'number'.</span>\nbar <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">;</span> <span class=\"token comment\">// error: Type 'number' is not assignable to type 'bigint'.</span></code></pre></div>\n<p>As specified in ECMAScript, mixing <code class=\"language-text\">number</code>s and <code class=\"language-text\">bigint</code>s in arithmetic operations is an error.\nYou’ll have to explicitly convert values to <code class=\"language-text\">BigInt</code>s.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.141592</span> <span class=\"token operator\">*</span> <span class=\"token number\">10000n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// error</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3145</span> <span class=\"token operator\">*</span> <span class=\"token number\">10n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// error</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">3145</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// okay!</span></code></pre></div>\n<p>Also important to note is that <code class=\"language-text\">bigint</code>s produce a new string when using the <code class=\"language-text\">typeof</code> operator: the string <code class=\"language-text\">&quot;bigint&quot;</code>.\nThus, TypeScript correctly narrows using <code class=\"language-text\">typeof</code> as you’d expect.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">whatKindOfNumberIsIt</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> bigint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x <span class=\"token operator\">===</span> <span class=\"token string\">\"bigint\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'x' is a bigint!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'x' is a floating-point number\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We’d like to extend a huge thanks to <a href=\"https://github.com/calebsander\">Caleb Sander</a> for all the work on this feature.\nWe’re grateful for the contribution, and we’re sure our users are too!</p>\n<h2>Caveats</h2>\n<p>As we mentioned, BigInt support is only available for the <code class=\"language-text\">esnext</code> target.\nIt may not be obvious, but because BigInts have different behavior for mathematical operators like <code class=\"language-text\">+</code>, <code class=\"language-text\">-</code>, <code class=\"language-text\">*</code>, etc., providing functionality for older targets where the feature doesn’t exist (like <code class=\"language-text\">es2017</code> and below) would involve rewriting each of these operations.\nTypeScript would need to dispatch to the correct behavior depending on the type, and so every addition, string concatenation, multiplication, etc. would involve a function call.</p>\n<p>For that reason, we have no immediate plans to provide downleveling support.\nOn the bright side, Node 11 and newer versions of Chrome already support this feature, so you’ll be able to use BigInts there when targeting <code class=\"language-text\">esnext</code>.</p>\n<p>Certain targets may include a polyfill or BigInt-like runtime object.\nFor those purposes you may want to add <code class=\"language-text\">esnext.bigint</code> to the <code class=\"language-text\">lib</code> setting in your compiler options.</p>\n<h2>Non-unit types as union discriminants</h2>\n<p>TypeScript 3.2 makes narrowing easier by relaxing rules for what it considers a discriminant property.\nCommon properties of unions are now considered discriminants as long as they contain <em>some</em> singleton type (e.g. a string literal, <code class=\"language-text\">null</code>, or <code class=\"language-text\">undefined</code>), and they contain no generics.</p>\n<p>As a result, TypeScript 3.2 considers the <code class=\"language-text\">error</code> property in the following example to be a discriminant, whereas before it wouldn’t since <code class=\"language-text\">Error</code> isn’t a singleton type.\nThanks to this, narrowing works correctly in the body of the <code class=\"language-text\">unwrap</code> function.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Result<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span>\n    <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">:</span> Error<span class=\"token punctuation\">;</span> data<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> data<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> unwrap<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">:</span> Result<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Here 'error' is non-null</span>\n        <span class=\"token keyword\">throw</span> result<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Now 'data' is non-null</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2><code class=\"language-text\">tsconfig.json</code> inheritance via Node.js packages</h2>\n<p>TypeScript 3.2 now resolves <code class=\"language-text\">tsconfig.json</code>s from <code class=\"language-text\">node_modules</code>. When using a bare path for the <code class=\"language-text\">&quot;extends&quot;</code> field in <code class=\"language-text\">tsconfig.json</code>, TypeScript will dive into <code class=\"language-text\">node_modules</code> packages for us.</p>\n<div class=\"gatsby-highlight\" data-language=\"json5\"><pre class=\"language-json5\"><code class=\"language-json5\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@my-team/tsconfig-base\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./**/*\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Override certain options on a project-by-project basis.</span>\n        <span class=\"token property\">\"strictBindCallApply\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here, TypeScript will climb up <code class=\"language-text\">node_modules</code> folders looking for a <code class=\"language-text\">@my-team/tsconfig-base</code> package. For each of those packages, TypeScript will first check whether <code class=\"language-text\">package.json</code> contains a <code class=\"language-text\">&quot;tsconfig&quot;</code> field, and if it does, TypeScript will try to load a configuration file from that field. If neither exists, TypeScript will try to read from a <code class=\"language-text\">tsconfig.json</code> at the root. This is similar to the lookup process for <code class=\"language-text\">.js</code> files in packages that Node uses, and the <code class=\"language-text\">.d.ts</code> lookup process that TypeScript already uses.</p>\n<p>This feature can be extremely useful for bigger organizations, or projects with lots of distributed dependencies.</p>\n<h2>The new <code class=\"language-text\">--showConfig</code> flag</h2>\n<p><code class=\"language-text\">tsc</code>, the TypeScript compiler, supports a new flag called <code class=\"language-text\">--showConfig</code>.\nWhen running <code class=\"language-text\">tsc --showConfig</code>, TypeScript will calculate the effective <code class=\"language-text\">tsconfig.json</code> (after calculating options inherited from the <code class=\"language-text\">extends</code> field) and print that out.\nThis can be useful for diagnosing configuration issues in general.</p>\n<h2><code class=\"language-text\">Object.defineProperty</code> declarations in JavaScript</h2>\n<p>When writing in JavaScript files (using <code class=\"language-text\">allowJs</code>), TypeScript now recognizes declarations that use <code class=\"language-text\">Object.defineProperty</code>.\nThis means you’ll get better completions, and stronger type-checking when enabling type-checking in JavaScript files (by turning on the <code class=\"language-text\">checkJs</code> option or adding a <code class=\"language-text\">// @ts-check</code> comment to the top of your file).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// @ts-check</span>\n\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> writable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">toLowercase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//    ~~~~~~~~~~~</span>\n<span class=\"token comment\">//    error:</span>\n<span class=\"token comment\">//     Property 'toLowercase' does not exist on type 'string'.</span>\n<span class=\"token comment\">//     Did you mean 'toLowerCase'?</span>\n\nobj<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//  ~</span>\n<span class=\"token comment\">//  error:</span>\n<span class=\"token comment\">//   Cannot assign to 'x' because it is a read-only property.</span></code></pre></div>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-3-2.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/release-notes/typescript-3-2.html","isOldHandbook":true}}}