{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/release-notes/typescript-2-7.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"a98f8cf2-2c34-5c98-847f-80a55bbf25b6","excerpt":"{% raw %}## Constant-named properties TypeScript 2.7 adds support for declaring const-named properties on types including ECMAScript symbols. Example This also…","html":"<p>{% raw %}## Constant-named properties</p>\n<p>TypeScript 2.7 adds support for declaring const-named properties on types including ECMAScript symbols.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Lib</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">SERIALIZE</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"serialize-method-key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">SERIALIZE</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// consumer</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">SERIALIZE</span><span class=\"token punctuation\">,</span> Serializable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"lib\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">JSONSerializableItem</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">SERIALIZE</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This also applies to numeric and string literals.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> Foo <span class=\"token operator\">=</span> <span class=\"token string\">\"Foo\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Bar <span class=\"token operator\">=</span> <span class=\"token string\">\"Bar\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>Foo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>Bar<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> x<span class=\"token punctuation\">[</span>Foo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// has type 'number'</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> x<span class=\"token punctuation\">[</span>Bar<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// has type 'string'</span></code></pre></div>\n<h2><code class=\"language-text\">unique symbol</code></h2>\n<p>To enable treating symbols as unique literals  a new type <code class=\"language-text\">unique symbol</code> is available.\n<code class=\"language-text\">unique symbol</code> is a subtype of <code class=\"language-text\">symbol</code>, and are produced only from calling <code class=\"language-text\">Symbol()</code> or <code class=\"language-text\">Symbol.for()</code>, or from explicit type annotations.\nThe new type is only allowed on <code class=\"language-text\">const</code> declarations and <code class=\"language-text\">readonly static</code> properties, and in order to reference a specific unique symbol, you’ll have to use the <code class=\"language-text\">typeof</code> operator.\nEach reference to a <code class=\"language-text\">unique symbol</code> implies a completely unique identity that’s tied to a given declaration.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Works</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">const</span> Foo<span class=\"token punctuation\">:</span> unique <span class=\"token builtin\">symbol</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Error! 'Bar' isn't a constant.</span>\n<span class=\"token keyword\">let</span> Bar<span class=\"token punctuation\">:</span> unique <span class=\"token builtin\">symbol</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Works - refers to a unique symbol, but its identity is tied to 'Foo'.</span>\n<span class=\"token keyword\">let</span> Baz<span class=\"token punctuation\">:</span> <span class=\"token keyword\">typeof</span> Foo <span class=\"token operator\">=</span> Foo<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Also works.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> StaticSymbol<span class=\"token punctuation\">:</span> unique <span class=\"token builtin\">symbol</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Because each <code class=\"language-text\">unique symbol</code> has a completely separate identity, no two <code class=\"language-text\">unique symbol</code> types are assignable or comparable to each other.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> Foo <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Bar <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Error: can't compare two unique symbols.</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Foo <span class=\"token operator\">===</span> Bar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Strict Class Initialization</h2>\n<p>TypeScript 2.7 introduces a new flag called <code class=\"language-text\">--strictPropertyInitialization</code>.\nThis flag performs checks to ensure that each instance property of a class gets initialized in the constructor body, or by a property initializer.\nFor example</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>\n    foo<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    bar <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n    baz<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//  ~~~</span>\n<span class=\"token comment\">//  Error! Property 'baz' has no initializer and is not definitely assigned in the</span>\n<span class=\"token comment\">//         constructor.</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the above, if we truly meant for <code class=\"language-text\">baz</code> to potentially be <code class=\"language-text\">undefined</code>, we should have declared it with the type <code class=\"language-text\">boolean | undefined</code>.</p>\n<p>There are certain scenarios where properties can be initialized indirectly (perhaps by a helper method or dependency injection library), in which case you can use the new <em>definite assignment assertion modifiers</em> for your properties (discussed below).</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>\n    foo<span class=\"token operator\">!</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ^</span>\n    <span class=\"token comment\">// Notice this '!' modifier.</span>\n    <span class=\"token comment\">// This is the \"definite assignment assertion\"</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Keep in mind that <code class=\"language-text\">--strictPropertyInitialization</code> will be turned on along with other <code class=\"language-text\">--strict</code> mode flags, which can impact your project.\nYou can set the <code class=\"language-text\">strictPropertyInitialization</code> setting to <code class=\"language-text\">false</code> in your <code class=\"language-text\">tsconfig.json</code>’s <code class=\"language-text\">compilerOptions</code>, or <code class=\"language-text\">--strictPropertyInitialization false</code> on the command line to turn off this checking.</p>\n<h2>Definite Assignment Assertions</h2>\n<p>The definite assignment assertion is a feature that allows a <code class=\"language-text\">!</code> to be placed after instance property and variable declarations to relay to TypeScript that a variable is indeed assigned for all intents and purposes, even if TypeScript’s analyses cannot detect so.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//          ~   ~</span>\n<span class=\"token comment\">// Error! Variable 'x' is used before being assigned.</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With definite assignment assertions, we can assert that <code class=\"language-text\">x</code> is really assigned by appending an <code class=\"language-text\">!</code> to its declaration:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Notice the '!'</span>\n<span class=\"token keyword\">let</span> x<span class=\"token operator\">!</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// No error!</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In a sense, the definite assignment assertion operator is the dual of the non-null assertion operator (in which <em>expressions</em> are post-fixed with a <code class=\"language-text\">!</code>), which we could also have used in the example.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// No error!</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">!</span> <span class=\"token operator\">+</span> x<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In our example, we knew that all uses of <code class=\"language-text\">x</code> would be initialized so it makes more sense to use definite assignment assertions than non-null assertions.</p>\n<h2>Fixed Length Tuples</h2>\n<p>In TypeScript 2.6 and earlier, <code class=\"language-text\">[number, string, string]</code> was considered a subtype of <code class=\"language-text\">[number, string]</code>.\nThis was motivated by TypeScript’s structural nature; the first and second elements of a <code class=\"language-text\">[number, string, string]</code> are respectively subtypes of the first and second elements of <code class=\"language-text\">[number, string]</code>.\nHowever, after examining real world usage of tuples, we noticed that most situations in which this was permitted was typically undesirable.</p>\n<p>In TypeScript 2.7, tuples of different arities are no longer assignable to each other.\nThanks to a pull request from <a href=\"https://github.com/tycho01\">Tycho Grouwstra</a>, tuple types now encode their arity into the type of their respective <code class=\"language-text\">length</code> property.\nThis is accomplished by leveraging numeric literal types, which now allow tuples to be distinct from tuples of different arities.</p>\n<p>Conceptually, you might consider the type <code class=\"language-text\">[number, string]</code> to be equivalent to the following declaration of <code class=\"language-text\">NumStrTuple</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">NumStrTuple</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    length<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// using the numeric literal type '2'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that this is a breaking change for some code.\nIf you need to resort to the original behavior in which tuples only enforce a minimum length, you can use a similar declaration that does not explicitly define a <code class=\"language-text\">length</code> property, falling back to <code class=\"language-text\">number</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">MinimumNumStrTuple</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that this does not imply tuples represent immutable arrays, but it is an implied convention.</p>\n<h2>Improved type inference for object literals</h2>\n<p>TypeScript 2.7 improves type inference for multiple object literals occurring in the same context.\nWhen multiple object literal types contribute to a union type, we now <em>normalize</em> the object literal types such that all properties are present in each constituent of the union type.</p>\n<p>Consider:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> test <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token string\">\"hello\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// { text: string } | { text?: undefined }</span>\n<span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string | undefined</span></code></pre></div>\n<p>Previously type <code class=\"language-text\">{}</code> was inferred for <code class=\"language-text\">obj</code> and the second line subsequently caused an error because <code class=\"language-text\">obj</code> would appear to have no properties.\nThat obviously wasn’t ideal.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// let obj: { a: number, b: number } |</span>\n<span class=\"token comment\">//     { a: string, b?: undefined } |</span>\n<span class=\"token comment\">//     { a?: undefined, b?: undefined }</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token string\">\"abc\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string | number | undefined</span>\nobj<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// number | undefined</span></code></pre></div>\n<p>Multiple object literal type inferences for the same type parameter are similarly collapsed into a single normalized union type:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> f<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>items<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// let obj: { a: number, b: number } |</span>\n<span class=\"token comment\">//     { a: string, b?: undefined } |</span>\n<span class=\"token comment\">//     { a?: undefined, b?: undefined }</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token string\">\"abc\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string | number | undefined</span>\nobj<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// number | undefined</span></code></pre></div>\n<h2>Improved handling of structurally identical classes and <code class=\"language-text\">instanceof</code> expressions</h2>\n<p>TypeScript 2.7 improves the handling of structurally identical classes in union types and <code class=\"language-text\">instanceof</code> expressions:</p>\n<ul>\n<li>Structurally identical, but distinct, class types are now preserved in union types (instead of eliminating all but one).</li>\n<li>Union type subtype reduction only removes a class type if it is a subclass of <em>and</em> derives from another class type in the union.</li>\n<li>Type checking of the <code class=\"language-text\">instanceof</code> operator is now based on whether the type of the left operand <em>derives from</em> the type indicated by the right operand (as opposed to a structural subtype check).</li>\n</ul>\n<p>This means that union types and <code class=\"language-text\">instanceof</code> properly distinguish between structurally identical classes.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span> c<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">D</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> x1 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token boolean\">true</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// A</span>\n<span class=\"token keyword\">let</span> x2 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token boolean\">true</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// B | C (previously B)</span>\n<span class=\"token keyword\">let</span> x3 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token boolean\">true</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">D</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// C | D (previously C)</span>\n\n<span class=\"token keyword\">let</span> a1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">D</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// A[]</span>\n<span class=\"token keyword\">let</span> a2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">D</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// (B | C | D)[] (previously B[])</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token constant\">B</span> <span class=\"token operator\">|</span> <span class=\"token constant\">C</span> <span class=\"token operator\">|</span> <span class=\"token constant\">D</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        x<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// B (previously B | D)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        x<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// C</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        x<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// D (previously never)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Type guards inferred from  <code class=\"language-text\">in</code> operator</h2>\n<p>The <code class=\"language-text\">in</code> operator now acts as a narrowing expression for types.</p>\n<p>For a <code class=\"language-text\">n in x</code> expression, where <code class=\"language-text\">n</code> is a string literal or string literal type and <code class=\"language-text\">x</code> is a union type, the “true” branch narrows to types which have an optional or required property <code class=\"language-text\">n</code>, and the “false” branch narrows to types which have an optional or missing property <code class=\"language-text\">n</code>.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{</span> b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token constant\">A</span> <span class=\"token operator\">|</span> <span class=\"token constant\">B</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span> <span class=\"token keyword\">in</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Support for <code class=\"language-text\">import d from &quot;cjs&quot;</code> from CommonJS modules with <code class=\"language-text\">--esModuleInterop</code></h2>\n<p>TypeScript 2.7 updates CommonJS/AMD/UMD module emit to synthesize namespace records based on the presence of an <code class=\"language-text\">__esModule</code> indicator under <code class=\"language-text\">--esModuleInterop</code>.\nThe change brings the generated output from TypeScript closer to that generated by Babel.</p>\n<p>Previously CommonJS/AMD/UMD modules were treated in the same way as ES6 modules, resulting in a couple of problems. Namely:</p>\n<ul>\n<li>TypeScript treats a namespace import (i.e. <code class=\"language-text\">import * as foo from &quot;foo&quot;</code>) for a CommonJS/AMD/UMD module as equivalent to <code class=\"language-text\">const foo = require(&quot;foo&quot;)</code>.Things are simple here, but they don’t work out if the primary object being imported is a primitive or a class or a function. ECMAScript spec stipulates that a namespace record is a plain object, and that a namespace import (<code class=\"language-text\">foo</code> in the example above) is not callable, though allowed by TypeScript</li>\n<li>Similarly a default import (i.e. <code class=\"language-text\">import d from &quot;foo&quot;</code>) for a CommonJS/AMD/UMD module as equivalent to <code class=\"language-text\">const d = require(&quot;foo&quot;).default</code>.Most of the CommonJS/AMD/UMD modules available today do not have a <code class=\"language-text\">default</code> export, making this import pattern practically unusable to import non-ES modules (i.e. CommonJS/AMD/UMD). For instance <code class=\"language-text\">import fs from &quot;fs&quot;</code> or <code class=\"language-text\">import express from &quot;express&quot;</code> are not allowed.</li>\n</ul>\n<p>Under the new <code class=\"language-text\">--esModuleInterop</code> these two issues should be addressed:</p>\n<ul>\n<li>A namespace import (i.e. <code class=\"language-text\">import * as foo from &quot;foo&quot;</code>) is now correctly flagged as uncallable. Calling it will result in an error.</li>\n<li>Default imports to CommonJS/AMD/UMD are now allowed (e.g. <code class=\"language-text\">import fs from &quot;fs&quot;</code>), and should work as expected.</li>\n</ul>\n<blockquote>\n<p>Note: The new behavior is added under a flag to avoid unwarranted breaks to existing code bases. <strong>We highly recommend applying it both to new and existing projects.</strong>\nFor existing projects, namespace imports (<code class=\"language-text\">import * as express from &quot;express&quot;; express();</code>) will need to be converted to default imports (<code class=\"language-text\">import express from &quot;express&quot;; express();</code>).</p>\n</blockquote>\n<h5>Example</h5>\n<p>With <code class=\"language-text\">--esModuleInterop</code> two new helpers are generated <code class=\"language-text\">__importStar</code> and <code class=\"language-text\">__importDefault</code> for import <code class=\"language-text\">*</code> and import <code class=\"language-text\">default</code> respectively.\nFor instance input like:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> foo <span class=\"token keyword\">from</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> b <span class=\"token keyword\">from</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Will generate:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> __importStar <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>__importStar<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">mod</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mod <span class=\"token operator\">&amp;&amp;</span> mod<span class=\"token punctuation\">.</span>__esModule<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> mod<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mod <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> k <span class=\"token keyword\">in</span> mod<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> result<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mod<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">[</span><span class=\"token string\">\"default\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mod<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> __importDefault <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>__importDefault<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">mod</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>mod <span class=\"token operator\">&amp;&amp;</span> mod<span class=\"token punctuation\">.</span>__esModule<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> mod <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"default\"</span><span class=\"token punctuation\">:</span> mod <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nexports<span class=\"token punctuation\">.</span>__esModule <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token function\">__importStar</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> bar_1 <span class=\"token operator\">=</span> <span class=\"token function\">__importDefault</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Numeric separators</h2>\n<p>TypeScript 2.7 brings support for <a href=\"https://github.com/tc39/proposal-numeric-separator\">ES Numeric Separators</a>.\nNumeric literals can now be separated into segments using <code class=\"language-text\">_</code>.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> million <span class=\"token operator\">=</span> <span class=\"token number\">1_000_000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> phone <span class=\"token operator\">=</span> <span class=\"token number\">555_734_2231</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bytes <span class=\"token operator\">=</span> <span class=\"token number\">0xFF_0C_00_FF</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> word <span class=\"token operator\">=</span> <span class=\"token number\">0b1100_0011_1101_0001</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Cleaner output in <code class=\"language-text\">--watch</code> mode</h2>\n<p>TypeScript’s <code class=\"language-text\">--watch</code> mode now clears the screen after a re-compilation is requested.</p>\n<h2>Prettier <code class=\"language-text\">--pretty</code> output</h2>\n<p>TypeScript’s <code class=\"language-text\">--pretty</code> flag can make error messages easier to read and manage.\n<code class=\"language-text\">--pretty</code> now uses colors for file names, diagnostic codes, and line numbers.\nFile names and positions are now also formatted to allow navigation in common terminals (e.g. Visual Studio Code terminal).</p>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-2-7.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/release-notes/typescript-2-7.html","isOldHandbook":true}}}