{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/release-notes/typescript-2-6.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"f7db0432-9cfe-5aa9-a140-fa69eac60131","excerpt":"{% raw %}## Strict function types TypeScript 2.6 introduces a new strict checking flag, .\nThe  switch is part of the  family of switches, meaning that it…","html":"<p>{% raw %}## Strict function types</p>\n<p>TypeScript 2.6 introduces a new strict checking flag, <code class=\"language-text\">--strictFunctionTypes</code>.\nThe <code class=\"language-text\">--strictFunctionTypes</code> switch is part of the <code class=\"language-text\">--strict</code> family of switches, meaning that it defaults to on in <code class=\"language-text\">--strict</code> mode.\nYou can opt-out by setting <code class=\"language-text\">--strictFunctionTypes false</code> on your command line or in your tsconfig.json.</p>\n<p>Under <code class=\"language-text\">--strictFunctionTypes</code> function type parameter positions are checked <em>contravariantly</em> instead of <em>bivariantly</em>.\nFor some background on what variance means for function types check out <a href=\"https://www.stephanboyer.com/post/132/what-are-covariance-and-contravariance\">What are covariance and contravariance?</a>.</p>\n<p>The stricter checking applies to all function types, <em>except</em> those originating in method or constructor declarations.\nMethods are excluded specifically to ensure generic classes and interfaces (such as <code class=\"language-text\">Array&lt;T&gt;</code>) continue to mostly relate covariantly.</p>\n<p>Consider the following example in which <code class=\"language-text\">Animal</code> is the supertype of <code class=\"language-text\">Dog</code> and <code class=\"language-text\">Cat</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">f1</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> Animal</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">f2</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> Dog</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">f3</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> Cat</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\nf1 <span class=\"token operator\">=</span> f2<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error with --strictFunctionTypes</span>\nf2 <span class=\"token operator\">=</span> f1<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Ok</span>\nf2 <span class=\"token operator\">=</span> f3<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span></code></pre></div>\n<p>The first assignment is permitted in default type checking mode, but flagged as an error in strict function types mode.\nIntuitively, the default mode permits the assignment because it is <em>possibly</em> sound, whereas strict function types mode makes it an error because it isn’t <em>provably</em> sound.\nIn either mode the third assignment is an error because it is <em>never</em> sound.</p>\n<p>Another way to describe the example is that the type <code class=\"language-text\">(x: T) =&gt; void</code> is <em>bivariant</em> (i.e. covariant <em>or</em> contravariant) for <code class=\"language-text\">T</code> in default type checking mode, but <em>contravariant</em> for <code class=\"language-text\">T</code> in strict function types mode.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Comparer</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">compare</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">let</span> animalComparer<span class=\"token punctuation\">:</span> Comparer<span class=\"token operator\">&lt;</span>Animal<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">let</span> dogComparer<span class=\"token punctuation\">:</span> Comparer<span class=\"token operator\">&lt;</span>Dog<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\nanimalComparer <span class=\"token operator\">=</span> dogComparer<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\ndogComparer <span class=\"token operator\">=</span> animalComparer<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Ok</span></code></pre></div>\n<p>The first assignment is now an error. Effectively, <code class=\"language-text\">T</code> is contravariant in <code class=\"language-text\">Comparer&lt;T&gt;</code> because it is used only in function type parameter positions.</p>\n<p>By the way, note that whereas some languages (e.g. C# and Scala) require variance annotations (<code class=\"language-text\">out</code>/<code class=\"language-text\">in</code> or <code class=\"language-text\">+</code>/<code class=\"language-text\">-</code>), variance emerges naturally from the actual use of a type parameter within a generic type due to TypeScript’s structural type system.</p>\n<h5>Note</h5>\n<p>Under <code class=\"language-text\">--strictFunctionTypes</code> the first assignment is still permitted if <code class=\"language-text\">compare</code> was declared as a method.\nEffectively, <code class=\"language-text\">T</code> is bivariant in <code class=\"language-text\">Comparer&lt;T&gt;</code> because it is used only in method parameter positions.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Comparer</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">let</span> animalComparer<span class=\"token punctuation\">:</span> Comparer<span class=\"token operator\">&lt;</span>Animal<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">let</span> dogComparer<span class=\"token punctuation\">:</span> Comparer<span class=\"token operator\">&lt;</span>Dog<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\nanimalComparer <span class=\"token operator\">=</span> dogComparer<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Ok because of bivariance</span>\ndogComparer <span class=\"token operator\">=</span> animalComparer<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Ok</span></code></pre></div>\n<p>TypeScript 2.6 also improves type inference involving contravariant positions:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> combine<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>funcs<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> f <span class=\"token keyword\">of</span> funcs<span class=\"token punctuation\">)</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">animalFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> Animal</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">dogFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> Dog</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> combined <span class=\"token operator\">=</span> <span class=\"token function\">combine</span><span class=\"token punctuation\">(</span>animalFunc<span class=\"token punctuation\">,</span> dogFunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// (x: Dog) => void</span></code></pre></div>\n<p>Above, all inferences for <code class=\"language-text\">T</code> originate in contravariant positions, and we therefore infer the <em>best common subtype</em> for <code class=\"language-text\">T</code>.\nThis contrasts with inferences from covariant positions, where we infer the <em>best common supertype</em>.</p>\n<h2>Cache tagged template objects in modules</h2>\n<p>TypeScript 2.6 fixes the tagged string template emit to align better with the ECMAScript spec.\nAs per the <a href=\"https://tc39.github.io/ecma262/#sec-gettemplateobject\">ECMAScript spec</a>, every time a template tag is evaluated, the <em>same</em> template strings object (the same <code class=\"language-text\">TemplateStringsArray</code>) should be passed as the first argument.\nBefore TypeScript 2.6, the generated output was a completely new template object each time.\nThough the string contents are the same, this emit affects libraries that use the identity of the string for cache invalidation purposes, e.g. <a href=\"https://github.com/PolymerLabs/lit-html/issues/58\">lit-html</a>.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> TemplateStringsArray</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">templateObjectFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> id<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello world</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">templateObjectFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token function\">templateObjectFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true in TS 2.6</span></code></pre></div>\n<p>Results in the following generated code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> __makeTemplateObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>__makeTemplateObject<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">cooked<span class=\"token punctuation\">,</span> raw</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span>defineProperty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>cooked<span class=\"token punctuation\">,</span> <span class=\"token string\">\"raw\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> raw <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> cooked<span class=\"token punctuation\">.</span>raw <span class=\"token operator\">=</span> raw<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> cooked<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> _a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">templateObjectFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">id</span><span class=\"token punctuation\">(</span>_a <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>_a <span class=\"token operator\">=</span> <span class=\"token function\">__makeTemplateObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token function\">templateObjectFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token function\">templateObjectFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>Note: This change brings a new emit helper, <code class=\"language-text\">__makeTemplateObject</code>;\nif you are using <code class=\"language-text\">--importHelpers</code> with <a href=\"https://github.com/Microsoft/tslib\"><code class=\"language-text\">tslib</code></a>, an updated to version 1.8 or later.</p>\n</blockquote>\n<h2>Localized diagnostics on the command line</h2>\n<p>TypeScript 2.6 npm package ships with localized versions of diagnostic messages for 13 languages.\nThe localized messages are available when using <code class=\"language-text\">--locale</code> flag on the command line.</p>\n<h5>Example</h5>\n<p>Error messages in Russian:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">c:\\ts&gt;tsc --v\nVersion 2.6.0-dev.20171003\n\nc:\\ts&gt;tsc --locale ru --pretty c:\\test\\a.ts\n\n../test/a.ts(1,5): error TS2322: Тип &quot;&quot;string&quot;&quot; не может быть назначен для типа &quot;number&quot;.\n\n1 var x: number = &quot;string&quot;;\n      ~</code></pre></div>\n<p>And help in Japanese:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">PS C:\\ts&gt; tsc --v\nVersion 2.6.0-dev.20171003\n\nPS C:\\ts&gt; tsc --locale ja-jp\nバージョン 2.6.0-dev.20171003\n構文: tsc [オプション] [ファイル ...]\n\n例:  tsc hello.ts\n    tsc --outFile file.js file.ts\n    tsc @args.txt\n\nオプション:\n -h, --help                                 このメッセージを表示します。\n --all                                      コンパイラ オプションをすべて表示します。\n -v, --version                              コンパイラのバージョンを表示します。\n --init                                     TypeScript プロジェクトを初期化して、tsconfig.json ファイルを作成します。\n -p ファイルまたはディレクトリ, --project ファイルまたはディレクトリ  構成ファイルか、&#39;tsconfig.json&#39; を含むフォルダーにパスが指定されたプロジェクトをコ\nンパイルします。\n --pretty                                   色とコンテキストを使用してエラーとメッセージにスタイルを適用します (試験的)。\n -w, --watch                                入力ファイルを監視します。\n -t バージョン, --target バージョン                   ECMAScript のターゲット バージョンを指定します: &#39;ES3&#39; (既定)、&#39;ES5&#39;、&#39;ES2015&#39;、&#39;ES2016&#39;、&#39;ES2017&#39;、&#39;ES\nNEXT&#39;。\n -m 種類, --module 種類                         モジュール コード生成を指定します: &#39;none&#39;、&#39;commonjs&#39;、&#39;amd&#39;、&#39;system&#39;、&#39;umd&#39;、&#39;es2015&#39;、&#39;ESNext&#39;。\n --lib                                      コンパイルに含めるライブラリ ファイルを指定します:\n                                              &#39;es5&#39; &#39;es6&#39; &#39;es2015&#39; &#39;es7&#39; &#39;es2016&#39; &#39;es2017&#39; &#39;esnext&#39; &#39;dom&#39; &#39;dom.iterable&#39; &#39;webworker&#39; &#39;scripthost&#39; &#39;es201\n5.core&#39; &#39;es2015.collection&#39; &#39;es2015.generator&#39; &#39;es2015.iterable&#39; &#39;es2015.promise&#39; &#39;es2015.proxy&#39; &#39;es2015.reflect&#39; &#39;es2015.symbol&#39; &#39;es2015.symbol.wellkno\nwn&#39; &#39;es2016.array.include&#39; &#39;es2017.object&#39; &#39;es2017.sharedmemory&#39; &#39;es2017.string&#39; &#39;es2017.intl&#39; &#39;esnext.asynciterable&#39;\n --allowJs                                  javascript ファイルのコンパイルを許可します。\n --jsx 種類                                   JSX コード生成を指定します: &#39;preserve&#39;、&#39;react-native&#39;、&#39;react&#39;。\n -d, --declaration                          対応する &#39;.d.ts&#39; ファイルを生成します。\n --sourceMap                                対応する &#39;.map&#39; ファイルを生成します。\n --outFile ファイル                             出力を連結して 1 つのファイルを生成します。\n --outDir ディレクトリ                            ディレクトリへ出力構造をリダイレクトします。\n --removeComments                           コメントを出力しないでください。\n --noEmit                                   出力しないでください。\n --strict                                   strict 型チェックのオプションをすべて有効にします。\n --noImplicitAny                            暗黙的な &#39;any&#39; 型を含む式と宣言に関するエラーを発生させます。\n --strictNullChecks                         厳格な null チェックを有効にします。\n --noImplicitThis                           暗黙的な &#39;any&#39; 型を持つ &#39;this&#39; 式でエラーが発生します。\n --alwaysStrict                             厳格モードで解析してソース ファイルごとに &quot;use strict&quot; を生成します。\n --noUnusedLocals                           使用されていないローカルに関するエラーを報告します。\n --noUnusedParameters                       使用されていないパラメーターに関するエラーを報告します。\n --noImplicitReturns                        関数の一部のコード パスが値を返さない場合にエラーを報告します。\n --noFallthroughCasesInSwitch               switch ステートメントに case のフォールスルーがある場合にエラーを報告します。\n --types                                    コンパイルに含む型宣言ファイル。\n @&lt;ファイル&gt;</code></pre></div>\n<h2>Suppress errors in .ts files using ’// @ts-ignore’ comments</h2>\n<p>TypeScript 2.6 support suppressing errors in .js files using <code class=\"language-text\">// @ts-ignore</code> comments placed above the offending lines.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// @ts-ignore: Unreachable code error</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A <code class=\"language-text\">// @ts-ignore</code> comment suppresses all errors that originate on the following line.\nIt is recommended practice to have the remainder of the comment following <code class=\"language-text\">@ts-ignore</code> explain which error is being suppressed.</p>\n<p>Please note that this comment only suppresses the error reporting, and we recommend you use this comments <em>very sparingly</em>.</p>\n<h2>Faster <code class=\"language-text\">tsc --watch</code></h2>\n<p>TypeScript 2.6 brings a faster <code class=\"language-text\">--watch</code> implementation.\nThe new version optimizes code generation and checking for code bases using ES modules.\nChanges detected in a module file will result in <em>only</em> regenerating the changed module, and files that depend on it, instead of the whole project.\nProjects with large number of files should reap the most benefit from this change.</p>\n<p>The new implementation also brings performance enhancements to watching in tsserver.\nThe watcher logic has been completely rewritten to respond faster to change events.</p>\n<h2>Write-only references now flagged as unused</h2>\n<p>TypeScript 2.6 adds revised implementation  the <code class=\"language-text\">--noUnusedLocals</code> and <code class=\"language-text\">--noUnusedParameters</code> <a href=\"https://www.typescriptlang.org/docs/handbook/compiler-options.html\">compiler options</a>.\nDeclarations are only written to but never read from are now flagged as unused.</p>\n<h5>Example</h5>\n<p>Bellow both <code class=\"language-text\">n</code> and <code class=\"language-text\">m</code> will be marked as unused, because their values are never <em>read</em>. Previously TypeScript would only check whether their values were <em>referenced</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> m<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>m <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Also functions that are only called within their own bodies are considered unused.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error: 'f' is declared but its value is never read</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-2-6.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/release-notes/typescript-2-6.html","isOldHandbook":true}}}