{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/release-notes/typescript-2-9.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"bd1f05dc-6504-5778-8e15-ec35608c41fb","excerpt":"{% raw %}## Support  and  named properties with  and mapped types TypeScript 2.9 adds support for  and  named properties in index types and mapped typesâ€¦","html":"<p>{% raw %}## Support <code class=\"language-text\">number</code> and <code class=\"language-text\">symbol</code> named properties with <code class=\"language-text\">keyof</code> and mapped types</p>\n<p>TypeScript 2.9 adds support for <code class=\"language-text\">number</code> and <code class=\"language-text\">symbol</code> named properties in index types and mapped types.\nPreviously, the <code class=\"language-text\">keyof</code> operator and mapped types only supported <code class=\"language-text\">string</code> named properties.</p>\n<p>Changes include:</p>\n<ul>\n<li>An index type <code class=\"language-text\">keyof T</code> for some type <code class=\"language-text\">T</code> is a subtype of <code class=\"language-text\">string | number | symbol</code>.</li>\n<li>A mapped type <code class=\"language-text\">{ [P in K]: XXX }</code> permits any <code class=\"language-text\">K</code> assignable to <code class=\"language-text\">string | number | symbol</code>.</li>\n<li>In a <code class=\"language-text\">for...in</code> statement for an object of a generic type <code class=\"language-text\">T</code>, the inferred type of the iteration variable was previously <code class=\"language-text\">keyof T</code> but is now <code class=\"language-text\">Extract&lt;keyof T, string&gt;</code>. (In other words, the subset of <code class=\"language-text\">keyof T</code> that includes only string-like values.)</li>\n</ul>\n<p>Given an object type <code class=\"language-text\">X</code>, <code class=\"language-text\">keyof X</code> is resolved as follows:</p>\n<ul>\n<li>If <code class=\"language-text\">X</code> contains a string index signature, <code class=\"language-text\">keyof X</code> is a union of <code class=\"language-text\">string</code>, <code class=\"language-text\">number</code>, and the literal types representing symbol-like properties, otherwise</li>\n<li>If <code class=\"language-text\">X</code> contains a numeric index signature, <code class=\"language-text\">keyof X</code> is a union of <code class=\"language-text\">number</code> and the literal types representing string-like and symbol-like properties, otherwise</li>\n<li><code class=\"language-text\">keyof X</code> is a union of the literal types representing string-like, number-like, and symbol-like properties.</li>\n</ul>\n<p>Where:</p>\n<ul>\n<li>String-like properties of an object type are those declared using an identifier, a string literal, or a computed property name of a string literal type.</li>\n<li>Number-like properties of an object type are those declared using a numeric literal or computed property name of a numeric literal type.</li>\n<li>Symbol-like properties of an object type are those declared using a computed property name of a unique symbol type.</li>\n</ul>\n<p>In a mapped type <code class=\"language-text\">{ [P in K]: XXX }</code>, each string literal type in <code class=\"language-text\">K</code> introduces a property with a string name, each numeric literal type in <code class=\"language-text\">K</code> introduces a property with a numeric name, and each unique symbol type in <code class=\"language-text\">K</code> introduces a property with a unique symbol name.\nFurthermore, if <code class=\"language-text\">K</code> includes type <code class=\"language-text\">string</code>, a string index signature is introduced, and if <code class=\"language-text\">K</code> includes type <code class=\"language-text\">number</code>, a numeric index signature is introduced.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> d <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> e <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">enum</span> <span class=\"token constant\">E1</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">enum</span> <span class=\"token constant\">E2</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"C\"</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// String-like name</span>\n    <span class=\"token number\">5</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// Number-like name</span>\n    <span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// String-like name</span>\n    <span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Number-like name</span>\n    <span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Symbol-like name</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">E1</span><span class=\"token punctuation\">.</span><span class=\"token constant\">A</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Number-like name</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">E2</span><span class=\"token punctuation\">.</span><span class=\"token constant\">A</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// String-like name</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token constant\">K1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> Foo<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"a\" | 5 | \"c\" | 10 | typeof e | E1.A | E2.A</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">K2</span> <span class=\"token operator\">=</span> Extract<span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> Foo<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"a\" | \"c\" | E2.A</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">K3</span> <span class=\"token operator\">=</span> Extract<span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> Foo<span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 5 | 10 | E1.A</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">K4</span> <span class=\"token operator\">=</span> Extract<span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> Foo<span class=\"token punctuation\">,</span> <span class=\"token builtin\">symbol</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// typeof e</span></code></pre></div>\n<p>Since <code class=\"language-text\">keyof</code> now reflects the presence of a numeric index signature by including type <code class=\"language-text\">number</code> in the key type, mapped types such as <code class=\"language-text\">Partial&lt;T&gt;</code> and <code class=\"language-text\">Readonly&lt;T&gt;</code> work correctly when applied to object types with numeric index signatures:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Arrayish<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    length<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> ReadonlyArrayish<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>Arrayish<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">>></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">const</span> map<span class=\"token punctuation\">:</span> ReadonlyArrayish<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> map<span class=\"token punctuation\">[</span><span class=\"token number\">123</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Previously of type any (or an error with --noImplicitAny)</span></code></pre></div>\n<p>Furthermore, with the <code class=\"language-text\">keyof</code> operatorâ€™s support for <code class=\"language-text\">number</code> and <code class=\"language-text\">symbol</code> named keys, it is now possible to abstract over access to properties of objects that are indexed by numeric literals (such as numeric enum types) and unique symbols.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">enum</span> Enum <span class=\"token punctuation\">{</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> enumToStringMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>Enum<span class=\"token punctuation\">.</span><span class=\"token constant\">A</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Name A\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>Enum<span class=\"token punctuation\">.</span><span class=\"token constant\">B</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Name B\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>Enum<span class=\"token punctuation\">.</span><span class=\"token constant\">C</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Name C\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> sym1 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> sym2 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> sym3 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> symbolToNumberMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>sym1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>sym2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>sym3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token constant\">KE</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> <span class=\"token keyword\">typeof</span> enumToStringMap<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Enum (i.e. Enum.A | Enum.B | Enum.C)</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">KS</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> <span class=\"token keyword\">typeof</span> symbolToNumberMap<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// typeof sym1 | typeof sym2 | typeof sym3</span>\n\n<span class=\"token keyword\">function</span> getValue<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> x1 <span class=\"token operator\">=</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>enumToStringMap<span class=\"token punctuation\">,</span> Enum<span class=\"token punctuation\">.</span><span class=\"token constant\">C</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Returns \"Name C\"</span>\n<span class=\"token keyword\">let</span> x2 <span class=\"token operator\">=</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>symbolToNumberMap<span class=\"token punctuation\">,</span> sym3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Returns 3</span></code></pre></div>\n<p>This is a breaking change; previously, the <code class=\"language-text\">keyof</code> operator and mapped types only supported <code class=\"language-text\">string</code> named properties.\nCode that assumed values typed with <code class=\"language-text\">keyof T</code> were always <code class=\"language-text\">string</code>s, will now be flagged as error.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> useKey<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error: keyof T is not assignable to string</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Recommendations</h4>\n<ul>\n<li>\n<p>If your functions are only able to handle string named property keys, use <code class=\"language-text\">Extract&lt;keyof T, string&gt;</code> in the declaration:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> useKey<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Extract</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// OK</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>If your functions are open to handling all property keys, then the changes should be done down-stream:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> useKey<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">symbol</span> <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>Otherwise use <code class=\"language-text\">--keyofStringsOnly</code> compiler option to disable the new behavior.</li>\n</ul>\n<h2>Generic type arguments in JSX elements</h2>\n<p>JSX elements now allow passing type arguments to generic components.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">GenericComponent</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token operator\">></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    internalProp<span class=\"token punctuation\">:</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>GenericComponent<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span> a<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span> b<span class=\"token operator\">=</span><span class=\"token string\">\"hi\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\n\n<span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>GenericComponent<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span> a<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span> b<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">20</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></code></pre></div>\n<h2>Generic type arguments in generic tagged templates</h2>\n<p>Tagged templates are a form of invocation introduced in ECMAScript 2015.\nLike call expressions, generic functions may be used in a tagged template and TypeScript will infer the type arguments utilized.</p>\n<p>TypeScript 2.9  allows passing generic type arguments to tagged template strings.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> styledComponent<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">:</span> TemplateStringsArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Component<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">MyProps</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nstyledComponent<span class=\"token operator\">&lt;</span>MyProps<span class=\"token operator\">></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  font-size: 1.5em;\n  text-align: center;\n  color: palevioletred;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> tag<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">:</span> TemplateStringsArray<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// inference fails because 'number' and 'string' are both candidates that conflict</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> tag<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token number\">100</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token string\">\"hello\"</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2><code class=\"language-text\">import</code> types</h2>\n<p>Modules can import types declared in other modules. But non-module global scripts cannot access types declared in modules. Enter <code class=\"language-text\">import</code> types.</p>\n<p>Using <code class=\"language-text\">import(&quot;mod&quot;)</code> in a type annotation allows for reaching in a module and accessing its exported declaration without importing it.</p>\n<h5>Example</h5>\n<p>Given a declaration of a class <code class=\"language-text\">Pet</code> in a module file:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// module.d.ts</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">declare</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Pet</span> <span class=\"token punctuation\">{</span>\n   name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Can be used in a non-module file <code class=\"language-text\">global-script.ts</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// global-script.ts</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">adopt</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">:</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./module\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Pet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Adopting </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>p<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">...</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This also works in JSDoc comments to refer to types from other modules in <code class=\"language-text\">.js</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// a.js</span>\n\n<span class=\"token comment\">/**\n * @param p { import(\"./module\").Pet }\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Walking </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>p<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">...</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Relaxing declaration emit visiblity rules</h2>\n<p>With <code class=\"language-text\">import</code> types available, many of the visibility errors reported during declaration file generation can be handled by the compiler without the need to change the input.</p>\n<p>For instance:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createHash <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"crypto\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> hash <span class=\"token operator\">=</span> <span class=\"token function\">createHash</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sha256\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//           ^^^^</span>\n<span class=\"token comment\">// Exported variable 'hash' has or is using name 'Hash' from external module \"crypto\" but cannot be named.</span></code></pre></div>\n<p>With TypeScript 2.9, no errors are reported, and now the generated file looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">declare</span> <span class=\"token keyword\">const</span> hash<span class=\"token punctuation\">:</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"crypto\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Hash<span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Support for <code class=\"language-text\">import.meta</code></h2>\n<p>TypeScript 2.9 introduces support for <code class=\"language-text\">import.meta</code>, a new meta-property as described by the current <a href=\"https://github.com/tc39/proposal-import-meta\">TC39 proposal</a>.</p>\n<p>The type of <code class=\"language-text\">import.meta</code> is the global <code class=\"language-text\">ImportMeta</code> type which is defined in <code class=\"language-text\">lib.es5.d.ts</code>.\nThis interface is extremely limited.\nAdding well-known properties for Node or browsers requires interface merging and possibly a global augmentation depending on the context.</p>\n<h5>Example</h5>\n<p>Assuming that <code class=\"language-text\">__dirname</code> is always available on <code class=\"language-text\">import.meta</code>, the declaration would be done through reopening <code class=\"language-text\">ImportMeta</code> interface:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// node.d.ts</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ImportMeta</span> <span class=\"token punctuation\">{</span>\n    __dirname<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And usage would be:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span>__dirname <span class=\"token comment\">// Has type 'string'</span></code></pre></div>\n<p><code class=\"language-text\">import.meta</code> is only allowed when targeting <code class=\"language-text\">ESNext</code> modules and ECMAScript targets.</p>\n<h2>New <code class=\"language-text\">--resolveJsonModule</code></h2>\n<p>Often in Node.js applications a <code class=\"language-text\">.json</code> is needed. With TypeScript 2.9, <code class=\"language-text\">--resolveJsonModule</code> allows for importing, extracting types from and generating <code class=\"language-text\">.json</code> files.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// settings.json</span>\n\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"repo\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"TypeScript\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"dry\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"debug\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// a.ts</span>\n\n<span class=\"token keyword\">import</span> settings <span class=\"token keyword\">from</span> <span class=\"token string\">\"./settings.json\"</span><span class=\"token punctuation\">;</span>\n\nsettings<span class=\"token punctuation\">.</span>debug <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// OK</span>\nsettings<span class=\"token punctuation\">.</span>dry <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error: Operator '===' cannot be applied boolean and number</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// tsconfig.json</span>\n\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"compilerOptions\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"module\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"resolveJsonModule\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"esModuleInterop\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2><code class=\"language-text\">--pretty</code> output by default</h2>\n<p>Starting TypeScript 2.9 errors are displayed under <code class=\"language-text\">--pretty</code> by default if the output device is applicable for colorful text.\nTypeScript will check if the output steam has <a href=\"https://nodejs.org/api/tty.html\"><code class=\"language-text\">isTty</code></a> property set.</p>\n<p>Use <code class=\"language-text\">--pretty false</code> on the command line or set <code class=\"language-text\">&quot;pretty&quot;: false</code> in your <code class=\"language-text\">tsconfig.json</code> to disable <code class=\"language-text\">--pretty</code> output.</p>\n<h2>New <code class=\"language-text\">--declarationMap</code></h2>\n<p>Enabling <code class=\"language-text\">--declarationMap</code> alongside <code class=\"language-text\">--declaration</code> causes the compiler to emit <code class=\"language-text\">.d.ts.map</code> files alongside the output <code class=\"language-text\">.d.ts</code> files.\nLanguage Services can also now understand these map files, and uses them to map declaration-file based definition locations to their original source, when available.</p>\n<p>In other words, hitting go-to-definition on a declaration from a <code class=\"language-text\">.d.ts</code> file generated with <code class=\"language-text\">--declarationMap</code> will take you to the source file (<code class=\"language-text\">.ts</code>) location where that declaration was defined, and not to the <code class=\"language-text\">.d.ts</code>.</p>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-2-9.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/release-notes/typescript-2-9.html","isOldHandbook":true}}}