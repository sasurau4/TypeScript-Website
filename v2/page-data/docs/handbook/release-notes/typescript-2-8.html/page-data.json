{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/release-notes/typescript-2-8.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"4662f2d3-9065-55c7-8f89-48c33f5aa689","excerpt":"{% raw %}## Conditional Types TypeScript 2.8 introduces conditional types which add the ability to express non-uniform type mappings.\nA conditional type selects…","html":"<p>{% raw %}## Conditional Types</p>\n<p>TypeScript 2.8 introduces <em>conditional types</em> which add the ability to express non-uniform type mappings.\nA conditional type selects one of two possible types based on a condition expressed as a type relationship test:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">U</span> <span class=\"token operator\">?</span> <span class=\"token constant\">X</span> <span class=\"token punctuation\">:</span> <span class=\"token constant\">Y</span></code></pre></div>\n<p>The type above means when <code class=\"language-text\">T</code> is assignable to <code class=\"language-text\">U</code> the type is <code class=\"language-text\">X</code>, otherwise the type is <code class=\"language-text\">Y</code>.</p>\n<p>A conditional type <code class=\"language-text\">T extends U ? X : Y</code> is either <em>resolved</em> to <code class=\"language-text\">X</code> or <code class=\"language-text\">Y</code>, or <em>deferred</em> because the condition depends on one or more type variables.\nWhether to resolve or defer is determined as follows:</p>\n<ul>\n<li>First, given types <code class=\"language-text\">T&#39;</code> and <code class=\"language-text\">U&#39;</code> that are instantiations of <code class=\"language-text\">T</code> and <code class=\"language-text\">U</code> where all occurrences of type parameters are replaced with <code class=\"language-text\">any</code>, if <code class=\"language-text\">T&#39;</code> is not assignable to <code class=\"language-text\">U&#39;</code>, the conditional type is resolved to <code class=\"language-text\">Y</code>. Intuitively, if the most permissive instantiation of <code class=\"language-text\">T</code> is not assignable to the most permissive instantiation of <code class=\"language-text\">U</code>, we know that no instantiation will be and we can just resolve to <code class=\"language-text\">Y</code>.</li>\n<li>Next, for each type variable introduced by an <code class=\"language-text\">infer</code> (more later) declaration within <code class=\"language-text\">U</code> collect a set of candidate types by inferring from <code class=\"language-text\">T</code> to <code class=\"language-text\">U</code> (using the same inference algorithm as type inference for generic functions). For a given <code class=\"language-text\">infer</code> type variable <code class=\"language-text\">V</code>, if any candidates were inferred from co-variant positions, the type inferred for <code class=\"language-text\">V</code> is a union of those candidates. Otherwise, if any candidates were inferred from contra-variant positions, the type inferred for <code class=\"language-text\">V</code> is an intersection of those candidates. Otherwise, the type inferred for <code class=\"language-text\">V</code> is <code class=\"language-text\">never</code>.</li>\n<li>Then, given a type <code class=\"language-text\">T&#39;&#39;</code> that is an instantiation of <code class=\"language-text\">T</code> where all <code class=\"language-text\">infer</code> type variables are replaced with the types inferred in the previous step, if <code class=\"language-text\">T&#39;&#39;</code> is <em>definitely assignable</em> to <code class=\"language-text\">U</code>, the conditional type is resolved to <code class=\"language-text\">X</code>. The definitely assignable relation is the same as the regular assignable relation, except that type variable constraints are not considered. Intuitively, when a type is definitely assignable to another type, we know that it will be assignable for <em>all instantiations</em> of those types.</li>\n<li>Otherwise, the condition depends on one or more type variables and the conditional type is deferred.</li>\n</ul>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> TypeName<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span>\n    <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"string\"</span> <span class=\"token punctuation\">:</span>\n    <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">number</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"number\"</span> <span class=\"token punctuation\">:</span>\n    <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">boolean</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"boolean\"</span> <span class=\"token punctuation\">:</span>\n    <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"undefined\"</span> <span class=\"token punctuation\">:</span>\n    <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Function</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"function\"</span> <span class=\"token punctuation\">:</span>\n    <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T0</span> <span class=\"token operator\">=</span> TypeName<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"string\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T1</span> <span class=\"token operator\">=</span> TypeName<span class=\"token operator\">&lt;</span><span class=\"token string\">\"a\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"string\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T2</span> <span class=\"token operator\">=</span> TypeName<span class=\"token operator\">&lt;</span><span class=\"token boolean\">true</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"boolean\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T3</span> <span class=\"token operator\">=</span> TypeName<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"function\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T4</span> <span class=\"token operator\">=</span> TypeName<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"object\"</span></code></pre></div>\n<h2>Distributive conditional types</h2>\n<p>Conditional types in which the checked type is a naked type parameter are called <em>distributive conditional types</em>.\nDistributive conditional types are automatically distributed over union types during instantiation.\nFor example, an instantiation of <code class=\"language-text\">T extends U ? X : Y</code> with the type argument <code class=\"language-text\">A | B | C</code> for <code class=\"language-text\">T</code> is resolved as <code class=\"language-text\">(A extends U ? X : Y) | (B extends U ? X : Y) | (C extends U ? X : Y)</code>.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token constant\">T10</span> <span class=\"token operator\">=</span> TypeName<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"string\" | \"function\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T12</span> <span class=\"token operator\">=</span> TypeName<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> undefined<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"string\" | \"object\" | \"undefined\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T11</span> <span class=\"token operator\">=</span> TypeName<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"object\"</span></code></pre></div>\n<p>In instantiations of a distributive conditional type <code class=\"language-text\">T extends U ? X : Y</code>, references to <code class=\"language-text\">T</code> within the conditional type are resolved to individual constituents of the union type (i.e. <code class=\"language-text\">T</code> refers to the individual constituents <em>after</em> the conditional type is distributed over the union type).\nFurthermore, references to <code class=\"language-text\">T</code> within <code class=\"language-text\">X</code> have an additional type parameter constraint <code class=\"language-text\">U</code> (i.e. <code class=\"language-text\">T</code> is considered assignable to <code class=\"language-text\">U</code> within <code class=\"language-text\">X</code>).</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> BoxedValue<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> BoxedArray<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> array<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> Boxed<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> BoxedArray<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">:</span> BoxedValue<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T20</span> <span class=\"token operator\">=</span> Boxed<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// BoxedValue&lt;string>;</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T21</span> <span class=\"token operator\">=</span> Boxed<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// BoxedArray&lt;number>;</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T22</span> <span class=\"token operator\">=</span> Boxed<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// BoxedValue&lt;string> | BoxedArray&lt;number>;</span></code></pre></div>\n<p>Notice that <code class=\"language-text\">T</code> has the additional constraint <code class=\"language-text\">any[]</code> within the true branch of <code class=\"language-text\">Boxed&lt;T&gt;</code> and it is therefore possible to refer to the element type of the array as <code class=\"language-text\">T[number]</code>. Also, notice how the conditional type is distributed over the union type in the last example.</p>\n<p>The distributive property of conditional types can conveniently be used to <em>filter</em> union types:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Diff<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">U</span> <span class=\"token operator\">?</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Remove types from T that are assignable to U</span>\n<span class=\"token keyword\">type</span> Filter<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">U</span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Remove types from T that are not assignable to U</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T30</span> <span class=\"token operator\">=</span> Diff<span class=\"token operator\">&lt;</span><span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"b\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"c\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"c\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"f\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"b\" | \"d\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T31</span> <span class=\"token operator\">=</span> Filter<span class=\"token operator\">&lt;</span><span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"b\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"c\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"c\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"f\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"a\" | \"c\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T32</span> <span class=\"token operator\">=</span> Diff<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Function</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string | number</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T33</span> <span class=\"token operator\">=</span> Filter<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Function</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// () => void</span>\n\n<span class=\"token keyword\">type</span> NonNullable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> Diff<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> undefined<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Remove null and undefined from T</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T34</span> <span class=\"token operator\">=</span> NonNullable<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> undefined<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string | number</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T35</span> <span class=\"token operator\">=</span> NonNullable<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> undefined<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string | string[]</span>\n\n<span class=\"token keyword\">function</span> f1<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> NonNullable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    x <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Ok</span>\n    y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> f2<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span> <span class=\"token operator\">|</span> undefined<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> NonNullable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    x <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Ok</span>\n    y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">let</span> s1<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">let</span> s2<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Ok</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Conditional types are particularly useful when combined with mapped types:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> FunctionPropertyNames<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Function</span> <span class=\"token operator\">?</span> <span class=\"token constant\">K</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> FunctionProperties<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> FunctionPropertyNames<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">>></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> NonFunctionPropertyNames<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Function</span> <span class=\"token operator\">?</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">:</span> <span class=\"token constant\">K</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> NonFunctionProperties<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> NonFunctionPropertyNames<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">>></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Part</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    subparts<span class=\"token punctuation\">:</span> Part<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">updatePart</span><span class=\"token punctuation\">(</span>newName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T40</span> <span class=\"token operator\">=</span> FunctionPropertyNames<span class=\"token operator\">&lt;</span>Part<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"updatePart\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T41</span> <span class=\"token operator\">=</span> NonFunctionPropertyNames<span class=\"token operator\">&lt;</span>Part<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"id\" | \"name\" | \"subparts\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T42</span> <span class=\"token operator\">=</span> FunctionProperties<span class=\"token operator\">&lt;</span>Part<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// { updatePart(newName: string): void }</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T43</span> <span class=\"token operator\">=</span> NonFunctionProperties<span class=\"token operator\">&lt;</span>Part<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// { id: number, name: string, subparts: Part[] }</span></code></pre></div>\n<p>Similar to union and intersection types, conditional types are not permitted to reference themselves recursively.\nFor example the following is an error.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> ElementType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> ElementType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span></code></pre></div>\n<h2>Type inference in conditional types</h2>\n<p>Within the <code class=\"language-text\">extends</code> clause of a conditional type, it is now possible to have <code class=\"language-text\">infer</code> declarations that introduce a type variable to be inferred.\nSuch inferred type variables may be referenced in the true branch of the conditional type.\nIt is possible to have multiple <code class=\"language-text\">infer</code> locations for the same type variable.</p>\n<p>For example, the following extracts the return type of a function type:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> infer <span class=\"token constant\">R</span> <span class=\"token operator\">?</span> <span class=\"token constant\">R</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Conditional types can be nested to form a sequence of pattern matches that are evaluated in order:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Unpacked<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span>\n    <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span>infer <span class=\"token constant\">U</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token constant\">U</span> <span class=\"token punctuation\">:</span>\n    <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> infer <span class=\"token constant\">U</span> <span class=\"token operator\">?</span> <span class=\"token constant\">U</span> <span class=\"token punctuation\">:</span>\n    <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Promise</span><span class=\"token operator\">&lt;</span>infer <span class=\"token constant\">U</span><span class=\"token operator\">></span> <span class=\"token operator\">?</span> <span class=\"token constant\">U</span> <span class=\"token punctuation\">:</span>\n    <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T0</span> <span class=\"token operator\">=</span> Unpacked<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T1</span> <span class=\"token operator\">=</span> Unpacked<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T2</span> <span class=\"token operator\">=</span> Unpacked<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T3</span> <span class=\"token operator\">=</span> Unpacked<span class=\"token operator\">&lt;</span><span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">>></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T4</span> <span class=\"token operator\">=</span> Unpacked<span class=\"token operator\">&lt;</span><span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Promise&lt;string></span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T5</span> <span class=\"token operator\">=</span> Unpacked<span class=\"token operator\">&lt;</span>Unpacked<span class=\"token operator\">&lt;</span><span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">>></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string</span></code></pre></div>\n<p>The following example demonstrates how multiple candidates for the same type variable in co-variant positions causes a union type to be inferred:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Foo<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> infer <span class=\"token constant\">U</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> infer <span class=\"token constant\">U</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">?</span> <span class=\"token constant\">U</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T10</span> <span class=\"token operator\">=</span> Foo<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T11</span> <span class=\"token operator\">=</span> Foo<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string | number</span></code></pre></div>\n<p>Likewise, multiple candidates for the same type variable in contra-variant positions causes an intersection type to be inferred:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Bar<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">a</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> infer <span class=\"token constant\">U</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">b</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> infer <span class=\"token constant\">U</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">?</span> <span class=\"token constant\">U</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T20</span> <span class=\"token operator\">=</span> Bar<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">a</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">b</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T21</span> <span class=\"token operator\">=</span> Bar<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">a</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">b</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string &amp; number</span></code></pre></div>\n<p>When inferring from a type with multiple call signatures (such as the type of an overloaded function), inferences are made from the <em>last</em> signature (which, presumably, is the most permissive catch-all case).\nIt is not possible to perform overload resolution based on a list of argument types.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T30</span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> foo<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string | number</span></code></pre></div>\n<p>It is not possible to use <code class=\"language-text\">infer</code> declarations in constraint clauses for regular type parameters:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> infer <span class=\"token constant\">R</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error, not supported</span></code></pre></div>\n<p>However, much the same effect can be obtained by erasing the type variables in the constraint and instead specifying a conditional type:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token function-variable function\">AnyFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AnyFunction</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> infer <span class=\"token constant\">R</span> <span class=\"token operator\">?</span> <span class=\"token constant\">R</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Predefined conditional types</h2>\n<p>TypeScript 2.8 adds several predefined conditional types to <code class=\"language-text\">lib.d.ts</code>:</p>\n<ul>\n<li><code class=\"language-text\">Exclude&lt;T, U&gt;</code> — Exclude from <code class=\"language-text\">T</code> those types that are assignable to <code class=\"language-text\">U</code>.</li>\n<li><code class=\"language-text\">Extract&lt;T, U&gt;</code> — Extract from <code class=\"language-text\">T</code> those types that are assignable to <code class=\"language-text\">U</code>.</li>\n<li><code class=\"language-text\">NonNullable&lt;T&gt;</code> — Exclude <code class=\"language-text\">null</code> and <code class=\"language-text\">undefined</code> from <code class=\"language-text\">T</code>.</li>\n<li><code class=\"language-text\">ReturnType&lt;T&gt;</code> — Obtain the return type of a function type.</li>\n<li><code class=\"language-text\">InstanceType&lt;T&gt;</code> — Obtain the instance type of a constructor function type.</li>\n</ul>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token constant\">T00</span> <span class=\"token operator\">=</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"b\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"c\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"c\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"f\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"b\" | \"d\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T01</span> <span class=\"token operator\">=</span> Extract<span class=\"token operator\">&lt;</span><span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"b\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"c\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"c\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"f\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"a\" | \"c\"</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T02</span> <span class=\"token operator\">=</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Function</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string | number</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T03</span> <span class=\"token operator\">=</span> Extract<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Function</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// () => void</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T04</span> <span class=\"token operator\">=</span> NonNullable<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> undefined<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string | number</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T05</span> <span class=\"token operator\">=</span> NonNullable<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> undefined<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// (() => string) | string[]</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> s <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>\n    x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T10</span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T11</span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// void</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T12</span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// {}</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T13</span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">U</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// number[]</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T14</span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> f1<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// { a: number, b: string }</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T15</span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// any</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T16</span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token builtin\">never</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// any</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T17</span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T18</span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token builtin\">Function</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T20</span> <span class=\"token operator\">=</span> InstanceType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> <span class=\"token constant\">C</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// C</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T21</span> <span class=\"token operator\">=</span> InstanceType<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// any</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T22</span> <span class=\"token operator\">=</span> InstanceType<span class=\"token operator\">&lt;</span><span class=\"token builtin\">never</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// any</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T23</span> <span class=\"token operator\">=</span> InstanceType<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T24</span> <span class=\"token operator\">=</span> InstanceType<span class=\"token operator\">&lt;</span><span class=\"token builtin\">Function</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span></code></pre></div>\n<blockquote>\n<p>Note: The <code class=\"language-text\">Exclude</code> type is a proper implementation of the <code class=\"language-text\">Diff</code> type suggested <a href=\"https://github.com/Microsoft/TypeScript/issues/12215#issuecomment-307871458\">here</a>. We’ve used the name <code class=\"language-text\">Exclude</code> to avoid breaking existing code that defines a <code class=\"language-text\">Diff</code>, plus we feel that name better conveys the semantics of the type. We did not include the <code class=\"language-text\">Omit&lt;T, K&gt;</code> type because it is trivially written as <code class=\"language-text\">Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;</code>.</p>\n</blockquote>\n<h2>Improved control over mapped type modifiers</h2>\n<p>Mapped types support adding a <code class=\"language-text\">readonly</code> or <code class=\"language-text\">?</code> modifier to a mapped property, but they did not provide support the ability to <em>remove</em> modifiers.\nThis matters in <a href=\"https://github.com/Microsoft/TypeScript/pull/12563\"><em>homomorphic mapped types</em></a> which by default preserve the modifiers of the underlying type.</p>\n<p>TypeScript 2.8 adds the ability for a mapped type to either add or remove a particular modifier.\nSpecifically, a <code class=\"language-text\">readonly</code> or <code class=\"language-text\">?</code> property modifier in a mapped type can now be prefixed with either <code class=\"language-text\">+</code> or <code class=\"language-text\">-</code> to indicate that the modifier should be added or removed.</p>\n<h4>Example</h4>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> MutableRequired<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">-</span><span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Remove readonly and ?</span>\n<span class=\"token keyword\">type</span> ReadonlyPartial<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">+</span><span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Add readonly and ?</span></code></pre></div>\n<p>A modifier with no <code class=\"language-text\">+</code> or <code class=\"language-text\">-</code> prefix is the same as a modifier with a <code class=\"language-text\">+</code> prefix. So, the <code class=\"language-text\">ReadonlyPartial&lt;T&gt;</code> type above corresponds to</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> ReadonlyPartial<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Add readonly and ?</span></code></pre></div>\n<p>Using this ability, <code class=\"language-text\">lib.d.ts</code> now has a new  <code class=\"language-text\">Required&lt;T&gt;</code> type.\nThis type strips <code class=\"language-text\">?</code> modifiers from all properties of <code class=\"language-text\">T</code>, thus making all properties required.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Required<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note that in <code class=\"language-text\">--strictNullChecks</code> mode, when a homomorphic mapped type removes a <code class=\"language-text\">?</code> modifier from a property in the underlying type it also removes <code class=\"language-text\">undefined</code> from the type of that property:</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Same as { a?: string | undefined }</span>\n<span class=\"token keyword\">type</span> Bar <span class=\"token operator\">=</span> Required<span class=\"token operator\">&lt;</span>Foo<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Same as { a: string }</span></code></pre></div>\n<h2>Improved <code class=\"language-text\">keyof</code> with intersection types</h2>\n<p>With TypeScript 2.8 <code class=\"language-text\">keyof</code> applied to an intersection type is transformed to a union of <code class=\"language-text\">keyof</code> applied to each intersection constituent.\nIn other words, types of the form <code class=\"language-text\">keyof (A &amp; B)</code> are transformed to be <code class=\"language-text\">keyof A | keyof B</code>.\nThis change should address inconsistencies with inference from <code class=\"language-text\">keyof</code> expressions.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">B</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">A</span> <span class=\"token operator\">&amp;</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"a\" | \"b\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T2</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">T</span> <span class=\"token operator\">&amp;</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// keyof T | \"b\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T3</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">A</span> <span class=\"token operator\">&amp;</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"a\" | keyof U</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T4</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">T</span> <span class=\"token operator\">&amp;</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// keyof T | keyof U</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T5</span> <span class=\"token operator\">=</span> <span class=\"token constant\">T2</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"a\" | \"b\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T6</span> <span class=\"token operator\">=</span> <span class=\"token constant\">T3</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"a\" | \"b\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">T7</span> <span class=\"token operator\">=</span> <span class=\"token constant\">T4</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"a\" | \"b\"</span></code></pre></div>\n<h2>Better handling for namespace patterns in <code class=\"language-text\">.js</code> files</h2>\n<p>TypeScript 2.8 adds support for understanding more namespace patterns in <code class=\"language-text\">.js</code> files.\nEmpty object literals declarations on top level, just like functions and classes, are now recognized as as namespace declarations in JavaScript.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> ns <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// recognized as a declaration for a namespace `ns`</span>\nns<span class=\"token punctuation\">.</span>constant <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// recognized as a declaration for var `constant`</span></code></pre></div>\n<p>Assignments at the top-level should behave the same way; in other words, a <code class=\"language-text\">var</code> or <code class=\"language-text\">const</code> declaration is not required.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// does NOT need to be `var app = {}`</span>\napp<span class=\"token punctuation\">.</span><span class=\"token constant\">C</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span>prop <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>IIFEs as namespace declarations</h2>\n<p>An IIFE returning a function, class or empty object literal, is also recognized as a namespace:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token constant\">C</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>p <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">C</span><span class=\"token punctuation\">.</span>staticProperty <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Defaulted declarations</h2>\n<p>“Defaulted declarations” allow initializers that reference the declared name in the left side of a logical or:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">my <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>my <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nmy<span class=\"token punctuation\">.</span>app <span class=\"token operator\">=</span> my<span class=\"token punctuation\">.</span>app <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Prototype assignment</h2>\n<p>You can assign an object literal directly to the prototype property. Individual prototype assignments still work too:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">C</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">C</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">C</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">q</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>p <span class=\"token operator\">===</span> r<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Nested and merged declarations</h2>\n<p>Nesting works to any level now, and merges correctly across files. Previously neither was the case.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>app <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token constant\">C</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Per-file JSX factories</h2>\n<p>TypeScript 2.8 adds support for a per-file configurable JSX factory name using <code class=\"language-text\">@jsx dom</code> pragma.\nJSX factory can be configured for a compilation using <code class=\"language-text\">--jsxFactory</code> (default is <code class=\"language-text\">React.createElement</code>). With TypeScript 2.8 you can override this on a per-file-basis by adding a comment to the beginning of the file.</p>\n<h5>Example</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/** @jsx dom */</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> dom <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./renderer\"</span>\n<span class=\"token operator\">&lt;</span>h<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h<span class=\"token operator\">></span></code></pre></div>\n<p>Generates:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> renderer_1 <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./renderer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrenderer_1<span class=\"token punctuation\">.</span><span class=\"token function\">dom</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Locally scoped JSX namespaces</h2>\n<p>JSX type checking is driven by definitions in a JSX namespace, for instance <code class=\"language-text\">JSX.Element</code> for the type of a JSX element, and <code class=\"language-text\">JSX.IntrinsicElements</code> for built-in elements.\nBefore TypeScript 2.8 the <code class=\"language-text\">JSX</code> namespace was expected to be in the global namespace, and thus only allowing one to be defined in a project.\nStarting with TypeScript 2.8 the <code class=\"language-text\">JSX</code> namespace will be looked under the <code class=\"language-text\">jsxNamespace</code> (e.g. <code class=\"language-text\">React</code>) allowing for multiple jsx factories in one compilation.\nFor backward compatibility the global <code class=\"language-text\">JSX</code> namespace is used as a fallback if none was defined on the factory function.\nCombined with the per-file <code class=\"language-text\">@jsx</code> pragma, each file can have a different JSX factory.</p>\n<h2>New <code class=\"language-text\">--emitDeclarationOnly</code></h2>\n<p><code class=\"language-text\">--emitDeclarationOnly</code> allows for <em>only</em> generating declaration files; <code class=\"language-text\">.js</code>/<code class=\"language-text\">.jsx</code> output generation will be skipped with this flag. The flag is useful when the <code class=\"language-text\">.js</code> output generation is handled by a different transpiler like Babel.</p>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-2-8.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/release-notes/typescript-2-8.html","isOldHandbook":true}}}