{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/release-notes/typescript-3-3.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"dcb6f69d-9212-5c7a-9891-396ad84bcf9e","excerpt":"{% raw %}## Improved behavior for calling union types In prior versions of TypeScript, unions of callable types could only be invoked if they had identical…","html":"<p>{% raw %}## Improved behavior for calling union types</p>\n<p>In prior versions of TypeScript, unions of callable types could <em>only</em> be invoked if they had identical parameter lists.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Fruit <span class=\"token operator\">=</span> <span class=\"token string\">\"apple\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> Color <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token function-variable function\">FruitEater</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fruit<span class=\"token punctuation\">:</span> Fruit</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// eats and ranks the fruit</span>\n<span class=\"token keyword\">type</span> <span class=\"token function-variable function\">ColorConsumer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">color<span class=\"token punctuation\">:</span> Color</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// consumes and describes the colors</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">let</span> f<span class=\"token punctuation\">:</span> FruitEater <span class=\"token operator\">|</span> ColorConsumer<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Cannot invoke an expression whose type lacks a call signature.</span>\n<span class=\"token comment\">//   Type 'FruitEater | ColorConsumer' has no compatible call signatures.ts(2349)</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>However, in the above example, both <code class=\"language-text\">FruitEater</code>s and <code class=\"language-text\">ColorConsumer</code>s should be able to take the string <code class=\"language-text\">&quot;orange&quot;</code>, and return either a <code class=\"language-text\">number</code> or a <code class=\"language-text\">string</code>.</p>\n<p>In TypeScript 3.3, this is no longer an error.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Fruit <span class=\"token operator\">=</span> <span class=\"token string\">\"apple\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> Color <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token function-variable function\">FruitEater</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fruit<span class=\"token punctuation\">:</span> Fruit</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// eats and ranks the fruit</span>\n<span class=\"token keyword\">type</span> <span class=\"token function-variable function\">ColorConsumer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">color<span class=\"token punctuation\">:</span> Color</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// consumes and describes the colors</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">let</span> f<span class=\"token punctuation\">:</span> FruitEater <span class=\"token operator\">|</span> ColorConsumer<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// It works! Returns a 'number | string'.</span>\n\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// error - Argument of type '\"apple\"' is not assignable to parameter of type '\"orange\"'.</span>\n\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// error - Argument of type '\"red\"' is not assignable to parameter of type '\"orange\"'.</span></code></pre></div>\n<p>In TypeScript 3.3, the parameters of these signatures are <em>intersected</em> together to create a new signature.</p>\n<p>In the example above, the parameters <code class=\"language-text\">fruit</code> and <code class=\"language-text\">color</code> are intersected together to a new parameter of type <code class=\"language-text\">Fruit &amp; Color</code>.\n<code class=\"language-text\">Fruit &amp; Color</code> is really the same as <code class=\"language-text\">(&quot;apple&quot; | &quot;orange&quot;) &amp; (&quot;red&quot; | &quot;orange&quot;)</code> which is equivalent to <code class=\"language-text\">(&quot;apple&quot; &amp; &quot;red&quot;) | (&quot;apple&quot; &amp; &quot;orange&quot;) | (&quot;orange&quot; &amp; &quot;red&quot;) | (&quot;orange&quot; &amp; &quot;orange&quot;)</code>.\nEach of those impossible intersections reduces to <code class=\"language-text\">never</code>, and we’re left with <code class=\"language-text\">&quot;orange&quot; &amp; &quot;orange&quot;</code> which is just <code class=\"language-text\">&quot;orange&quot;</code>.</p>\n<h2>Caveats</h2>\n<p>This new behavior only kicks in when at most one type in the union has multiple overloads, and at most one type in the union has a generic signature.\nThat means methods on <code class=\"language-text\">number[] | string[]</code> like <code class=\"language-text\">map</code> (which is generic) still won’t be callable.</p>\n<p>On the other hand, methods like <code class=\"language-text\">forEach</code> will now be callable, but under <code class=\"language-text\">noImplicitAny</code> there may be some issues.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>\n    kind<span class=\"token punctuation\">:</span> <span class=\"token string\">\"dog\"</span>\n    dogProp<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Cat</span> <span class=\"token punctuation\">{</span>\n    kind<span class=\"token punctuation\">:</span> <span class=\"token string\">\"cat\"</span>\n    catProp<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> catOrDogArray<span class=\"token punctuation\">:</span> Dog<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> Cat<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\ncatOrDogArray<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">animal</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//                ~~~~~~ error!</span>\n    <span class=\"token comment\">// Parameter 'animal' implicitly has an 'any' type.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is still strictly more capable in TypeScript 3.3, and adding an explicit type annotation will work.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>\n    kind<span class=\"token punctuation\">:</span> <span class=\"token string\">\"dog\"</span>\n    dogProp<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Cat</span> <span class=\"token punctuation\">{</span>\n    kind<span class=\"token punctuation\">:</span> <span class=\"token string\">\"cat\"</span>\n    catProp<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> catOrDogArray<span class=\"token punctuation\">:</span> Dog<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> Cat<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\ncatOrDogArray<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">animal<span class=\"token punctuation\">:</span> Dog <span class=\"token operator\">|</span> Cat</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">.</span>kind <span class=\"token operator\">===</span> <span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        animal<span class=\"token punctuation\">.</span>dogProp<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">.</span>kind <span class=\"token operator\">===</span> <span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        animal<span class=\"token punctuation\">.</span>catProp<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Incremental file watching for composite projects in <code class=\"language-text\">--build --watch</code></h2>\n<p>TypeScript 3.0 introduced a new feature for structuring builds called “composite projects”.\nPart of the goal here was to ensure users could break up large projects into smaller parts that build quickly and preserve project structure, without compromising the existing TypeScript experience.\nThanks to composite projects, TypeScript can use <code class=\"language-text\">--build</code> mode to recompile only the set of projects and dependencies.\nYou can think of this as optimizing <em>inter</em>-project builds.</p>\n<p>TypeScript 2.7 also introduced <code class=\"language-text\">--watch</code> mode builds via a new incremental “builder” API.\nIn a similar vein, the entire idea is that this mode only re-checks and re-emits changed files or files whose dependencies might impact type-checking.\nYou can think of this as optimizing <em>intra</em>-project builds.</p>\n<p>Prior to 3.3, building composite projects using <code class=\"language-text\">--build --watch</code> actually didn’t use this incremental file watching infrastructure.\nAn update in one project under <code class=\"language-text\">--build --watch</code> mode would force a full build of that project, rather than determining which files within that project were affected.</p>\n<p>In TypeScript 3.3, <code class=\"language-text\">--build</code> mode’s <code class=\"language-text\">--watch</code> flag <em>does</em> leverage incremental file watching as well.\nThat can mean signficantly faster builds under <code class=\"language-text\">--build --watch</code>.\nIn our testing, this functionality has resulted in <strong>a reduction of 50% to 75% in build times</strong> of the original <code class=\"language-text\">--build --watch</code> times.\n<a href=\"https://github.com/Microsoft/TypeScript/pull/29161\">You can read more on the original pull request for the change</a> to see specific numbers, but we believe most composite project users will see significant wins here.</p>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-3-3.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/release-notes/typescript-3-3.html","isOldHandbook":true}}}