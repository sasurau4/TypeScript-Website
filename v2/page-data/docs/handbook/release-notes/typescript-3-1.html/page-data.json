{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/release-notes/typescript-3-1.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"f8405312-8d4f-538b-bb43-e368fbf4d0c0","excerpt":"{% raw %}## Mapped types on tuples and arrays In TypeScript 3.1, mapped object types[1] over tuples and arrays now produce new tuples/arrays, rather than…","html":"<p>{% raw %}## Mapped types on tuples and arrays</p>\n<p>In TypeScript 3.1, mapped object types<sup><a href=\"#ts-3-1-only-homomorphic\">[1]</a></sup> over tuples and arrays now produce new tuples/arrays, rather than creating a new type where members like <code class=\"language-text\">push()</code>, <code class=\"language-text\">pop()</code>, and <code class=\"language-text\">length</code> are converted.\nFor example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> MapToPromise<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> Coordinate <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">type</span> PromiseCoordinate <span class=\"token operator\">=</span> MapToPromise<span class=\"token operator\">&lt;</span>Coordinate<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [Promise&lt;number>, Promise&lt;number>]</span></code></pre></div>\n<p><code class=\"language-text\">MapToPromise</code> takes a type <code class=\"language-text\">T</code>, and when that type is a tuple like <code class=\"language-text\">Coordinate</code>, only the numeric properties are converted.\nIn <code class=\"language-text\">[number, number]</code>, there are two numerically named properties: <code class=\"language-text\">0</code> and <code class=\"language-text\">1</code>.\nWhen given a tuple like that, <code class=\"language-text\">MapToPromise</code> will create a new tuple where the <code class=\"language-text\">0</code> and <code class=\"language-text\">1</code> properties are <code class=\"language-text\">Promise</code>s of the original type.\nSo the resulting type <code class=\"language-text\">PromiseCoordinate</code> ends up with the type <code class=\"language-text\">[Promise&lt;number&gt;, Promise&lt;number&gt;]</code>.</p>\n<h2>Properties declarations on functions</h2>\n<p>TypeScript 3.1 brings the ability to define properties on function declarations and <code class=\"language-text\">const</code>-declared functions, simply by assigning to properties on these functions in the same scope.\nThis allows us to write canonical JavaScript code without resorting to <code class=\"language-text\">namespace</code> hacks.\nFor example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">readImage</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">callback</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">:</span> Image</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\nreadImage<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sync</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">path<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> contents <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">decodeImageSync</span><span class=\"token punctuation\">(</span>contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here, we have a function <code class=\"language-text\">readImage</code> which reads an image in a non-blocking asynchronous way.\nIn addition to <code class=\"language-text\">readImage</code>, we’ve provided a convenience function on <code class=\"language-text\">readImage</code> itself called <code class=\"language-text\">readImage.sync</code>.</p>\n<p>While ECMAScript exports are often a better way of providing this functionality, this new support allows code written in this style to “just work” TypeScript.\nAdditionally, this approach for property declarations allows us to express common patterns like <code class=\"language-text\">defaultProps</code> and <code class=\"language-text\">propTypes</code> on React function components (formerly known as SFCs).</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">FooComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Hello<span class=\"token operator\">!</span> <span class=\"token constant\">I</span> am <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nFooComponent<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"(anonymous)\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<!--\nfs.readFile(path, (err, data) => {\n        if (err) callback(err, undefined);\n        else decodeImage(data, (err, image) => {\n            if (err) callback(err, undefined);\n            else callback(undefined, image);\n        });\n    });\n-->\n<hr>\n<p><sup id=\"ts-3-1-only-homomorphic\">[1]</sup> More specifically, homomorphic mapped types like in the above form.</p>\n<h2>Version selection with <code class=\"language-text\">typesVersions</code></h2>\n<p>Feedback from our community, as well as our own experience, has shown us that leveraging the newest TypeScript features while also accommodating users on the older versions are difficult.\nTypeScript introduces a new feature called <code class=\"language-text\">typesVersions</code> to help accommodate these scenarios.</p>\n<p>When using Node module resolution in TypeScript 3.1, when TypeScript cracks open a <code class=\"language-text\">package.json</code> file to figure out which files it needs to read, it first looks at a new field called <code class=\"language-text\">typesVersions</code>.\nA <code class=\"language-text\">package.json</code> with a <code class=\"language-text\">typesVersions</code> field might look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"package-name\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"types\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./index.d.ts\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"typesVersions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\">=3.1\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"ts3.1/*\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This <code class=\"language-text\">package.json</code> tells TypeScript to check whether the current version of TypeScript is running.\nIf it’s 3.1 or later, it figures out the path you’ve imported relative to the package, and reads from the package’s <code class=\"language-text\">ts3.1</code> folder.\nThat’s what that <code class=\"language-text\">{ &quot;*&quot;: [&quot;ts3.1/*&quot;] }</code> means - if you’re familiar with path mapping today, it works exactly like that.</p>\n<p>So in the above example, if we’re importing from <code class=\"language-text\">&quot;package-name&quot;</code>, we’ll try to resolve from <code class=\"language-text\">[...]/node_modules/package-name/ts3.1/index.d.ts</code> (and other relevant paths) when running in TypeScript 3.1.\nIf we import from <code class=\"language-text\">package-name/foo</code>, we’ll try to look for <code class=\"language-text\">[...]/node_modules/package-name/ts3.1/foo.d.ts</code> and <code class=\"language-text\">[...]/node_modules/package-name/ts3.1/foo/index.d.ts</code>.</p>\n<p>What if we’re not running in TypeScript 3.1 in this example?\nWell, if none of the fields in <code class=\"language-text\">typesVersions</code> get matched, TypeScript falls back to the <code class=\"language-text\">types</code> field, so here TypeScript 3.0 and earlier will be redirected to <code class=\"language-text\">[...]/node_modules/package-name/index.d.ts</code>.</p>\n<h2>Matching behavior</h2>\n<p>The way that TypeScript decides on whether a version of the compiler &#x26; language matches is by using Node’s <a href=\"https://github.com/npm/node-semver#ranges\">semver ranges</a>.</p>\n<h2>Multiple fields</h2>\n<p><code class=\"language-text\">typesVersions</code> can support multiple fields where each field name is specified by the range to match on.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"package-name\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"types\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./index.d.ts\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"typesVersions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\">=3.2\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"ts3.2/*\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\">=3.1\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"ts3.1/*\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Since ranges have the potential to overlap, determining which redirect applies is order-specific.\nThat means in the above example, even though both the <code class=\"language-text\">&gt;=3.2</code> and the <code class=\"language-text\">&gt;=3.1</code> matchers support TypeScript 3.2 and above, reversing the order could have different behavior, so the above sample would not be equivalent to the following.</p>\n<div class=\"gatsby-highlight\" data-language=\"json5\"><pre class=\"language-json5\"><code class=\"language-json5\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"package-name\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"types\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./index.d.ts\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"typesVersions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// </span><span class=\"token property unquoted\">NOTE</span><span class=\"token operator\">:</span> this doesn't work!\n    <span class=\"token property\">\">=3.1\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"ts3.1/*\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\">=3.2\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"ts3.2/*\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/release-notes/typescript-3-1.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/release-notes/typescript-3-1.html","isOldHandbook":true}}}