{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/react.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"f08e439a-5d35-5eb0-9efe-a192c1bcb15a","excerpt":"{% raw %}This quick start guide will teach you how to wire up TypeScript with React.\nBy the end, you’ll have a project with React and TypeScript linting with…","html":"<p>{% raw %}This quick start guide will teach you how to wire up TypeScript with <a href=\"https://reactjs.org/\">React</a>.\nBy the end, you’ll have</p>\n<ul>\n<li>a project with React and TypeScript</li>\n<li>linting with <a href=\"https://github.com/palantir/tslint\">TSLint</a></li>\n<li>testing with <a href=\"https://facebook.github.io/jest/\">Jest</a> and <a href=\"http://airbnb.io/enzyme/\">Enzyme</a>, and</li>\n<li>state management with <a href=\"https://github.com/reactjs/react-redux\">Redux</a></li>\n</ul>\n<p>We’ll use the <a href=\"https://github.com/facebookincubator/create-react-app\">create-react-app</a> tool to quickly get set up.</p>\n<p>We assume that you’re already using <a href=\"https://nodejs.org/\">Node.js</a> with <a href=\"https://www.npmjs.com/\">npm</a>.\nYou may also want to get a sense of <a href=\"https://reactjs.org/docs/hello-world.html\">the basics with React</a>.</p>\n<h1>Install create-react-app</h1>\n<p>We’re going to use the create-react-app because it sets some useful tools and canonical defaults for React projects.\nThis is just a command-line utility to scaffold out new React projects.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g create-react-app</code></pre></div>\n<h1>Create our new project</h1>\n<p>We’ll create a new project called <code class=\"language-text\">my-app</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">create-react-app my-app --scripts-version<span class=\"token operator\">=</span>react-scripts-ts</code></pre></div>\n<p><a href=\"https://www.npmjs.com/package/react-scripts-ts\">react-scripts-ts</a> is a set of adjustments to take the standard create-react-app project pipeline and bring TypeScript into the mix.</p>\n<p>At this point, your project layout should look like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">my-app/\n├─ .gitignore\n├─ node_modules/\n├─ public/\n├─ src/\n│  └─ ...\n├─ package.json\n├─ tsconfig.json\n└─ tslint.json</code></pre></div>\n<p>Of note:</p>\n<ul>\n<li><code class=\"language-text\">tsconfig.json</code> contains TypeScript-specific options for our project.</li>\n<li><code class=\"language-text\">tslint.json</code> stores the settings that our linter, <a href=\"https://github.com/palantir/tslint\">TSLint</a>, will use.</li>\n<li><code class=\"language-text\">package.json</code> contains our dependencies, as well as some shortcuts for commands we’d like to run for testing, previewing, and deploying our app.</li>\n<li><code class=\"language-text\">public</code> contains static assets like the HTML page we’re planning to deploy to, or images. You can delete any file in this folder apart from <code class=\"language-text\">index.html</code>.</li>\n<li><code class=\"language-text\">src</code> contains our TypeScript and CSS code. <code class=\"language-text\">index.tsx</code> is the entry-point for our file, and is mandatory.</li>\n</ul>\n<h1>Running the project</h1>\n<p>Running the project is as simple as running</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npm run start</code></pre></div>\n<p>This runs the <code class=\"language-text\">start</code> script specified in our <code class=\"language-text\">package.json</code>, and will spawn off a server which reloads the page as we save our files.\nTypically the server runs at <code class=\"language-text\">http://localhost:3000</code>, but should be automatically opened for you.</p>\n<p>This tightens the iteration loop by allowing us to quickly preview changes.</p>\n<h1>Testing the project</h1>\n<p>Testing is also just a command away:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npm run test</code></pre></div>\n<p>This command runs Jest, an incredibly useful testing utility, against all files whose extensions end in <code class=\"language-text\">.test.ts</code> or <code class=\"language-text\">.spec.ts</code>.\nLike with the <code class=\"language-text\">npm run start</code> command, Jest will automatically run as soon as it detects changes.\nIf you’d like, you can run <code class=\"language-text\">npm run start</code> and <code class=\"language-text\">npm run test</code> side by side so that you can preview changes and test them simultaneously.</p>\n<h1>Creating a production build</h1>\n<p>When running the project with <code class=\"language-text\">npm run start</code>, we didn’t end up with an optimized build.\nTypically, we want the code we ship to users to be as fast and small as possible.\nCertain optimizations like minification can accomplish this, but often take more time.\nWe call builds like this “production” builds (as opposed to development builds).</p>\n<p>To run a production build, just run</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npm run build</code></pre></div>\n<p>This will create an optimized JS and CSS build in <code class=\"language-text\">./build/static/js</code> and <code class=\"language-text\">./build/static/css</code> respectively.</p>\n<p>You won’t need to run a production build most of the time,\nbut it is useful if you need to measure things like the final size of your app.</p>\n<h1>Creating a component</h1>\n<p>We’re going to write a <code class=\"language-text\">Hello</code> component.\nThe component will take the name of whatever we want to greet (which we’ll call <code class=\"language-text\">name</code>), and optionally the number of exclamation marks to trail with (<code class=\"language-text\">enthusiasmLevel</code>).</p>\n<p>When we write something like <code class=\"language-text\">&lt;Hello name=&quot;Daniel&quot; enthusiasmLevel={3} /&gt;</code>, the component should render to something like <code class=\"language-text\">&lt;div&gt;Hello Daniel!!!&lt;/div&gt;</code>.\nIf <code class=\"language-text\">enthusiasmLevel</code> isn’t specified, the component should default to showing one exclamation mark.\nIf <code class=\"language-text\">enthusiasmLevel</code> is <code class=\"language-text\">0</code> or negative, it should throw an error.</p>\n<p>We’ll write a <code class=\"language-text\">Hello.tsx</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// src/components/Hello.tsx</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  enthusiasmLevel<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Hello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> enthusiasmLevel <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span> Props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>enthusiasmLevel <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You could be a little more enthusiastic. :D'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"greeting\"</span><span class=\"token operator\">></span>\n        Hello <span class=\"token punctuation\">{</span>name <span class=\"token operator\">+</span> <span class=\"token function\">getExclamationMarks</span><span class=\"token punctuation\">(</span>enthusiasmLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Hello<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// helpers</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getExclamationMarks</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numChars<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span>numChars <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice that we defined a type named <code class=\"language-text\">Props</code> that specifies the properties our component will take.\n<code class=\"language-text\">name</code> is a required <code class=\"language-text\">string</code>, and <code class=\"language-text\">enthusiasmLevel</code> is an optional <code class=\"language-text\">number</code> (which you can tell from the <code class=\"language-text\">?</code> that we wrote out after its name).</p>\n<p>We also wrote <code class=\"language-text\">Hello</code> as a function component.\nTo be specific, <code class=\"language-text\">Hello</code> is a function that takes a <code class=\"language-text\">Props</code> object, and destructures it.\nIf <code class=\"language-text\">enthusiasmLevel</code> isn’t given in our <code class=\"language-text\">Props</code> object, it will default to <code class=\"language-text\">1</code>.</p>\n<p>Writing functions is one of two primary <a href=\"(https://reactjs.org/docs/components-and-props.html#functional-and-class-components)\">ways React allows us to make components</a>.\nIf we wanted, we <em>could</em> have written it out as a class as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Hello</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token operator\">&lt;</span>Props<span class=\"token punctuation\">,</span> object<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> enthusiasmLevel <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>enthusiasmLevel <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You could be a little more enthusiastic. :D'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"greeting\"</span><span class=\"token operator\">></span>\n          Hello <span class=\"token punctuation\">{</span>name <span class=\"token operator\">+</span> <span class=\"token function\">getExclamationMarks</span><span class=\"token punctuation\">(</span>enthusiasmLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Classes are useful <a href=\"https://reactjs.org/docs/state-and-lifecycle.html\">when our component instances have some state</a>.\nBut we don’t really need to think about state in this example - in fact, we specified it as <code class=\"language-text\">object</code> in <code class=\"language-text\">React.Component&lt;Props, object&gt;</code>, so writing a function component tends to be shorter.\nLocal component state is more useful at the presentational level when creating generic UI elements that can be shared between libraries.\nFor our application’s lifecycle, we will revisit how applications manage general state with Redux in a bit.</p>\n<p>Now that we’ve written our component, let’s dive into <code class=\"language-text\">index.tsx</code> and replace our render of <code class=\"language-text\">&lt;App /&gt;</code> with a render of <code class=\"language-text\">&lt;Hello ... /&gt;</code>.</p>\n<p>First we’ll import it at the top of the file:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> Hello <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/Hello'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>and then change up our <code class=\"language-text\">render</code> call:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Hello name<span class=\"token operator\">=</span><span class=\"token string\">\"TypeScript\"</span> enthusiasmLevel<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLElement\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Type assertions</h2>\n<p>One final thing we’ll point out in this section is the line <code class=\"language-text\">document.getElementById(&#39;root&#39;) as HTMLElement</code>.\nThis syntax is called a <em>type assertion</em>, sometimes also called a <em>cast</em>.\nThis is a useful way of telling TypeScript what the real type of an expression is when you know better than the type checker.</p>\n<p>The reason we need to do so in this case is that <code class=\"language-text\">getElementById</code>’s return type is <code class=\"language-text\">HTMLElement | null</code>.\nPut simply, <code class=\"language-text\">getElementById</code> returns <code class=\"language-text\">null</code> when it can’t find an element with a given <code class=\"language-text\">id</code>.\nWe’re assuming that <code class=\"language-text\">getElementById</code> will actually succeed, so we need convince TypeScript of that using the <code class=\"language-text\">as</code> syntax.</p>\n<p>TypeScript also has a trailing “bang” syntax (<code class=\"language-text\">!</code>), which removes <code class=\"language-text\">null</code> and <code class=\"language-text\">undefined</code> from the prior expression.\nSo we <em>could</em> have written <code class=\"language-text\">document.getElementById(&#39;root&#39;)!</code>, but in this case we wanted to be a bit more explicit.</p>\n<h1>Adding style 😎</h1>\n<p>Styling a component with our setup is easy.\nTo style our <code class=\"language-text\">Hello</code> component, we can create a CSS file at <code class=\"language-text\">src/components/Hello.css</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.hello</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 48px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Segoe UI'</span><span class=\"token punctuation\">,</span> Tahoma<span class=\"token punctuation\">,</span> Geneva<span class=\"token punctuation\">,</span> Verdana<span class=\"token punctuation\">,</span> sans-serif\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.hello button</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> 25px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> 25px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 40px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The tools that create-react-app uses (namely, Webpack and various loaders) allow us to just import the stylesheets we’re interested in.\nWhen our build runs, any imported <code class=\"language-text\">.css</code> files will be concatenated into an output file.\nSo in <code class=\"language-text\">src/components/Hello.tsx</code>, we’ll add the following import.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token string\">'./Hello.css'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>Writing tests with Jest</h1>\n<p>We had a certain set of assumptions about our <code class=\"language-text\">Hello</code> component.\nLet’s reiterate what they were:</p>\n<blockquote>\n<ul>\n<li>When we write something like <code class=\"language-text\">&lt;Hello name=&quot;Daniel&quot; enthusiasmLevel={3} /&gt;</code>, the component should render to something like <code class=\"language-text\">&lt;div&gt;Hello Daniel!!!&lt;/div&gt;</code>.</li>\n<li>If <code class=\"language-text\">enthusiasmLevel</code> isn’t specified, the component should default to showing one exclamation mark.</li>\n<li>If <code class=\"language-text\">enthusiasmLevel</code> is <code class=\"language-text\">0</code> or negative, it should throw an error.</li>\n</ul>\n</blockquote>\n<p>We can use these requirements to write a few tests for our components.</p>\n<p>But first, let’s install Enzyme.\n<a href=\"http://airbnb.io/enzyme/\">Enzyme</a> is a common tool in the React ecosystem that makes it easier to write tests for how components will behave.\nBy default, our application includes a library called jsdom to allow us to simulate the DOM and test its runtime behavior without a browser.\nEnzyme is similar, but builds on jsdom and makes it easier to make certain queries about our components.</p>\n<p>Let’s install it as a development-time dependency.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npm install -D enzyme @types/enzyme react-addons-test-utils</code></pre></div>\n<p>Notice we installed packages <code class=\"language-text\">enzyme</code> as well as <code class=\"language-text\">@types/enzyme</code>.\nThe <code class=\"language-text\">enzyme</code> package refers to the package containing JavaScript code that actually gets run, while <code class=\"language-text\">@types/enzyme</code> is a package that contains declaration files (<code class=\"language-text\">.d.ts</code> files) so that TypeScript can understand how you can use Enzyme.\nYou can learn more about <code class=\"language-text\">@types</code> packages <a href=\"https://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html\">here</a>.</p>\n<p>We also had to install <code class=\"language-text\">react-addons-test-utils</code>.\nThis is something <code class=\"language-text\">enzyme</code> expects to be installed.</p>\n<p>Now that we’ve got Enzyme set up, let’s start writing our test!\nLet’s create a file named <code class=\"language-text\">src/components/Hello.test.tsx</code>, adjacent to our <code class=\"language-text\">Hello.tsx</code> file from earlier.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// src/components/Hello.test.tsx</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> enzyme <span class=\"token keyword\">from</span> <span class=\"token string\">'enzyme'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Hello <span class=\"token keyword\">from</span> <span class=\"token string\">'./Hello'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'renders the correct text when no enthusiasm level is given'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> hello <span class=\"token operator\">=</span> enzyme<span class=\"token punctuation\">.</span><span class=\"token function\">shallow</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Hello name<span class=\"token operator\">=</span><span class=\"token string\">'Daniel'</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".greeting\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello Daniel!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'renders the correct text with an explicit enthusiasm of 1'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> hello <span class=\"token operator\">=</span> enzyme<span class=\"token punctuation\">.</span><span class=\"token function\">shallow</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Hello name<span class=\"token operator\">=</span><span class=\"token string\">'Daniel'</span> enthusiasmLevel<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".greeting\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello Daniel!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'renders the correct text with an explicit enthusiasm level of 5'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> hello <span class=\"token operator\">=</span> enzyme<span class=\"token punctuation\">.</span><span class=\"token function\">shallow</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Hello name<span class=\"token operator\">=</span><span class=\"token string\">'Daniel'</span> enthusiasmLevel<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".greeting\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello Daniel!!!!!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'throws when the enthusiasm level is 0'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    enzyme<span class=\"token punctuation\">.</span><span class=\"token function\">shallow</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Hello name<span class=\"token operator\">=</span><span class=\"token string\">'Daniel'</span> enthusiasmLevel<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'throws when the enthusiasm level is negative'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    enzyme<span class=\"token punctuation\">.</span><span class=\"token function\">shallow</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Hello name<span class=\"token operator\">=</span><span class=\"token string\">'Daniel'</span> enthusiasmLevel<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>These tests are extremely basic, but you should be able to get the gist of things.</p>\n<h1>Adding state management</h1>\n<p>At this point, if all you’re using React for is fetching data once and displaying it, you can consider yourself done.\nBut if you’re developing an app that’s more interactive, then you may need to add state management.</p>\n<h2>State management in general</h2>\n<p>On its own, React is a useful library for creating composable views.\nHowever, React doesn’t come with any facility for synchronizing data between your application.\nAs far as a React component is concerned, data flows down through its children through the props you specify on each element.</p>\n<p>Because React on its own does not provide built-in support for state management, the React community uses libraries like Redux and MobX.</p>\n<p><a href=\"http://redux.js.org\">Redux</a> relies on synchronizing data through a centralized and immutable store of data, and updates to that data will trigger a re-render of our application.\nState is updated in an immutable fashion by sending explicit action messages which must be handled by functions called reducers.\nBecause of the explicit nature, it is often easier to reason about how an action will affect the state of your program.</p>\n<p><a href=\"https://mobx.js.org/\">MobX</a> relies on functional reactive patterns where state is wrapped through observables and passed through as props.\nKeeping state fully synchronized for any observers is done by simply marking state as observable.\nAs a nice bonus, the library is already written in TypeScript.</p>\n<p>There are various merits and tradeoffs to both.\nGenerally Redux tends to see more widespread usage, so for the purposes of this tutorial, we’ll focus on adding Redux;\nhowever, you should feel encouraged to explore both.</p>\n<p>The following section may have a steep learning curve.\nWe strongly suggest you <a href=\"http://redux.js.org/\">familiarize yourself with Redux through its documentation</a>.</p>\n<h2>Setting the stage for actions</h2>\n<p>It doesn’t make sense to add Redux unless the state of our application changes.\nWe need a source of actions that will trigger changes to take place.\nThis can be a timer, or something in the UI like a button.</p>\n<p>For our purposes, we’re going to add two buttons to control the enthusiasm level for our <code class=\"language-text\">Hello</code> component.</p>\n<h2>Installing Redux</h2>\n<p>To add Redux, we’ll first install <code class=\"language-text\">redux</code> and <code class=\"language-text\">react-redux</code>, as well as their types, as a dependency.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npm install -S redux react-redux @types/react-redux</code></pre></div>\n<p>In this case we didn’t need to install <code class=\"language-text\">@types/redux</code> because Redux already comes with its own definition files (<code class=\"language-text\">.d.ts</code> files).</p>\n<h2>Defining our app’s state</h2>\n<p>We need to define the shape of the state which Redux will store.\nFor this, we can create a file called <code class=\"language-text\">src/types/index.tsx</code> which will contain definitions for types that we might use throughout the program.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// src/types/index.tsx</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">StoreState</span> <span class=\"token punctuation\">{</span>\n    languageName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    enthusiasmLevel<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Our intention is that <code class=\"language-text\">languageName</code> will be the programming language this app was written in (i.e. TypeScript or JavaScript) and <code class=\"language-text\">enthusiasmLevel</code> will vary.\nWhen we write our first container, we’ll understand why we intentionally made our state slightly different from our props.</p>\n<h2>Adding actions</h2>\n<p>Let’s start off by creating a set of message types that our app can respond to in <code class=\"language-text\">src/constants/index.tsx</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// src/constants/index.tsx</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">INCREMENT_ENTHUSIASM</span> <span class=\"token operator\">=</span> <span class=\"token string\">'INCREMENT_ENTHUSIASM'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token constant\">INCREMENT_ENTHUSIASM</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> <span class=\"token constant\">INCREMENT_ENTHUSIASM</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">DECREMENT_ENTHUSIASM</span> <span class=\"token operator\">=</span> <span class=\"token string\">'DECREMENT_ENTHUSIASM'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token constant\">DECREMENT_ENTHUSIASM</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> <span class=\"token constant\">DECREMENT_ENTHUSIASM</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This <code class=\"language-text\">const</code>/<code class=\"language-text\">type</code> pattern allows us to use TypeScript’s string literal types in an easily accessible and refactorable way.</p>\n<p>Next, we’ll create a set of actions and functions that can create these actions in <code class=\"language-text\">src/actions/index.tsx</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> constants <span class=\"token keyword\">from</span> <span class=\"token string\">'../constants'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IncrementEnthusiasm</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> constants<span class=\"token punctuation\">.</span><span class=\"token constant\">INCREMENT_ENTHUSIASM</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">DecrementEnthusiasm</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> constants<span class=\"token punctuation\">.</span><span class=\"token constant\">DECREMENT_ENTHUSIASM</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> EnthusiasmAction <span class=\"token operator\">=</span> IncrementEnthusiasm <span class=\"token operator\">|</span> DecrementEnthusiasm<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">incrementEnthusiasm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> IncrementEnthusiasm <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> constants<span class=\"token punctuation\">.</span><span class=\"token constant\">INCREMENT_ENTHUSIASM</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">decrementEnthusiasm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> DecrementEnthusiasm <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> constants<span class=\"token punctuation\">.</span><span class=\"token constant\">DECREMENT_ENTHUSIASM</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We’ve created two types that describe what increment actions and decrement actions should look like.\nWe also created a type (<code class=\"language-text\">EnthusiasmAction</code>) to describe cases where an action could be an increment or a decrement.\nFinally, we made two functions that actually manufacture the actions which we can use instead of writing out bulky object literals.</p>\n<p>There’s clearly boilerplate here, so you should feel free to look into libraries like <a href=\"https://www.npmjs.com/package/redux-actions\">redux-actions</a> once you’ve got the hang of things.</p>\n<h2>Adding a reducer</h2>\n<p>We’re ready to write our first reducer!\nReducers are just functions that generate changes by creating modified copies of our application’s state, but that have <em>no side effects</em>.\nIn other words, they’re what we call <em><a href=\"https://en.wikipedia.org/wiki/Pure_function\">pure functions</a></em>.</p>\n<p>Our reducer will go under <code class=\"language-text\">src/reducers/index.tsx</code>.\nIts function will be to ensure that increments raise the enthusiasm level by 1, and that decrements reduce the enthusiasm level by 1, but that the level never falls below 1.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// src/reducers/index.tsx</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> EnthusiasmAction <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../actions'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> StoreState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types/index'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">INCREMENT_ENTHUSIASM</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">DECREMENT_ENTHUSIASM</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../constants/index'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">enthusiasm</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">:</span> StoreState<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">:</span> EnthusiasmAction</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> StoreState <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token constant\">INCREMENT_ENTHUSIASM</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> enthusiasmLevel<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>enthusiasmLevel <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token constant\">DECREMENT_ENTHUSIASM</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> enthusiasmLevel<span class=\"token punctuation\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">.</span>enthusiasmLevel <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice that we’re using the <em>object spread</em> (<code class=\"language-text\">...state</code>) which allows us to create a shallow copy of our state, while replacing the <code class=\"language-text\">enthusiasmLevel</code>.\nIt’s important that the <code class=\"language-text\">enthusiasmLevel</code> property come last, since otherwise it would be overridden by the property in our old state.</p>\n<p>You may want to write a few tests for your reducer.\nSince reducers are pure functions, they can be passed arbitrary data.\nFor every input, reducers can tested by checking their newly produced state.\nConsider looking into Jest’s <a href=\"https://facebook.github.io/jest/docs/en/expect.html#toequalvalue\">toEqual</a> method to accomplish this.</p>\n<h2>Making a container</h2>\n<p>When writing with Redux, we will often write components as well as containers.\nComponents are often data-agnostic, and work mostly at a presentational level.\n<em>Containers</em> typically wrap components and feed them any data that is necessary to display and modify state.\nYou can read more about this concept on <a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\">Dan Abramov’s article <em>Presentational and Container Components</em></a>.</p>\n<p>First let’s update <code class=\"language-text\">src/components/Hello.tsx</code> so that it can modify state.\nWe’ll add two optional callback properties to <code class=\"language-text\">Props</code> named <code class=\"language-text\">onIncrement</code> and <code class=\"language-text\">onDecrement</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  enthusiasmLevel<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  onIncrement<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  onDecrement<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then we’ll bind those callbacks to two new buttons that we’ll add into our component.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">Hello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> enthusiasmLevel <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> onIncrement<span class=\"token punctuation\">,</span> onDecrement <span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span> Props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>enthusiasmLevel <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You could be a little more enthusiastic. :D'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"greeting\"</span><span class=\"token operator\">></span>\n        Hello <span class=\"token punctuation\">{</span>name <span class=\"token operator\">+</span> <span class=\"token function\">getExclamationMarks</span><span class=\"token punctuation\">(</span>enthusiasmLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onDecrement<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">-</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onIncrement<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">+</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In general, it’d be a good idea to write a few tests for <code class=\"language-text\">onIncrement</code> and <code class=\"language-text\">onDecrement</code> being triggered when their respective buttons are clicked.\nGive it a shot to get the hang of writing tests for your components.</p>\n<p>Now that our component is updated, we’re ready to wrap it into a container.\nLet’s create a file named <code class=\"language-text\">src/containers/Hello.tsx</code> and start off with the following imports.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> Hello <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/Hello'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> actions <span class=\"token keyword\">from</span> <span class=\"token string\">'../actions/'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> StoreState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types/index'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> connect<span class=\"token punctuation\">,</span> Dispatch <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The real two key pieces here are the original <code class=\"language-text\">Hello</code> component as well as the <code class=\"language-text\">connect</code> function from react-redux.\n<code class=\"language-text\">connect</code> will be able to actually take our original <code class=\"language-text\">Hello</code> component and turn it into a container using two functions:</p>\n<ul>\n<li><code class=\"language-text\">mapStateToProps</code> which massages the data from the current store to part of the shape that our component needs.</li>\n<li><code class=\"language-text\">mapDispatchToProps</code> which uses creates callback props to pump actions to our store using a given <code class=\"language-text\">dispatch</code> function.</li>\n</ul>\n<p>If we recall, our application state consists of two properties: <code class=\"language-text\">languageName</code> and <code class=\"language-text\">enthusiasmLevel</code>.\nOur <code class=\"language-text\">Hello</code> component, on the other hand, expected a <code class=\"language-text\">name</code> and an <code class=\"language-text\">enthusiasmLevel</code>.\n<code class=\"language-text\">mapStateToProps</code> will get the relevant data from the store, and adjust it if necessary, for our component’s props.\nLet’s go ahead and write that.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">mapStateToProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> enthusiasmLevel<span class=\"token punctuation\">,</span> languageName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span> StoreState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    enthusiasmLevel<span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> languageName<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that <code class=\"language-text\">mapStateToProps</code> only creates 2 out of 4 of the properties a <code class=\"language-text\">Hello</code> component expects.\nNamely, we still want to pass in the <code class=\"language-text\">onIncrement</code> and <code class=\"language-text\">onDecrement</code> callbacks.\n<code class=\"language-text\">mapDispatchToProps</code> is a function that takes a dispatcher function.\nThis dispatcher function can pass actions into our store to make updates, so we can create a pair of callbacks that will call the dispatcher as necessary.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">mapDispatchToProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dispatch<span class=\"token punctuation\">:</span> Dispatch<span class=\"token operator\">&lt;</span>actions<span class=\"token punctuation\">.</span>EnthusiasmAction<span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">onIncrement</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>actions<span class=\"token punctuation\">.</span><span class=\"token function\">incrementEnthusiasm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">onDecrement</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>actions<span class=\"token punctuation\">.</span><span class=\"token function\">decrementEnthusiasm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Finally, we’re ready to call <code class=\"language-text\">connect</code>.\n<code class=\"language-text\">connect</code> will first take <code class=\"language-text\">mapStateToProps</code> and <code class=\"language-text\">mapDispatchToProps</code>, and then return another function that we can use to wrap our component.\nOur resulting container is defined with the following line of code:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">,</span> mapDispatchToProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>When we’re finished, our file should look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// src/containers/Hello.tsx</span>\n\n<span class=\"token keyword\">import</span> Hello <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/Hello'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> actions <span class=\"token keyword\">from</span> <span class=\"token string\">'../actions/'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> StoreState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types/index'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> connect<span class=\"token punctuation\">,</span> Dispatch <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">mapStateToProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> enthusiasmLevel<span class=\"token punctuation\">,</span> languageName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span> StoreState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    enthusiasmLevel<span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> languageName<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">mapDispatchToProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dispatch<span class=\"token punctuation\">:</span> Dispatch<span class=\"token operator\">&lt;</span>actions<span class=\"token punctuation\">.</span>EnthusiasmAction<span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">onIncrement</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>actions<span class=\"token punctuation\">.</span><span class=\"token function\">incrementEnthusiasm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">onDecrement</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>actions<span class=\"token punctuation\">.</span><span class=\"token function\">decrementEnthusiasm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">,</span> mapDispatchToProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Creating a store</h2>\n<p>Let’s go back to <code class=\"language-text\">src/index.tsx</code>.\nTo put this all together, we need to create a store with an initial state, and set it up with all of our reducers.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> enthusiasm <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./reducers/index'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> StoreState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./types/index'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> createStore<span class=\"token operator\">&lt;</span>StoreState<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>enthusiasm<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  enthusiasmLevel<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  languageName<span class=\"token punctuation\">:</span> <span class=\"token string\">'TypeScript'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">store</code> is, as you might’ve guessed, our central store for our application’s global state.</p>\n<p>Next, we’re going to swap our use of <code class=\"language-text\">./src/components/Hello</code> with <code class=\"language-text\">./src/containers/Hello</code> and use react-redux’s <code class=\"language-text\">Provider</code> to wire up our props with our container.\nWe’ll import each:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> Hello <span class=\"token keyword\">from</span> <span class=\"token string\">'./containers/Hello'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Provider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>and pass our <code class=\"language-text\">store</code> through to the <code class=\"language-text\">Provider</code>’s attributes:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Provider store<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Hello <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLElement\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Notice that <code class=\"language-text\">Hello</code> no longer needs props, since we used our <code class=\"language-text\">connect</code> function to adapt our application’s state for our wrapped <code class=\"language-text\">Hello</code> component’s props.</p>\n<h1>Ejecting</h1>\n<p>If at any point, you feel like there are certain customizations that the create-react-app setup has made difficult, you can always opt-out and get the various configuration options you need.\nFor example, if you’d like to add a Webpack plugin, it might be necessary to take advantage of the “eject” functionality that create-react-app provides.</p>\n<p>Simply run</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npm run eject</code></pre></div>\n<p>and you should be good to go!</p>\n<p>As a heads up, you may want to commit all your work before running an eject.\nYou cannot undo an eject command, so opting out is permanent unless you can recover from a commit prior to running an eject.</p>\n<h1>Next steps</h1>\n<p>create-react-app comes with a lot of great stuff.\nMuch of it is documented in the default <code class=\"language-text\">README.md</code> that was generated for our project, so give that a quick read.</p>\n<p>If you still want to learn more about Redux, you can <a href=\"http://redux.js.org/\">check out the official website</a> for documentation.\nThe same goes <a href=\"https://mobx.js.org/\">for MobX</a>.</p>\n<p>If you want to eject at some point, you may need to know a little bit more about Webpack.\nYou can check out our <a href=\"./React%20&#x26;%20Webpack.md\">React &#x26; Webpack walkthrough here</a>.</p>\n<p>At some point you might need routing.\nThere are several solutions, but <a href=\"https://github.com/ReactTraining/react-router\">react-router</a> is probably the most popular for Redux projects, and is often used in conjunction with <a href=\"https://github.com/reactjs/react-router-redux\">react-router-redux</a>.</p>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/react.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/react.html","isOldHandbook":true}}}