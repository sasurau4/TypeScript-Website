{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/triple-slash-directives.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"c64d3f85-4cef-5446-a618-e121f6a6fadb","excerpt":"{% raw %}Triple-slash directives are single-line comments containing a single XML tag.\nThe contents of the comment are used as compiler directives. Triple-slash…","html":"<p>{% raw %}Triple-slash directives are single-line comments containing a single XML tag.\nThe contents of the comment are used as compiler directives.</p>\n<p>Triple-slash directives are <strong>only</strong> valid at the top of their containing file.\nA triple-slash directive can only be preceded by single or multi-line comments, including other triple-slash directives.\nIf they are encountered following a statement or a declaration they are treated as regular single-line comments, and hold no special meaning.</p>\n<h2><code class=\"language-text\">/// &lt;reference path=&quot;...&quot; /&gt;</code></h2>\n<p>The <code class=\"language-text\">/// &lt;reference path=&quot;...&quot; /&gt;</code> directive is the most common of this group.\nIt serves as a declaration of <em>dependency</em> between files.</p>\n<p>Triple-slash references instruct the compiler to include additional files in the compilation process.</p>\n<p>They also serve as a method to order the output when using <code class=\"language-text\">--out</code> or <code class=\"language-text\">--outFile</code>.\nFiles are emitted to the output file location in the same order as the input after preprocessing pass.</p>\n<h3>Preprocessing input files</h3>\n<p>The compiler performs a preprocessing pass on input files to resolve all triple-slash reference directives.\nDuring this process, additional files are added to the compilation.</p>\n<p>The process starts with a set of <em>root files</em>;\nthese are the file names specified on the command-line or in the <code class=\"language-text\">&quot;files&quot;</code> list in the <code class=\"language-text\">tsconfig.json</code> file.\nThese root files are preprocessed in the same order they are specified.\nBefore a file is added to the list, all triple-slash references in it are processed, and their targets included.\nTriple-slash references are resolved in a depth first manner, in the order they have been seen in the file.</p>\n<p>A triple-slash reference path is resolved relative to the containing file, if unrooted.</p>\n<h3>Errors</h3>\n<p>It is an error to reference a file that does not exist.\nIt is an error for a file to have a triple-slash reference to itself.</p>\n<h3>Using <code class=\"language-text\">--noResolve</code></h3>\n<p>If the compiler flag <code class=\"language-text\">--noResolve</code> is specified, triple-slash references are ignored; they neither result in adding new files, nor change the order of the files provided.</p>\n<h2><code class=\"language-text\">/// &lt;reference types=&quot;...&quot; /&gt;</code></h2>\n<p>Similar to a <code class=\"language-text\">/// &lt;reference path=&quot;...&quot; /&gt;</code> directive, which serves as a declaration of <em>dependency</em>, a <code class=\"language-text\">/// &lt;reference types=&quot;...&quot; /&gt;</code> directive declares a dependency on a package.</p>\n<p>The process of resolving these package names is similar to the process of resolving module names in an <code class=\"language-text\">import</code> statement.\nAn easy way to think of triple-slash-reference-types directives are as an <code class=\"language-text\">import</code> for declaration packages.</p>\n<p>For example, including <code class=\"language-text\">/// &lt;reference types=&quot;node&quot; /&gt;</code> in a declaration file declares that this file uses names declared in <code class=\"language-text\">@types/node/index.d.ts</code>;\nand thus, this package needs to be included in the compilation along with the declaration file.</p>\n<p>Use these directives only when you’re authoring a <code class=\"language-text\">d.ts</code> file by hand.</p>\n<p>For declaration files generated during compilation, the compiler will automatically add <code class=\"language-text\">/// &lt;reference types=&quot;...&quot; /&gt;</code> for you;\nA <code class=\"language-text\">/// &lt;reference types=&quot;...&quot; /&gt;</code> in a generated declaration file is added <em>if and only if</em> the resulting file uses any declarations from the referenced package.</p>\n<p>For declaring a dependency on an <code class=\"language-text\">@types</code> package in a <code class=\"language-text\">.ts</code> file, use <code class=\"language-text\">--types</code> on the command line or in your <code class=\"language-text\">tsconfig.json</code> instead.\nSee <a href=\"./tsconfig.json.md#types-typeroots-and-types\">using <code class=\"language-text\">@types</code>, <code class=\"language-text\">typeRoots</code> and <code class=\"language-text\">types</code> in <code class=\"language-text\">tsconfig.json</code> files</a> for more details.</p>\n<h2><code class=\"language-text\">/// &lt;reference lib=&quot;...&quot; /&gt;</code></h2>\n<p>This directive allows a file to explicitly include an existing built-in <em>lib</em> file.</p>\n<p>Built-in <em>lib</em> files are referenced in the same fashion as the <code class=\"language-text\">&quot;lib&quot;</code> compiler option in <em>tsconfig.json</em> (e.g. use <code class=\"language-text\">lib=&quot;es2015&quot;</code> and not <code class=\"language-text\">lib=&quot;lib.es2015.d.ts&quot;</code>, etc.).</p>\n<p>For declaration file authors who rely on built-in types, e.g. DOM APIs or built-in JS run-time constructors like <code class=\"language-text\">Symbol</code> or <code class=\"language-text\">Iterable</code>, triple-slash-reference lib directives are recommended. Previously these .d.ts files had to add forward/duplicate declarations of such types.</p>\n<p>For example, adding <code class=\"language-text\">/// &lt;reference lib=&quot;es2017.string&quot; /&gt;</code> to one of the files in a compilation is equivalent to compiling with <code class=\"language-text\">--lib es2017.string</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/// &lt;reference lib=\"es2017.string\" /></span>\n\n<span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2><code class=\"language-text\">/// &lt;reference no-default-lib=&quot;true&quot;/&gt;</code></h2>\n<p>This directive marks a file as a <em>default library</em>.\nYou will see this comment at the top of <code class=\"language-text\">lib.d.ts</code> and its different variants.</p>\n<p>This directive instructs the compiler to <em>not</em> include the default library (i.e. <code class=\"language-text\">lib.d.ts</code>) in the compilation.\nThe impact here is similar to passing <code class=\"language-text\">--noLib</code> on the command line.</p>\n<p>Also note that when passing <code class=\"language-text\">--skipDefaultLibCheck</code>, the compiler will only skip checking files with <code class=\"language-text\">/// &lt;reference no-default-lib=&quot;true&quot;/&gt;</code>.</p>\n<h2><code class=\"language-text\">/// &lt;amd-module /&gt;</code></h2>\n<p>By default AMD modules are generated anonymous.\nThis can lead to problems when other tools are used to process the resulting modules, such as bundlers (e.g. <code class=\"language-text\">r.js</code>).</p>\n<p>The <code class=\"language-text\">amd-module</code> directive allows passing an optional module name to the compiler:</p>\n<h5>amdModule.ts</h5>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">///&lt;amd-module name=\"NamedModule\"/></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Will result in assigning the name <code class=\"language-text\">NamedModule</code> to the module as part of calling the AMD <code class=\"language-text\">define</code>:</p>\n<h5>amdModule.js</h5>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NamedModule\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"require\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"exports\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">require<span class=\"token punctuation\">,</span> exports</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> <span class=\"token constant\">C</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">function</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    exports<span class=\"token punctuation\">.</span><span class=\"token constant\">C</span> <span class=\"token operator\">=</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2><code class=\"language-text\">/// &lt;amd-dependency /&gt;</code></h2>\n<blockquote>\n<p><strong>Note</strong>: this directive has been deprecated. Use <code class=\"language-text\">import &quot;moduleName&quot;;</code> statements instead.</p>\n</blockquote>\n<p><code class=\"language-text\">/// &lt;amd-dependency path=&quot;x&quot; /&gt;</code> informs the compiler about a non-TS module dependency that needs to be injected in the resulting module’s require call.</p>\n<p>The <code class=\"language-text\">amd-dependency</code> directive can also have an optional <code class=\"language-text\">name</code> property; this allows passing an optional name for an amd-dependency:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/// &lt;amd-dependency path=\"legacy/moduleA\" name=\"moduleA\"/></span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">var</span> moduleA<span class=\"token punctuation\">:</span>MyType\nmoduleA<span class=\"token punctuation\">.</span><span class=\"token function\">callStuff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Generated JS code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"require\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"exports\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"legacy/moduleA\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">require<span class=\"token punctuation\">,</span> exports<span class=\"token punctuation\">,</span> moduleA</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    moduleA<span class=\"token punctuation\">.</span><span class=\"token function\">callStuff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/triple-slash-directives.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/triple-slash-directives.html","isOldHandbook":true}}}