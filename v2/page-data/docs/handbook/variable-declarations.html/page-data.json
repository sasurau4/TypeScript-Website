{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/variable-declarations.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"5768be11-5955-52e6-90fa-8d5764fbd39e","excerpt":"{% raw %}# Variable Declarations  and  are two relatively new types of variable declarations in JavaScript.\nAs we mentioned earlier,  is similar to  in some…","html":"<p>{% raw %}# Variable Declarations</p>\n<p><code class=\"language-text\">let</code> and <code class=\"language-text\">const</code> are two relatively new types of variable declarations in JavaScript.\n<a href=\"./Basic%20Types.md#a-note-about-let\">As we mentioned earlier</a>, <code class=\"language-text\">let</code> is similar to <code class=\"language-text\">var</code> in some respects, but allows users to avoid some of the common “gotchas” that users run into in JavaScript.\n<code class=\"language-text\">const</code> is an augmentation of <code class=\"language-text\">let</code> in that it prevents re-assignment to a variable.</p>\n<p>With TypeScript being a superset of JavaScript, the language naturally supports <code class=\"language-text\">let</code> and <code class=\"language-text\">const</code>.\nHere we’ll elaborate more on these new declarations and why they’re preferable to <code class=\"language-text\">var</code>.</p>\n<p>If you’ve used JavaScript offhandedly, the next section might be a good way to refresh your memory.\nIf you’re intimately familiar with all the quirks of <code class=\"language-text\">var</code> declarations in JavaScript, you might find it easier to skip ahead.</p>\n<h1><code class=\"language-text\">var</code> declarations</h1>\n<p>Declaring a variable in JavaScript has always traditionally been done with the <code class=\"language-text\">var</code> keyword.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As you might’ve figured out, we just declared a variable named <code class=\"language-text\">a</code> with the value <code class=\"language-text\">10</code>.</p>\n<p>We can also declare a variable inside of a function:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> message<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>and we can also access those same variables within other functions:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> g <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns '11'</span></code></pre></div>\n<p>In this above example, <code class=\"language-text\">g</code> captured the variable <code class=\"language-text\">a</code> declared in <code class=\"language-text\">f</code>.\nAt any point that <code class=\"language-text\">g</code> gets called, the value of <code class=\"language-text\">a</code> will be tied to the value of <code class=\"language-text\">a</code> in <code class=\"language-text\">f</code>.\nEven if <code class=\"language-text\">g</code> is called once <code class=\"language-text\">f</code> is done running, it will be able to access and modify <code class=\"language-text\">a</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns '2'</span></code></pre></div>\n<h2>Scoping rules</h2>\n<p><code class=\"language-text\">var</code> declarations have some odd scoping rules for those used to other languages.\nTake the following example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">shouldInitialize<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shouldInitialize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// returns '10'</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns 'undefined'</span></code></pre></div>\n<p>Some readers might do a double-take at this example.\nThe variable <code class=\"language-text\">x</code> was declared <em>within the <code class=\"language-text\">if</code> block</em>, and yet we were able to access it from outside that block.\nThat’s because <code class=\"language-text\">var</code> declarations are accessible anywhere within their containing function, module, namespace, or global scope - all which we’ll go over later on - regardless of the containing block.\nSome people call this <em><code class=\"language-text\">var</code>-scoping</em> or <em>function-scoping</em>.\nParameters are also function scoped.</p>\n<p>These scoping rules can cause several types of mistakes.\nOne problem they exacerbate is the fact that it is not an error to declare the same variable multiple times:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">sumMatrix</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">matrix<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> currentRow <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> currentRow<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">+=</span> currentRow<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Maybe it was easy to spot out for some, but the inner <code class=\"language-text\">for</code>-loop will accidentally overwrite the variable <code class=\"language-text\">i</code> because <code class=\"language-text\">i</code> refers to the same function-scoped variable.\nAs experienced developers know by now, similar sorts of bugs slip through code reviews and can be an endless source of frustration.</p>\n<h2>Variable capturing quirks</h2>\n<p>Take a quick second to guess what the output of the following snippet is:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>For those unfamiliar, <code class=\"language-text\">setTimeout</code> will try to execute a function after a certain number of milliseconds (though waiting for anything else to stop running).</p>\n<p>Ready? Take a look:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">10\n10\n10\n10\n10\n10\n10\n10\n10\n10</code></pre></div>\n<p>Many JavaScript developers are intimately familiar with this behavior, but if you’re surprised, you’re certainly not alone.\nMost people expect the output to be</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">0\n1\n2\n3\n4\n5\n6\n7\n8\n9</code></pre></div>\n<p>Remember what we mentioned earlier about variable capturing?\nEvery function expression we pass to <code class=\"language-text\">setTimeout</code> actually refers to the same <code class=\"language-text\">i</code> from the same scope.</p>\n<p>Let’s take a minute to consider what that means.\n<code class=\"language-text\">setTimeout</code> will run a function after some number of milliseconds, <em>but only</em> after the <code class=\"language-text\">for</code> loop has stopped executing;\nBy the time the <code class=\"language-text\">for</code> loop has stopped executing, the value of <code class=\"language-text\">i</code> is <code class=\"language-text\">10</code>.\nSo each time the given function gets called, it will print out <code class=\"language-text\">10</code>!</p>\n<p>A common work around is to use an IIFE - an Immediately Invoked Function Expression - to capture <code class=\"language-text\">i</code> at each iteration:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// capture the current state of 'i'</span>\n    <span class=\"token comment\">// by invoking a function with its current value</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This odd-looking pattern is actually pretty common.\nThe <code class=\"language-text\">i</code> in the parameter list actually shadows the <code class=\"language-text\">i</code> declared in the <code class=\"language-text\">for</code> loop, but since we named them the same, we didn’t have to modify the loop body too much.</p>\n<h1><code class=\"language-text\">let</code> declarations</h1>\n<p>By now you’ve figured out that <code class=\"language-text\">var</code> has some problems, which is precisely why <code class=\"language-text\">let</code> statements were introduced.\nApart from the keyword used, <code class=\"language-text\">let</code> statements are written the same way <code class=\"language-text\">var</code> statements are.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> hello <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The key difference is not in the syntax, but in the semantics, which we’ll now dive into.</p>\n<h2>Block-scoping</h2>\n<p>When a variable is declared using <code class=\"language-text\">let</code>, it uses what some call <em>lexical-scoping</em> or <em>block-scoping</em>.\nUnlike variables declared with <code class=\"language-text\">var</code> whose scopes leak out to their containing function, block-scoped variables are not visible outside of their nearest containing block or <code class=\"language-text\">for</code>-loop.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Still okay to reference 'a'</span>\n        <span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Error: 'b' doesn't exist here</span>\n    <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here, we have two local variables <code class=\"language-text\">a</code> and <code class=\"language-text\">b</code>.\n<code class=\"language-text\">a</code>’s scope is limited to the body of <code class=\"language-text\">f</code> while <code class=\"language-text\">b</code>’s scope is limited to the containing <code class=\"language-text\">if</code> statement’s block.</p>\n<p>Variables declared in a <code class=\"language-text\">catch</code> clause also have similar scoping rules.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token string\">\"oh no!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Oh well.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Error: 'e' doesn't exist here</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Another property of block-scoped variables is that they can’t be read or written to before they’re actually declared.\nWhile these variables are “present” throughout their scope, all points up until their declaration are part of their <em>temporal dead zone</em>.\nThis is just a sophisticated way of saying you can’t access them before the <code class=\"language-text\">let</code> statement, and luckily TypeScript will let you know that.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// illegal to use 'a' before it's declared;</span>\n<span class=\"token keyword\">let</span> a<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Something to note is that you can still <em>capture</em> a block-scoped variable before it’s declared.\nThe only catch is that it’s illegal to call that function before the declaration.\nIf targeting ES2015, a modern runtime will throw an error; however, right now TypeScript is permissive and won’t report this as an error.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// okay to capture 'a'</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// illegal call 'foo' before 'a' is declared</span>\n<span class=\"token comment\">// runtimes should throw an error here</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> a<span class=\"token punctuation\">;</span></code></pre></div>\n<p>For more information on temporal dead zones, see relevant content on the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let\">Mozilla Developer Network</a>.</p>\n<h2>Re-declarations and Shadowing</h2>\n<p>With <code class=\"language-text\">var</code> declarations, we mentioned that it didn’t matter how many times you declared your variables; you just got one.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> x<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the above example, all declarations of <code class=\"language-text\">x</code> actually refer to the <em>same</em> <code class=\"language-text\">x</code>, and this is perfectly valid.\nThis often ends up being a source of bugs.\nThankfully, <code class=\"language-text\">let</code> declarations are not as forgiving.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error: can't re-declare 'x' in the same scope</span></code></pre></div>\n<p>The variables don’t necessarily need to both be block-scoped for TypeScript to tell us that there’s a problem.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error: interferes with parameter declaration</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error: can't have both declarations of 'x'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>That’s not to say that block-scoped variable can never be declared with a function-scoped variable.\nThe block-scoped variable just needs to be declared within a distinctly different block.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">condition<span class=\"token punctuation\">,</span> x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns '0'</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// returns '100'</span></code></pre></div>\n<p>The act of introducing a new name in a more nested scope is called <em>shadowing</em>.\nIt is a bit of a double-edged sword in that it can introduce certain bugs on its own in the event of accidental shadowing, while also preventing certain bugs.\nFor instance, imagine we had written our earlier <code class=\"language-text\">sumMatrix</code> function using <code class=\"language-text\">let</code> variables.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">sumMatrix</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">matrix<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> currentRow <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> currentRow<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">+=</span> currentRow<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This version of the loop will actually perform the summation correctly because the inner loop’s <code class=\"language-text\">i</code> shadows <code class=\"language-text\">i</code> from the outer loop.</p>\n<p>Shadowing should <em>usually</em> be avoided in the interest of writing clearer code.\nWhile there are some scenarios where it may be fitting to take advantage of it, you should use your best judgement.</p>\n<h2>Block-scoped variable capturing</h2>\n<p>When we first touched on the idea of variable capturing with <code class=\"language-text\">var</code> declaration, we briefly went into how variables act once captured.\nTo give a better intuition of this, each time a scope is run, it creates an “environment” of variables.\nThat environment and its captured variables can exist even after everything within its scope has finished executing.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">theCityThatAlwaysSleeps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> getCity<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> city <span class=\"token operator\">=</span> <span class=\"token string\">\"Seattle\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function-variable function\">getCity</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> city<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">getCity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Because we’ve captured <code class=\"language-text\">city</code> from within its environment, we’re still able to access it despite the fact that the <code class=\"language-text\">if</code> block finished executing.</p>\n<p>Recall that with our earlier <code class=\"language-text\">setTimeout</code> example, we ended up needing to use an IIFE to capture the state of a variable for every iteration of the <code class=\"language-text\">for</code> loop.\nIn effect, what we were doing was creating a new variable environment for our captured variables.\nThat was a bit of a pain, but luckily, you’ll never have to do that again in TypeScript.</p>\n<p><code class=\"language-text\">let</code> declarations have drastically different behavior when declared as part of a loop.\nRather than just introducing a new environment to the loop itself, these declarations sort of create a new scope <em>per iteration</em>.\nSince this is what we were doing anyway with our IIFE, we can change our old <code class=\"language-text\">setTimeout</code> example to just use a <code class=\"language-text\">let</code> declaration.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>and as expected, this will print out</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">0\n1\n2\n3\n4\n5\n6\n7\n8\n9</code></pre></div>\n<h1><code class=\"language-text\">const</code> declarations</h1>\n<p><code class=\"language-text\">const</code> declarations are another way of declaring variables.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> numLivesForCat <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>They are like <code class=\"language-text\">let</code> declarations but, as their name implies, their value cannot be changed once they are bound.\nIn other words, they have the same scoping rules as <code class=\"language-text\">let</code>, but you can’t re-assign to them.</p>\n<p>This should not be confused with the idea that the values they refer to are <em>immutable</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> numLivesForCat <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> kitty <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Aurora\"</span><span class=\"token punctuation\">,</span>\n    numLives<span class=\"token punctuation\">:</span> numLivesForCat<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Error</span>\nkitty <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Danielle\"</span><span class=\"token punctuation\">,</span>\n    numLives<span class=\"token punctuation\">:</span> numLivesForCat\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// all \"okay\"</span>\nkitty<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Rory\"</span><span class=\"token punctuation\">;</span>\nkitty<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Kitty\"</span><span class=\"token punctuation\">;</span>\nkitty<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Cat\"</span><span class=\"token punctuation\">;</span>\nkitty<span class=\"token punctuation\">.</span>numLives<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Unless you take specific measures to avoid it, the internal state of a <code class=\"language-text\">const</code> variable is still modifiable.\nFortunately, TypeScript allows you to specify that members of an object are <code class=\"language-text\">readonly</code>.\nThe <a href=\"/14653dd7a6e32282917dbf7a1d2399be/Interfaces.md\">chapter on Interfaces</a> has the details.</p>\n<h1><code class=\"language-text\">let</code> vs. <code class=\"language-text\">const</code></h1>\n<p>Given that we have two types of declarations with similar scoping semantics, it’s natural to find ourselves asking which one to use.\nLike most broad questions, the answer is: it depends.</p>\n<p>Applying the <a href=\"https://en.wikipedia.org/wiki/Principle_of_least_privilege\">principle of least privilege</a>, all declarations other than those you plan to modify should use <code class=\"language-text\">const</code>.\nThe rationale is that if a variable didn’t need to get written to, others working on the same codebase shouldn’t automatically be able to write to the object, and will need to consider whether they really need to reassign to the variable.\nUsing <code class=\"language-text\">const</code> also makes code more predictable when reasoning about flow of data.</p>\n<p>Use your best judgement, and if applicable, consult the matter with the rest of your team.</p>\n<p>The majority of this handbook uses <code class=\"language-text\">let</code> declarations.</p>\n<h1>Destructuring</h1>\n<p>Another ECMAScript 2015 feature that TypeScript has is destructuring.\nFor a complete reference, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">the article on the Mozilla Developer Network</a>.\nIn this section, we’ll give a short overview.</p>\n<h2>Array destructuring</h2>\n<p>The simplest form of destructuring is array destructuring assignment:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> input <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// outputs 1</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// outputs 2</span></code></pre></div>\n<p>This creates two new variables named <code class=\"language-text\">first</code> and <code class=\"language-text\">second</code>.\nThis is equivalent to using indexing, but is much more convenient:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">first <span class=\"token operator\">=</span> input<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nsecond <span class=\"token operator\">=</span> input<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Destructuring works with already-declared variables as well:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// swap variables</span>\n<span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>second<span class=\"token punctuation\">,</span> first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And with parameters to a function:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can create a variable for the remaining items in a list using the syntax <code class=\"language-text\">...</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// outputs 1</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// outputs [ 2, 3, 4 ]</span></code></pre></div>\n<p>Of course, since this is JavaScript, you can just ignore trailing elements you don’t care about:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// outputs 1</span></code></pre></div>\n<p>Or other elements:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> fourth<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// outputs 2</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fourth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// outputs 4</span></code></pre></div>\n<h2>Tuple destructuring</h2>\n<p>Tuples may be destructured like arrays; the destructuring variables get the types of the corresponding tuple elements:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> tuple<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tuple<span class=\"token punctuation\">;</span> <span class=\"token comment\">// a: number, b: string, c: boolean</span></code></pre></div>\n<p>It’s an error to destructure a tuple beyond the range of its elements:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tuple<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error, no element at index 3</span></code></pre></div>\n<p>As with arrays, you can destructure the rest of the tuple with <code class=\"language-text\">...</code>, to get a shorter tuple:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>bc<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tuple<span class=\"token punctuation\">;</span> <span class=\"token comment\">// bc: [string, boolean]</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>d<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tuple<span class=\"token punctuation\">;</span> <span class=\"token comment\">// d: [], the empty tuple</span></code></pre></div>\n<p>Or ignore trailing elements, or other elements:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tuple<span class=\"token punctuation\">;</span> <span class=\"token comment\">// a: number</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tuple<span class=\"token punctuation\">;</span> <span class=\"token comment\">// b: string</span></code></pre></div>\n<h2>Object destructuring</h2>\n<p>You can also destructure objects:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">:</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span>\n    b<span class=\"token punctuation\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span>\n    c<span class=\"token punctuation\">:</span> <span class=\"token string\">\"bar\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">,</span> b <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span></code></pre></div>\n<p>This creates new variables <code class=\"language-text\">a</code> and <code class=\"language-text\">b</code> from <code class=\"language-text\">o.a</code> and <code class=\"language-text\">o.b</code>.\nNotice that you can skip <code class=\"language-text\">c</code> if you don’t need it.</p>\n<p>Like array destructuring, you can have assignment without declaration:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">,</span> b <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token string\">\"baz\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token number\">101</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Notice that we had to surround this statement with parentheses.\nJavaScript normally parses a <code class=\"language-text\">{</code> as the start of block.</p>\n<p>You can create a variable for the remaining items in an object using the syntax <code class=\"language-text\">...</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>passthrough <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> passthrough<span class=\"token punctuation\">.</span>b <span class=\"token operator\">+</span> passthrough<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Property renaming</h3>\n<p>You can also give different names to properties:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> newName1<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> newName2 <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here the syntax starts to get confusing.\nYou can read <code class=\"language-text\">a: newName1</code> as ”<code class=\"language-text\">a</code> as <code class=\"language-text\">newName1</code>”.\nThe direction is left-to-right, as if you had written:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> newName1 <span class=\"token operator\">=</span> o<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> newName2 <span class=\"token operator\">=</span> o<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Confusingly, the colon here does <em>not</em> indicate the type.\nThe type, if you specify it, still needs to be written after the entire destructuring:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">,</span> b <span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Default values</h3>\n<p>Default values let you specify a default value in case a property is undefined:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">keepWholeObject</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">wholeObject<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1001</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> wholeObject<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this example the <code class=\"language-text\">b?</code> indicates that <code class=\"language-text\">b</code> is optional, so it may be <code class=\"language-text\">undefined</code>.\n<code class=\"language-text\">keepWholeObject</code> now has a variable for <code class=\"language-text\">wholeObject</code> as well as the properties <code class=\"language-text\">a</code> and <code class=\"language-text\">b</code>, even if <code class=\"language-text\">b</code> is undefined.</p>\n<h2>Function declarations</h2>\n<p>Destructuring also works in function declarations.\nFor simple cases this is straightforward:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token constant\">C</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">,</span> b <span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">C</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But specifying defaults is more common for parameters, and getting defaults right with destructuring can be tricky.\nFirst of all, you need to remember to put the pattern before the default value.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> a<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>The snippet above is an example of type inference, explained later in the handbook.</p>\n</blockquote>\n<p>Then, you need to remember to give a default for optional properties on the destructured property instead of the main initializer.\nRemember that <code class=\"language-text\">C</code> was defined with <code class=\"language-text\">b</code> optional:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token string\">\"yes\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok, default b = 0</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok, default to { a: \"\" }, which then defaults b = 0</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error, 'a' is required if you supply an argument</span></code></pre></div>\n<p>Use destructuring with care.\nAs the previous example demonstrates, anything but the simplest destructuring expression is confusing.\nThis is especially true with deeply nested destructuring, which gets <em>really</em> hard to understand even without piling on renaming, default values, and type annotations.\nTry to keep destructuring expressions small and simple.\nYou can always write the assignments that destructuring would generate yourself.</p>\n<h2>Spread</h2>\n<p>The spread operator is the opposite of destructuring.\nIt allows you to spread an array into another array, or an object into another object.\nFor example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> first <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> second <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> bothPlus <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>first<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>second<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This gives bothPlus the value <code class=\"language-text\">[0, 1, 2, 3, 4, 5]</code>.\nSpreading creates a shallow copy of <code class=\"language-text\">first</code> and <code class=\"language-text\">second</code>.\nThey are not changed by the spread.</p>\n<p>You can also spread objects:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> defaults <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> food<span class=\"token punctuation\">:</span> <span class=\"token string\">\"spicy\"</span><span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">:</span> <span class=\"token string\">\"$$\"</span><span class=\"token punctuation\">,</span> ambiance<span class=\"token punctuation\">:</span> <span class=\"token string\">\"noisy\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> search <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>defaults<span class=\"token punctuation\">,</span> food<span class=\"token punctuation\">:</span> <span class=\"token string\">\"rich\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now <code class=\"language-text\">search</code> is <code class=\"language-text\">{ food: &quot;rich&quot;, price: &quot;$$&quot;, ambiance: &quot;noisy&quot; }</code>.\nObject spreading is more complex than array spreading.\nLike array spreading, it proceeds from left-to-right, but the result is still an object.\nThis means that properties that come later in the spread object overwrite properties that come earlier.\nSo if we modify the previous example to spread at the end:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> defaults <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> food<span class=\"token punctuation\">:</span> <span class=\"token string\">\"spicy\"</span><span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">:</span> <span class=\"token string\">\"$$\"</span><span class=\"token punctuation\">,</span> ambiance<span class=\"token punctuation\">:</span> <span class=\"token string\">\"noisy\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> search <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> food<span class=\"token punctuation\">:</span> <span class=\"token string\">\"rich\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>defaults <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Then the <code class=\"language-text\">food</code> property in <code class=\"language-text\">defaults</code> overwrites <code class=\"language-text\">food: &quot;rich&quot;</code>, which is not what we want in this case.</p>\n<p>Object spread also has a couple of other surprising limits.\nFirst, it only includes an objects’\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">own, enumerable properties</a>.\nBasically, that means you lose methods when you spread instances of an object:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>\n  p <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> clone <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>c <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nclone<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span>\nclone<span class=\"token punctuation\">.</span><span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error!</span></code></pre></div>\n<p>Second, the Typescript compiler doesn’t allow spreads of type parameters from generic functions.\nThat feature is expected in future versions of the language.</p>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/variable-declarations.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/variable-declarations.html","isOldHandbook":true}}}