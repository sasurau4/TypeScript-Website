{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/enums.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"c1f1ebbe-8854-5b29-aad4-e496887c5d31","excerpt":"{% raw %}# Enums Enums allow us to define a set of named constants.\nUsing enums can make it easier to document intent, or create a set of distinct cases…","html":"<p>{% raw %}# Enums</p>\n<p>Enums allow us to define a set of named constants.\nUsing enums can make it easier to document intent, or create a set of distinct cases.\nTypeScript provides both numeric and string-based enums.</p>\n<h2>Numeric enums</h2>\n<p>We’ll first start off with numeric enums, which are probably more familiar if you’re coming from other languages.\nAn enum can be defined using the <code class=\"language-text\">enum</code> keyword.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> Direction <span class=\"token punctuation\">{</span>\n    Up <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    Down<span class=\"token punctuation\">,</span>\n    Left<span class=\"token punctuation\">,</span>\n    Right<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Above, we have a numeric enum where <code class=\"language-text\">Up</code> is initialized with <code class=\"language-text\">1</code>.\nAll of the following members are auto-incremented from that point on.\nIn other words, <code class=\"language-text\">Direction.Up</code> has the value <code class=\"language-text\">1</code>,  <code class=\"language-text\">Down</code> has <code class=\"language-text\">2</code>, <code class=\"language-text\">Left</code> has <code class=\"language-text\">3</code>, and <code class=\"language-text\">Right</code> has <code class=\"language-text\">4</code>.</p>\n<p>If we wanted, we could leave off the initializers entirely:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> Direction <span class=\"token punctuation\">{</span>\n    Up<span class=\"token punctuation\">,</span>\n    Down<span class=\"token punctuation\">,</span>\n    Left<span class=\"token punctuation\">,</span>\n    Right<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here, <code class=\"language-text\">Up</code> would have the value <code class=\"language-text\">0</code>, <code class=\"language-text\">Down</code> would have <code class=\"language-text\">1</code>, etc.\nThis auto-incrementing behavior is useful for cases where we might not care about the member values themselves, but do care that each value is distinct from other values in the same enum.</p>\n<p>Using an enum is simple: just access any member as a property off of the enum itself, and declare types using the name of the enum:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> Response <span class=\"token punctuation\">{</span>\n    No <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    Yes <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">respond</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">recipient<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">:</span> Response</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">respond</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Princess Caroline\"</span><span class=\"token punctuation\">,</span> Response<span class=\"token punctuation\">.</span>Yes<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Numeric enums can be mixed in <a href=\"#computed-and-constant-members\">computed and constant members (see below)</a>.\nThe short story is, enums without initializers either need to be first, or have to come after numeric enums initialized with numeric constants or other constant enum members.\nIn other words, the following isn’t allowed:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> <span class=\"token constant\">E</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token function\">getSomeValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">B</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Error! Enum member must have initializer.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>String enums</h2>\n<p>String enums are a similar concept, but have some subtle <a href=\"#enums-at-runtime\">runtime differences</a> as documented below.\nIn a string enum, each member has to be constant-initialized with a string literal, or with another string enum member.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> Direction <span class=\"token punctuation\">{</span>\n    Up <span class=\"token operator\">=</span> <span class=\"token string\">\"UP\"</span><span class=\"token punctuation\">,</span>\n    Down <span class=\"token operator\">=</span> <span class=\"token string\">\"DOWN\"</span><span class=\"token punctuation\">,</span>\n    Left <span class=\"token operator\">=</span> <span class=\"token string\">\"LEFT\"</span><span class=\"token punctuation\">,</span>\n    Right <span class=\"token operator\">=</span> <span class=\"token string\">\"RIGHT\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>While string enums don’t have auto-incrementing behavior, string enums have the benefit that they “serialize” well.\nIn other words, if you were debugging and had to read the runtime value of a numeric enum, the value is often opaque - it doesn’t convey any useful meaning on its own (though <a href=\"#enums-at-runtime\">reverse mapping</a> can often help), string enums allow you to give a meaningful and readable value when your code runs, independent of the name of the enum member itself.</p>\n<h2>Heterogeneous enums</h2>\n<p>Technically enums can be mixed with string and numeric members, but it’s not clear why you would ever want to do so:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> BooleanLikeHeterogeneousEnum <span class=\"token punctuation\">{</span>\n    No <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    Yes <span class=\"token operator\">=</span> <span class=\"token string\">\"YES\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Unless you’re really trying to take advantage of JavaScript’s runtime behavior in a clever way, it’s advised that you don’t do this.</p>\n<h2>Computed and constant members</h2>\n<p>Each enum member has a value associated with it which can be either <em>constant</em> or <em>computed</em>.\nAn enum member is considered constant if:</p>\n<ul>\n<li>\n<p>It is the first member in the enum and it has no initializer, in which case it’s assigned the value <code class=\"language-text\">0</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// E.X is constant:</span>\n<span class=\"token keyword\">enum</span> <span class=\"token constant\">E</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">X</span> <span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>It does not have an initializer and the preceding enum member was a <em>numeric</em> constant.\nIn this case the value of the current enum member will be the value of the preceding enum member plus one.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// All enum members in 'E1' and 'E2' are constant.</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token constant\">E1</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">X</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Y</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Z</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token constant\">E2</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>The enum member is initialized with a constant enum expression.\nA constant enum expression is a subset of TypeScript expressions that can be fully evaluated at compile time.\nAn expression is a constant enum expression if it is:</p>\n<ol>\n<li>a literal enum expression (basically a string literal or a numeric literal)</li>\n<li>a reference to previously defined constant enum member (which can originate from a different enum)</li>\n<li>a parenthesized constant enum expression</li>\n<li>one of the <code class=\"language-text\">+</code>, <code class=\"language-text\">-</code>, <code class=\"language-text\">~</code> unary operators applied to constant enum expression</li>\n<li><code class=\"language-text\">+</code>, <code class=\"language-text\">-</code>, <code class=\"language-text\">*</code>, <code class=\"language-text\">/</code>, <code class=\"language-text\">%</code>, <code class=\"language-text\">&lt;&lt;</code>, <code class=\"language-text\">&gt;&gt;</code>, <code class=\"language-text\">&gt;&gt;&gt;</code>, <code class=\"language-text\">&amp;</code>, <code class=\"language-text\">|</code>, <code class=\"language-text\">^</code> binary operators with constant enum expressions as operands</li>\n</ol>\n<p>It is a compile time error for constant enum expressions to be evaluated to <code class=\"language-text\">NaN</code> or <code class=\"language-text\">Infinity</code>.</p>\n</li>\n</ul>\n<p>In all other cases enum member is considered computed.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> FileAccess <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// constant members</span>\n    None<span class=\"token punctuation\">,</span>\n    Read    <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    Write   <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    ReadWrite  <span class=\"token operator\">=</span> Read <span class=\"token operator\">|</span> Write<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// computed member</span>\n    <span class=\"token constant\">G</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">.</span>length\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Union enums and enum member types</h2>\n<p>There is a special subset of constant enum members that aren’t calculated: literal enum members.\nA literal enum member is a constant enum member with no initialized value, or with values that are initialized to</p>\n<ul>\n<li>any string literal (e.g. <code class=\"language-text\">&quot;foo&quot;</code>, <code class=\"language-text\">&quot;bar</code>, <code class=\"language-text\">&quot;baz&quot;</code>)</li>\n<li>any numeric literal (e.g. <code class=\"language-text\">1</code>, <code class=\"language-text\">100</code>)</li>\n<li>a unary minus applied to any numeric literal (e.g. <code class=\"language-text\">-1</code>, <code class=\"language-text\">-100</code>)</li>\n</ul>\n<p>When all members in an enum have literal enum values, some special semantics come to play.</p>\n<p>The first is that enum members also become types as well!\nFor example, we can say that certain members can <em>only</em> have the value of an enum member:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> ShapeKind <span class=\"token punctuation\">{</span>\n    Circle<span class=\"token punctuation\">,</span>\n    Square<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">{</span>\n    kind<span class=\"token punctuation\">:</span> ShapeKind<span class=\"token punctuation\">.</span>Circle<span class=\"token punctuation\">;</span>\n    radius<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Square</span> <span class=\"token punctuation\">{</span>\n    kind<span class=\"token punctuation\">:</span> ShapeKind<span class=\"token punctuation\">.</span>Square<span class=\"token punctuation\">;</span>\n    sideLength<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> c<span class=\"token punctuation\">:</span> Circle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    kind<span class=\"token punctuation\">:</span> ShapeKind<span class=\"token punctuation\">.</span>Square<span class=\"token punctuation\">,</span> <span class=\"token comment\">// Error! Type 'ShapeKind.Square' is not assignable to type 'ShapeKind.Circle'.</span>\n    radius<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The other change is that enum types themselves effectively become a <em>union</em> of each enum member.\nWhile we haven’t discussed <a href=\"./Advanced%20Types.md#union-types\">union types</a> yet, all that you need to know is that with union enums, the type system is able to leverage the fact that it knows the exact set of values that exist in the enum itself.\nBecause of that, TypeScript can catch silly bugs where we might be comparing values incorrectly.\nFor example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> <span class=\"token constant\">E</span> <span class=\"token punctuation\">{</span>\n    Foo<span class=\"token punctuation\">,</span>\n    Bar<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">:</span> <span class=\"token constant\">E</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">!==</span> <span class=\"token constant\">E</span><span class=\"token punctuation\">.</span>Foo <span class=\"token operator\">||</span> x <span class=\"token operator\">!==</span> <span class=\"token constant\">E</span><span class=\"token punctuation\">.</span>Bar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//             ~~~~~~~~~~~</span>\n        <span class=\"token comment\">// Error! This condition will always return 'true' since the types 'E.Foo' and 'E.Bar' have no overlap.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In that example, we first checked whether <code class=\"language-text\">x</code> was <em>not</em> <code class=\"language-text\">E.Foo</code>.\nIf that check succeeds, then our <code class=\"language-text\">||</code> will short-circuit, and the body of the ‘if’ will run.\nHowever, if the check didn’t succeed, then <code class=\"language-text\">x</code> can <em>only</em> be <code class=\"language-text\">E.Foo</code>, so it doesn’t make sense to see whether it’s equal to <code class=\"language-text\">E.Bar</code>.</p>\n<h2>Enums at runtime</h2>\n<p>Enums are real objects that exist at runtime.\nFor example, the following enum</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> <span class=\"token constant\">E</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">X</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Y</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Z</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>can actually be passed around to functions</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">X</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">.</span><span class=\"token constant\">X</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Works, since 'E' has a property named 'X' which is a number.</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token constant\">E</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Enums at compile time</h2>\n<p>Even though Enums are real objects that exist at runtime, the <code class=\"language-text\">keyof</code> keyword works differently than you might expect for typical objects. Instead, use <code class=\"language-text\">keyof typeof</code> to get a Type that represents all Enum keys as strings.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> LogLevel <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">ERROR</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">WARN</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">INFO</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">DEBUG</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * This is equivalent to:\n * type LogLevelStrings = 'ERROR' | 'WARN' | 'INFO' | 'DEBUG';\n */</span>\n<span class=\"token keyword\">type</span> LogLevelStrings <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> <span class=\"token keyword\">typeof</span> LogLevel<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">printImportant</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">:</span> LogLevelStrings<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> LogLevel<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;=</span> LogLevel<span class=\"token punctuation\">.</span><span class=\"token constant\">WARN</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Log level key is: '</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Log level value is: '</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Log level message is: '</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">printImportant</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ERROR'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'This is a message'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Reverse mappings</h3>\n<p>In addition to creating an object with property names for members, numeric enums members also get a <em>reverse mapping</em> from enum values to enum names.\nFor example, in this example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> Enum <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">A</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> Enum<span class=\"token punctuation\">.</span><span class=\"token constant\">A</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> nameOfA <span class=\"token operator\">=</span> Enum<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"A\"</span></code></pre></div>\n<p>TypeScript might compile this down to something like the the following JavaScript:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> Enum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">Enum</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Enum<span class=\"token punctuation\">[</span>Enum<span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Enum <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>Enum <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> Enum<span class=\"token punctuation\">.</span><span class=\"token constant\">A</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> nameOfA <span class=\"token operator\">=</span> Enum<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"A\"</span></code></pre></div>\n<p>In this generated code, an enum is compiled into an object that stores both forward (<code class=\"language-text\">name</code> -> <code class=\"language-text\">value</code>) and reverse (<code class=\"language-text\">value</code> -> <code class=\"language-text\">name</code>) mappings.\nReferences to other enum members are always emitted as property accesses and never inlined.</p>\n<p>Keep in mind that string enum members <em>do not</em> get a reverse mapping generated at all.</p>\n<h3><code class=\"language-text\">const</code> enums</h3>\n<p>In most cases, enums are a perfectly valid solution.\nHowever sometimes requirements are tighter.\nTo avoid paying the cost of extra generated code and additional indirection when accessing enum values, it’s possible to use <code class=\"language-text\">const</code> enums.\nConst enums are defined using the <code class=\"language-text\">const</code> modifier on our enums:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">enum</span> Enum <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">B</span> <span class=\"token operator\">=</span> <span class=\"token constant\">A</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Const enums can only use constant enum expressions and unlike regular enums they are completely removed during compilation.\nConst enum members are inlined at use sites.\nThis is possible since const enums cannot have computed members.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">enum</span> Directions <span class=\"token punctuation\">{</span>\n    Up<span class=\"token punctuation\">,</span>\n    Down<span class=\"token punctuation\">,</span>\n    Left<span class=\"token punctuation\">,</span>\n    Right\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> directions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>Directions<span class=\"token punctuation\">.</span>Up<span class=\"token punctuation\">,</span> Directions<span class=\"token punctuation\">.</span>Down<span class=\"token punctuation\">,</span> Directions<span class=\"token punctuation\">.</span>Left<span class=\"token punctuation\">,</span> Directions<span class=\"token punctuation\">.</span>Right<span class=\"token punctuation\">]</span></code></pre></div>\n<p>in generated code will become</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> directions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span> <span class=\"token comment\">/* Up */</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token comment\">/* Down */</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token comment\">/* Left */</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token comment\">/* Right */</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Ambient enums</h2>\n<p>Ambient enums are used to describe the shape of already existing enum types.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">enum</span> Enum <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">B</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">C</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>One important difference between ambient and non-ambient enums is that, in regular enums, members that don’t have an initializer will be considered constant if its preceding enum member is considered constant.\nIn contrast, an ambient (and non-const) enum member that does not have initializer is <em>always</em> considered computed.</p>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/enums.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/enums.html","isOldHandbook":true}}}