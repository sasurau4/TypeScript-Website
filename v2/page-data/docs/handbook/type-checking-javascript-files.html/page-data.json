{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/type-checking-javascript-files.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"c4c16370-783a-5d2f-a635-cdc2e420083f","excerpt":"{% raw %}TypeScript 2.3 and later support type-checking and reporting errors in  files with . You can skip checking some files by adding a  comment to them…","html":"<p>{% raw %}TypeScript 2.3 and later support type-checking and reporting errors in <code class=\"language-text\">.js</code> files with <code class=\"language-text\">--checkJs</code>.</p>\n<p>You can skip checking some files by adding a <code class=\"language-text\">// @ts-nocheck</code> comment to them; conversely, you can choose to check only a few <code class=\"language-text\">.js</code> files by adding a <code class=\"language-text\">// @ts-check</code> comment to them without setting <code class=\"language-text\">--checkJs</code>.\nYou can also ignore errors on specific lines by adding <code class=\"language-text\">// @ts-ignore</code> on the preceding line.\nNote that if you have a <code class=\"language-text\">tsconfig.json</code>, JS checking will respect strict flags like <code class=\"language-text\">noImplicitAny</code>, <code class=\"language-text\">strictNullChecks</code>, etc.\nHowever, because of the relative looseness of JS checking, combining strict flags with it may be surprising.</p>\n<p>Here are some notable differences on how checking works in <code class=\"language-text\">.js</code> files compared to <code class=\"language-text\">.ts</code> files:</p>\n<h2>JSDoc types are used for type information</h2>\n<p>In a <code class=\"language-text\">.js</code> file, types can often be inferred just like in <code class=\"language-text\">.ts</code> files.\nLikewise, when types can’t be inferred, they can be specified using JSDoc the same way that type annotations are used in a <code class=\"language-text\">.ts</code> file.\nJust like Typescript, <code class=\"language-text\">--noImplicitAny</code> will give you errors on the places that the compiler could not infer a type.\n(With the exception of open-ended object literals; see below for details.)</p>\n<p>JSDoc annotations adorning a declaration will be used to set the type of that declaration. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/** @type {number} */</span>\n<span class=\"token keyword\">var</span> x<span class=\"token punctuation\">;</span>\n\nx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// OK</span>\nx <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error: boolean is not assignable to number</span></code></pre></div>\n<p>You can find the full list of supported JSDoc patterns <a href=\"#supported-jsdoc\">below</a>.</p>\n<h2>Properties are inferred from assignments in class bodies</h2>\n<p>ES2015 does not have a means for declaring properties on classes. Properties are dynamically assigned, just like object literals.</p>\n<p>In a <code class=\"language-text\">.js</code> file, the compiler infers properties from property assignments inside the class body.\nThe type of a property is the type given in the constructor, unless it’s not defined there, or the type in the constructor is undefined or null.\nIn that case, the type is the union of the types of all the right-hand values in these assignments.\nProperties defined in the constructor are always assumed to exist, whereas ones defined just in methods, getters, or setters are considered optional.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>constructorOnly <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>constructorUnknown <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>constructorOnly <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// error, constructorOnly is a number</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>constructorUnknown <span class=\"token operator\">=</span> <span class=\"token string\">\"plunkbat\"</span> <span class=\"token comment\">// ok, constructorUnknown is string | undefined</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>methodOnly <span class=\"token operator\">=</span> <span class=\"token string\">'ok'</span>  <span class=\"token comment\">// ok, but methodOnly could also be undefined</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>methodOnly <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>  <span class=\"token comment\">// also, ok, methodOnly's type is string | boolean | undefined</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If properties are never set in the class body, they are considered unknown.\nIf your class has properties that are only read from, add and then annotate a declaration in the constructor with JSDoc to specify the type.\nYou don’t even have to give a value if it will be initialised later:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/** @type {number | undefined} */</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prop <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/** @type {number | undefined} */</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nc<span class=\"token punctuation\">.</span>prop <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// OK</span>\nc<span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error: string is not assignable to number|undefined</span></code></pre></div>\n<h2>Constructor functions are equivalent to classes</h2>\n<p>Before ES2015, Javascript used constructor functions instead of classes.\nThe compiler supports this pattern and understands constructor functions as equivalent to ES2015 classes.\nThe property inference rules described above work exactly the same way.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>constructorOnly <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>constructorUnknown <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">C</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">method</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>constructorOnly <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// error</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>constructorUnknown <span class=\"token operator\">=</span> <span class=\"token string\">\"plunkbat\"</span> <span class=\"token comment\">// OK, the type is string | undefined</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>CommonJS modules are supported</h2>\n<p>In a <code class=\"language-text\">.js</code> file, Typescript understands the CommonJS module format.\nAssignments to <code class=\"language-text\">exports</code> and <code class=\"language-text\">module.exports</code> are recognized as export declarations.\nSimilarly, <code class=\"language-text\">require</code> function calls are recognized as module imports. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// same as `import module \"fs\"`</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// same as `export function readFile`</span>\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">readFile</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The module support in Javascript is much more syntactically forgiving than Typescript’s module support.\nMost combinations of assignments and declarations are supported.</p>\n<h2>Classes, functions, and object literals are namespaces</h2>\n<p>Classes are namespaces in <code class=\"language-text\">.js</code> files.\nThis can be used to nest classes, for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token constant\">C</span><span class=\"token punctuation\">.</span><span class=\"token constant\">D</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And, for pre-ES2015 code, it can be used to simulate static methods:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\nOuter<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">Inner</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>yy <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It can also be used to create simple namespaces:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> ns <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nns<span class=\"token punctuation\">.</span><span class=\"token constant\">C</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\nns<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">func</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Other variants are allowed as well:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// IIFE</span>\n<span class=\"token keyword\">var</span> ns <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> n <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nns<span class=\"token punctuation\">.</span><span class=\"token constant\">CONST</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token comment\">// defaulting to global</span>\n<span class=\"token keyword\">var</span> assign <span class=\"token operator\">=</span> assign <span class=\"token operator\">||</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// code goes here</span>\n<span class=\"token punctuation\">}</span>\nassign<span class=\"token punctuation\">.</span>extra <span class=\"token operator\">=</span> <span class=\"token number\">1</span></code></pre></div>\n<h2>Object literals are open-ended</h2>\n<p>In a <code class=\"language-text\">.ts</code> file, an object literal that initializes a variable declaration gives its type to the declaration.\nNo new members can be added that were not specified in the original literal.\nThis rule is relaxed in a <code class=\"language-text\">.js</code> file; object literals have an open-ended type (an index signature) that allows adding and looking up properties that were not defined originally.\nFor instance:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Allowed</span></code></pre></div>\n<p>Object literals behave as if they have an index signature <code class=\"language-text\">[x:string]: any</code> that allows them to be treated as open maps instead of closed objects.</p>\n<p>Like other special JS checking behaviors, this behavior can be changed by specifying a JSDoc type for the variable. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/** @type {{a: number}} */</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error, type {a: number} does not have property b</span></code></pre></div>\n<h2>null, undefined, and empty array initializers are of type any or any[]</h2>\n<p>Any variable, parameter or property that is initialized with null or undefined will have type any, even if strict null checks is turned on.\nAny variable, parameter or property that is initialized with [] will have type any[], even if strict null checks is turned on.\nThe only exception is for properties that have multiple initializers as described above.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>i<span class=\"token punctuation\">)</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n    j <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>l <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfoo<span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfoo<span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Function parameters are optional by default</h2>\n<p>Since there is no way to specify optionality on parameters in pre-ES2015 Javascript, all function parameters in <code class=\"language-text\">.js</code> file are considered optional.\nCalls with fewer arguments than the declared number of parameters are allowed.</p>\n<p>It is important to note that it is an error to call a function with too many arguments.</p>\n<p>For instance:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// OK, second argument considered optional</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error, too many arguments</span></code></pre></div>\n<p>JSDoc annotated functions are excluded from this rule.\nUse JSDoc optional parameter syntax to express optionality. e.g.:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @param {string} [somebody] - Somebody's name.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">somebody</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>somebody<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        somebody <span class=\"token operator\">=</span> <span class=\"token string\">'John Doe'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello '</span> <span class=\"token operator\">+</span> somebody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Var-args parameter declaration inferred from use of <code class=\"language-text\">arguments</code></h2>\n<p>A function whose body has a reference to the <code class=\"language-text\">arguments</code> reference is implicitly considered to have a var-arg parameter (i.e. <code class=\"language-text\">(...arg: any[]) =&gt; any</code>). Use JSDoc var-arg syntax to specify the type of the arguments.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/** @param {...number} args */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* numbers */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arguments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      total <span class=\"token operator\">+=</span> arguments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> total\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Unspecified type parameters default to <code class=\"language-text\">any</code></h2>\n<p>Since there is no natural syntax for specifying generic type parameters in Javascript, an unspecified type parameter defaults to <code class=\"language-text\">any</code>.</p>\n<h3>In extends clause</h3>\n<p>For instance, <code class=\"language-text\">React.Component</code> is defined to have two type parameters, <code class=\"language-text\">Props</code> and <code class=\"language-text\">State</code>.\nIn a <code class=\"language-text\">.js</code> file, there is no legal way to specify these in the extends clause. By default the type arguments will be <code class=\"language-text\">any</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Allowed, since this.props is of type any</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Use JSDoc <code class=\"language-text\">@augments</code> to specify the types explicitly. for instance:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @augments {Component&lt;{a: number}, State>}\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error: b does not exist on {a:number}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>In JSDoc references</h3>\n<p>An unspecified type argument in JSDoc defaults to any:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/** @type{Array} */</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nx<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// OK</span>\nx<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK, x is of type Array&lt;any></span>\n\n<span class=\"token comment\">/** @type{Array.&lt;number>} */</span>\n<span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\ny<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// OK</span>\ny<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error, string is not assignable to number</span></code></pre></div>\n<h3>In function calls</h3>\n<p>A call to a generic function uses the arguments to infer the type parameters. Sometimes this process fails to infer any types, mainly because of lack of inference sources; in these cases, the type parameters will default to <code class=\"language-text\">any</code>. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\np<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Promise&lt;any>;</span></code></pre></div>\n<h1>Supported JSDoc</h1>\n<p>The list below outlines which constructs are currently supported when using JSDoc annotations to provide type information in JavaScript files.</p>\n<p>Note any tags which are not explicitly listed below (such as <code class=\"language-text\">@async</code>) are not yet supported.</p>\n<ul>\n<li><code class=\"language-text\">@type</code></li>\n<li><code class=\"language-text\">@param</code> (or <code class=\"language-text\">@arg</code> or <code class=\"language-text\">@argument</code>)</li>\n<li><code class=\"language-text\">@returns</code> (or <code class=\"language-text\">@return</code>)</li>\n<li><code class=\"language-text\">@typedef</code></li>\n<li><code class=\"language-text\">@callback</code></li>\n<li><code class=\"language-text\">@template</code></li>\n<li><code class=\"language-text\">@class</code> (or <code class=\"language-text\">@constructor</code>)</li>\n<li><code class=\"language-text\">@this</code></li>\n<li><code class=\"language-text\">@extends</code> (or <code class=\"language-text\">@augments</code>)</li>\n<li><code class=\"language-text\">@enum</code></li>\n</ul>\n<p>The meaning is usually the same, or a superset, of the meaning of the tag given at usejsdoc.org.\nThe code below describes the differences and gives some example usage of each tag.</p>\n<h2><code class=\"language-text\">@type</code></h2>\n<p>You can use the “@type” tag and reference a type name (either primitive, defined in a TypeScript declaration, or in a JSDoc “@typedef” tag).\nYou can use any Typescript type, and most JSDoc types.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @type {string}\n */</span>\n<span class=\"token keyword\">var</span> s<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** @type {Window} */</span>\n<span class=\"token keyword\">var</span> win<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** @type {PromiseLike&lt;string>} */</span>\n<span class=\"token keyword\">var</span> promisedString<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// You can specify an HTML Element with DOM properties</span>\n<span class=\"token comment\">/** @type {HTMLElement} */</span>\n<span class=\"token keyword\">var</span> myElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nelement<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>myData <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">@type</code> can specify a union type — for example, something can be either a string or a boolean.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @type {(string | boolean)}\n */</span>\n<span class=\"token keyword\">var</span> sb<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note that parentheses are optional for union types.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @type {string | boolean}\n */</span>\n<span class=\"token keyword\">var</span> sb<span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can specify array types using a variety of syntaxes:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/** @type {number[]} */</span>\n<span class=\"token keyword\">var</span> ns<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/** @type {Array.&lt;number>} */</span>\n<span class=\"token keyword\">var</span> nds<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/** @type {Array&lt;number>} */</span>\n<span class=\"token keyword\">var</span> nas<span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can also specify object literal types.\nFor example, an object with properties ‘a’ (string) and ‘b’ (number) uses the following syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/** @type {{ a: string, b: number }} */</span>\n<span class=\"token keyword\">var</span> var9<span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can specify map-like and array-like objects using string and number index signatures, using either standard JSDoc syntax or Typescript syntax.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * A map-like object that maps arbitrary `string` properties to `number`s.\n *\n * @type {Object.&lt;string, number>}\n */</span>\n<span class=\"token keyword\">var</span> stringToNumber<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** @type {Object.&lt;number, object>} */</span>\n<span class=\"token keyword\">var</span> arrayLike<span class=\"token punctuation\">;</span></code></pre></div>\n<p>The preceding two types are equivalent to the Typescript types <code class=\"language-text\">{ [x: string]: number }</code> and <code class=\"language-text\">{ [x: number]: any }</code>. The compiler understands both syntaxes.</p>\n<p>You can specify function types using either Typescript or Closure syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/** @type {function(string, boolean): number} Closure syntax */</span>\n<span class=\"token keyword\">var</span> sbn<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/** @type {(s: string, b: boolean) => number} Typescript syntax */</span>\n<span class=\"token keyword\">var</span> sbn2<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Or you can just use the unspecified <code class=\"language-text\">Function</code> type:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/** @type {Function} */</span>\n<span class=\"token keyword\">var</span> fn7<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/** @type {function} */</span>\n<span class=\"token keyword\">var</span> fn6<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Other types from Closure also work:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @type {*} - can be 'any' type\n */</span>\n<span class=\"token keyword\">var</span> star<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * @type {?} - unknown type (same as 'any')\n */</span>\n<span class=\"token keyword\">var</span> question<span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Casts</h3>\n<p>Typescript borrows cast syntax from Closure.\nThis lets you cast types to other types by adding a <code class=\"language-text\">@type</code> tag before any parenthesized expression.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @type {number | string}\n */</span>\n<span class=\"token keyword\">var</span> numberOrString <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"hello\"</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> typeAssertedNumber <span class=\"token operator\">=</span> <span class=\"token comment\">/** @type {number} */</span> <span class=\"token punctuation\">(</span>numberOrString<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Import types</h3>\n<p>You can also import declarations from other files using import types.\nThis syntax is Typescript-specific and differs from the JSDoc standard:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @param p { import(\"./a\").Pet }\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Walking </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>p<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">...</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>import types can also be used in type alias declarations:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @typedef { import(\"./a\").Pet } Pet\n */</span>\n\n<span class=\"token comment\">/**\n * @type {Pet}\n */</span>\n<span class=\"token keyword\">var</span> myPet<span class=\"token punctuation\">;</span>\nmyPet<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></code></pre></div>\n<p>import types can be used to get the type of a value from a module if you don’t know the type, or if it has a large type that is annoying to type:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @type {typeof import(\"./a\").x }\n */</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span></code></pre></div>\n<h2><code class=\"language-text\">@param</code> and <code class=\"language-text\">@returns</code></h2>\n<p><code class=\"language-text\">@param</code> uses the same type syntax as <code class=\"language-text\">@type</code>, but adds a parameter name.\nThe parameter may also be declared optional by surrounding the name with square brackets:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Parameters may be declared in a variety of syntactic forms</span>\n<span class=\"token comment\">/**\n * @param {string}  p1 - A string param.\n * @param {string=} p2 - An optional param (Closure syntax)\n * @param {string} [p3] - Another optional param (JSDoc syntax).\n * @param {string} [p4=\"test\"] - An optional param with a default value\n * @return {string} This is the result\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">stringsStringStrings</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">,</span> p3<span class=\"token punctuation\">,</span> p4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// TODO</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Likewise, for the return type of a function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @return {PromiseLike&lt;string>}\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * @returns {{ a: string, b: number }} - May use '@returns' as well as '@return'\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ab</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h2><code class=\"language-text\">@typedef</code>, <code class=\"language-text\">@callback</code>, and <code class=\"language-text\">@param</code></h2>\n<p><code class=\"language-text\">@typedef</code> may be used to define complex types.\nSimilar syntax works with <code class=\"language-text\">@param</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @typedef {Object} SpecialType - creates a new type named 'SpecialType'\n * @property {string} prop1 - a string property of SpecialType\n * @property {number} prop2 - a number property of SpecialType\n * @property {number=} prop3 - an optional number property of SpecialType\n * @prop {number} [prop4] - an optional number property of SpecialType\n * @prop {number} [prop5=42] - an optional number property of SpecialType with default\n */</span>\n<span class=\"token comment\">/** @type {SpecialType} */</span>\n<span class=\"token keyword\">var</span> specialTypeObject<span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can use either <code class=\"language-text\">object</code> or <code class=\"language-text\">Object</code> on the first line.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @typedef {object} SpecialType1 - creates a new type named 'SpecialType1'\n * @property {string} prop1 - a string property of SpecialType1\n * @property {number} prop2 - a number property of SpecialType1\n * @property {number=} prop3 - an optional number property of SpecialType1\n */</span>\n<span class=\"token comment\">/** @type {SpecialType1} */</span>\n<span class=\"token keyword\">var</span> specialTypeObject1<span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">@param</code> allows a similar syntax for one-off type specifications.\nNote that the nested property names must be prefixed with the name of the parameter:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @param {Object} options - The shape is the same as SpecialType above\n * @param {string} options.prop1\n * @param {number} options.prop2\n * @param {number=} options.prop3\n * @param {number} [options.prop4]\n * @param {number} [options.prop5=42]\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">special</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>prop4 <span class=\"token operator\">||</span> <span class=\"token number\">1001</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> options<span class=\"token punctuation\">.</span>prop5<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">@callback</code> is similar to <code class=\"language-text\">@typedef</code>, but it specifies a function type instead of an object type:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @callback Predicate\n * @param {string} data\n * @param {number} [index]\n * @returns {boolean}\n */</span>\n<span class=\"token comment\">/** @type {Predicate} */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ok</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">s</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Of course, any of these types can be declared using Typescript syntax in a single-line <code class=\"language-text\">@typedef</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/** @typedef {{ prop1: string, prop2: string, prop3?: number }} SpecialType */</span>\n<span class=\"token comment\">/** @typedef {(data: string, index?: number) => boolean} Predicate */</span></code></pre></div>\n<h2><code class=\"language-text\">@template</code></h2>\n<p>You can declare generic types with the <code class=\"language-text\">@template</code> tag:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @template T\n * @param {T} x - A generic parameter that flows through to the return type\n * @return {T}\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Use comma or multiple tags to declare multiple type parameters:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @template T,U,V\n * @template W,X\n */</span></code></pre></div>\n<p>You can also specify a type constraint before the type parameter name.\nOnly the first type parameter in a list is constrained:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @template {string} K - K must be a string or string literal\n * @template {{ serious(): string }} Seriousalizable - must have a serious method\n * @param {K} key\n * @param {Seriousalizable} object\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">seriousalize</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> object</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ????</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2><code class=\"language-text\">@constructor</code></h2>\n<p>The compiler infers constructor functions based on this-property assignments, but you can make checking stricter and suggestions better if you add a <code class=\"language-text\">@constructor</code> tag:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @constructor\n * @param {number} data\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Should error, initializer expects a string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/**\n * @param {string} s\n */</span>\n<span class=\"token class-name\">C</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">initialize</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>length\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// C should only be called with new</span></code></pre></div>\n<p>With <code class=\"language-text\">@constructor</code>, <code class=\"language-text\">this</code> is checked inside the constructor function <code class=\"language-text\">C</code>, so you will get suggestions for the <code class=\"language-text\">initialize</code> method and an error if you pass it a number. You will also get an error if you call <code class=\"language-text\">C</code> instead of constructing it.</p>\n<p>Unfortunately, this means that constructor functions that are also callable cannot use <code class=\"language-text\">@constructor</code>.</p>\n<h2><code class=\"language-text\">@this</code></h2>\n<p>The compiler can usually figure out the type of <code class=\"language-text\">this</code> when it has some context to work with. When it doesn’t, you can explicitly specify the type of <code class=\"language-text\">this</code> with <code class=\"language-text\">@this</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @this {HTMLElement}\n * @param {*} e\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">callbackForLater</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clientHeight <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token comment\">// should be fine!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2><code class=\"language-text\">@extends</code></h2>\n<p>When Javascript classes extend a generic base class, there is nowhere to specify what the type parameter should be. The <code class=\"language-text\">@extends</code> tag provides a place for that type parameter:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @template T\n * @extends {Set&lt;T>}\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SortableSet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Set</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that <code class=\"language-text\">@extends</code> only works with classes. Currently, there is no way for a constructor function extend a class.</p>\n<h2><code class=\"language-text\">@enum</code></h2>\n<p>The <code class=\"language-text\">@enum</code> tag allows you to create an object literal whose members are all of a specified type. Unlike most object literals in Javascript, it does not allow other members.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/** @enum {number} */</span>\n<span class=\"token keyword\">const</span> JSDocState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  BeginningOfLine<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  SawAsterisk<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  SavingComments<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that <code class=\"language-text\">@enum</code> is quite different from, and much simpler than, Typescript’s <code class=\"language-text\">enum</code>. However, unlike Typescript’s enums, <code class=\"language-text\">@enum</code> can have any type:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/** @enum {function(number): number} */</span>\n<span class=\"token keyword\">const</span> Math <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">add1</span><span class=\"token punctuation\">:</span> <span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">id</span><span class=\"token punctuation\">:</span> <span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> <span class=\"token operator\">-</span>n<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">sub1</span><span class=\"token punctuation\">:</span> <span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>More examples</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> someObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * @param {string} param1 - Docs on property assignments work\n   */</span>\n  <span class=\"token function-variable function\">x</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">param1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * As do docs on variable assignments\n * @return {Window}\n */</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">someFunc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * And class methods\n * @param {string} greeting The greeting to use\n */</span>\n<span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayHi</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">greeting</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * And arrow functions expressions\n * @param {number} x - A multiplier\n */</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">myArrow</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Which means it works for stateless function components in JSX too\n * @param {{a: string, b: number}} test - Some param\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">test</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>test<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * A parameter can be a class constructor, using Closure syntax.\n *\n * @param {{new(...args: any[]): object}} C - The class to register\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">registerClass</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">C</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * @param {...string} p1 - A 'rest' arg (array) of strings. (treated as 'any')\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn10</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * @param {...string} p1 - A 'rest' arg (array) of strings. (treated as 'any')\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn9</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> p1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Patterns that are known NOT to be supported</h2>\n<p>Referring to objects in the value space as types doesn’t work unless the object also creates a type, like a constructor function.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">aNormalFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/**\n * @type {aNormalFunction}\n */</span>\n<span class=\"token keyword\">var</span> wrong<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * Use 'typeof' instead:\n * @type {typeof aNormalFunction}\n */</span>\n<span class=\"token keyword\">var</span> right<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Postfix equals on a property type in an object literal type doesn’t specify an optional property:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @type {{ a: string, b: number= }}\n */</span>\n<span class=\"token keyword\">var</span> wrong<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * Use postfix question on the property name instead:\n * @type {{ a: string, b?: number }}\n */</span>\n<span class=\"token keyword\">var</span> right<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nullable types only have meaning if <code class=\"language-text\">strictNullChecks</code> is on:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @type {?number}\n * With strictNullChecks: true -- number | null\n * With strictNullChecks: off  -- number\n */</span>\n<span class=\"token keyword\">var</span> nullable<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Non-nullable types have no meaning and are treated just as their original type:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @type {!number}\n * Just has type number\n */</span>\n<span class=\"token keyword\">var</span> normal<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Unlike JSDoc’s type system, Typescript only allows you to mark types as containing null or not.\nThere is no explicit non-nullability — if strictNullChecks is on, then <code class=\"language-text\">number</code> is not nullable.\nIf it is off, then <code class=\"language-text\">number</code> is nullable.</p>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/type-checking-javascript-files.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/type-checking-javascript-files.html","isOldHandbook":true}}}