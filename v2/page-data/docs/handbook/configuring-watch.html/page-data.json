{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/configuring-watch.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"d72b4bc5-aefa-5ead-b49a-881ee7f40944","excerpt":"{% raw %}Compiler supports configuring how to watch files and directories using the environment variables. Configuring file watching using environment variable…","html":"<p>{% raw %}Compiler supports configuring how to watch files and directories using the environment variables.</p>\n<h2>Configuring file watching using environment variable <code class=\"language-text\">TSC_WATCHFILE</code></h2>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">PriorityPollingInterval</code></td>\n<td>Use <code class=\"language-text\">fs.watchFile</code> but use different polling intervals for source files, config files and missing files</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">DynamicPriorityPolling</code></td>\n<td>Use a dynamic queue where in the frequently modified files will be polled at shorter interval and the files unchanged will be polled less frequently</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">UseFsEvents</code></td>\n<td>Use <code class=\"language-text\">fs.watch</code> which uses file system events (but might not be accurate on different OS) to get the notifications for the file changes/creation/deletion. Note that few OS eg. linux has limit on number of watches and failing to create watcher using <code class=\"language-text\">fs.watch</code> will result it in creating using <code class=\"language-text\">fs.watchFile</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">UseFsEventsWithFallbackDynamicPolling</code></td>\n<td>This option is similar to <code class=\"language-text\">UseFsEvents</code> except on failing to create watch using <code class=\"language-text\">fs.watch</code>, the fallback watching happens through dynamic polling queues (as explained in <code class=\"language-text\">DynamicPriorityPolling</code>)</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">UseFsEventsOnParentDirectory</code></td>\n<td>This option watches parent directory of the file with <code class=\"language-text\">fs.watch</code> (using file system events) thus being low on CPU but can compromise accuracy.</td>\n</tr>\n<tr>\n<td>default (no value specified)</td>\n<td>If environment variable <code class=\"language-text\">TSC_NONPOLLING_WATCHER</code> is set to true, watches parent directory of files (just like <code class=\"language-text\">UseFsEventsOnParentDirectory</code>). Otherwise watch files using <code class=\"language-text\">fs.watchFile</code> with <code class=\"language-text\">250ms</code> as the timeout for any file</td>\n</tr>\n</tbody>\n</table>\n<h2>Configuring directory watching using environment variable <code class=\"language-text\">TSC_WATCHDIRECTORY</code></h2>\n<p>The watching of directory on platforms that don’t support recursive directory watching natively in node, is supported through recursively creating directory watcher for the child directories using different options selected by <code class=\"language-text\">TSC_WATCHDIRECTORY</code>. Note that on platforms that support native recursive directory watching (e.g windows) the value of this environment variable is ignored.</p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">RecursiveDirectoryUsingFsWatchFile</code></td>\n<td>Use <code class=\"language-text\">fs.watchFile</code> to watch the directories and child directories which is a polling watch (consuming CPU cycles)</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">RecursiveDirectoryUsingDynamicPriorityPolling</code></td>\n<td>Use dynamic polling queue to poll changes to the directory and child directories.</td>\n</tr>\n<tr>\n<td>default (no value specified)</td>\n<td>Use <code class=\"language-text\">fs.watch</code> to watch directories and child directories</td>\n</tr>\n</tbody>\n</table>\n<h2>Background</h2>\n<p><code class=\"language-text\">--watch</code> implementation of the compiler relies on <code class=\"language-text\">fs.watch</code> and <code class=\"language-text\">fs.watchFile</code> provided by node, both of these methods have pros and cons.</p>\n<p><code class=\"language-text\">fs.watch</code> uses file system events to notify the changes in the file/directory. But this is OS dependent and the notification is not completely reliable and does not work as expected on many OS. Also there could be limit on number of watches that can be created, eg. linux and we could exhaust it pretty quickly with programs that include large number of files. But because this uses file system events, there is not much CPU cycle involved. Compiler typically uses <code class=\"language-text\">fs.watch</code> to watch directories (eg. source directories included by config file, directories in which module resolution failed etc) These can handle the missing precision in notifying about the changes. But recursive watching is supported on only Windows and OSX. That means we need something to replace the recursive nature on other OS.</p>\n<p><code class=\"language-text\">fs.watchFile</code> uses polling and thus involves CPU cycles. But this is the most reliable mechanism to get the update on the status of file/directory. Compiler typically uses <code class=\"language-text\">fs.watchFile</code> to watch source files, config files and missing files (missing file references) that means the CPU usage depends on number of files in the program.</p>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/configuring-watch.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/configuring-watch.html","isOldHandbook":true}}}