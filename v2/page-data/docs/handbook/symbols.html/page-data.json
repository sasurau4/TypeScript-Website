{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/symbols.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"ee1af59a-2739-518b-af3a-70f5b91a0bae","excerpt":"{% raw %}# Introduction Starting with ECMAScript 2015,  is a primitive data type, just like  and .  values are created by calling the  constructor. Symbols are…","html":"<p>{% raw %}# Introduction</p>\n<p>Starting with ECMAScript 2015, <code class=\"language-text\">symbol</code> is a primitive data type, just like <code class=\"language-text\">number</code> and <code class=\"language-text\">string</code>.</p>\n<p><code class=\"language-text\">symbol</code> values are created by calling the <code class=\"language-text\">Symbol</code> constructor.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> sym1 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> sym2 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// optional string key</span></code></pre></div>\n<p>Symbols are immutable, and unique.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> sym2 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> sym3 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsym2 <span class=\"token operator\">===</span> sym3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// false, symbols are unique</span></code></pre></div>\n<p>Just like strings, symbols can be used as keys for object properties.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> sym <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>sym<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"value\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>sym<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"value\"</span></code></pre></div>\n<p>Symbols can also be combined with computed property declarations to declare object properties and class members.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> getClassNameSymbol <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>getClassNameSymbol<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">return</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> className <span class=\"token operator\">=</span> c<span class=\"token punctuation\">[</span>getClassNameSymbol<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"C\"</span></code></pre></div>\n<h1>Well-known Symbols</h1>\n<p>In addition to user-defined symbols, there are well-known built-in symbols.\nBuilt-in symbols are used to represent internal language behaviors.</p>\n<p>Here is a list of well-known symbols:</p>\n<h2><code class=\"language-text\">Symbol.hasInstance</code></h2>\n<p>A method that determines if a constructor object recognizes an object as one of the constructor’s instances. Called by the semantics of the instanceof operator.</p>\n<h2><code class=\"language-text\">Symbol.isConcatSpreadable</code></h2>\n<p>A Boolean value indicating that an object should be flattened to its array elements by Array.prototype.concat.</p>\n<h2><code class=\"language-text\">Symbol.iterator</code></h2>\n<p>A method that returns the default iterator for an object. Called by the semantics of the for-of statement.</p>\n<h2><code class=\"language-text\">Symbol.match</code></h2>\n<p>A regular expression method that matches the regular expression against a string. Called by the <code class=\"language-text\">String.prototype.match</code> method.</p>\n<h2><code class=\"language-text\">Symbol.replace</code></h2>\n<p>A regular expression method that replaces matched substrings of a string. Called by the <code class=\"language-text\">String.prototype.replace</code> method.</p>\n<h2><code class=\"language-text\">Symbol.search</code></h2>\n<p>A regular expression method that returns the index within a string that matches the regular expression. Called by the <code class=\"language-text\">String.prototype.search</code> method.</p>\n<h2><code class=\"language-text\">Symbol.species</code></h2>\n<p>A function valued property that is the constructor function that is used to create derived objects.</p>\n<h2><code class=\"language-text\">Symbol.split</code></h2>\n<p>A regular expression method that splits a string at the indices that match the regular expression.\nCalled by the <code class=\"language-text\">String.prototype.split</code> method.</p>\n<h2><code class=\"language-text\">Symbol.toPrimitive</code></h2>\n<p>A method that converts an object to a corresponding primitive value.\nCalled by the <code class=\"language-text\">ToPrimitive</code> abstract operation.</p>\n<h2><code class=\"language-text\">Symbol.toStringTag</code></h2>\n<p>A String value that is used in the creation of the default string description of an object.\nCalled by the built-in method <code class=\"language-text\">Object.prototype.toString</code>.</p>\n<h2><code class=\"language-text\">Symbol.unscopables</code></h2>\n<p>An Object whose own property names are property names that are excluded from the ‘with’ environment bindings of the associated objects.</p>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/symbols.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/symbols.html","isOldHandbook":true}}}