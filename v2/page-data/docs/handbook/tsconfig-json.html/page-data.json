{"componentChunkName":"component---src-templates-handbook-tsx","path":"/docs/handbook/tsconfig-json.html","webpackCompilationHash":"9ba7cceb403e6d704a1e","result":{"data":{"markdownRemark":{"id":"de69e898-6737-5f89-9eaf-9bd9973b3412","excerpt":"{% raw %}## Overview The presence of a  file in a directory indicates that the directory is the root of a TypeScript project.\nThe  file specifies the root files…","html":"<p>{% raw %}## Overview</p>\n<p>The presence of a <code class=\"language-text\">tsconfig.json</code> file in a directory indicates that the directory is the root of a TypeScript project.\nThe <code class=\"language-text\">tsconfig.json</code> file specifies the root files and the compiler options required to compile the project.\nA project is compiled in one of the following ways:</p>\n<h2>Using tsconfig.json</h2>\n<ul>\n<li>By invoking tsc with no input files, in which case the compiler searches for the <code class=\"language-text\">tsconfig.json</code> file starting in the current directory and continuing up the parent directory chain.</li>\n<li>By invoking tsc with no input files and a <code class=\"language-text\">--project</code> (or just <code class=\"language-text\">-p</code>) command line option that specifies the path of a directory containing a <code class=\"language-text\">tsconfig.json</code> file, or a path to a valid <code class=\"language-text\">.json</code> file containing the configurations.</li>\n</ul>\n<p>When input files are specified on the command line, <code class=\"language-text\">tsconfig.json</code> files are ignored.</p>\n<h2>Examples</h2>\n<p>Example <code class=\"language-text\">tsconfig.json</code> files:</p>\n<ul>\n<li>\n<p>Using the <code class=\"language-text\">&quot;files&quot;</code> property</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"removeComments\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"preserveConstEnums\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"files\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"core.ts\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"sys.ts\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"types.ts\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"scanner.ts\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"parser.ts\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"utilities.ts\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"binder.ts\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"checker.ts\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"emitter.ts\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"program.ts\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"commandLineParser.ts\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"tsc.ts\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"diagnosticInformationMap.generated.ts\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>Using the <code class=\"language-text\">&quot;include&quot;</code> and <code class=\"language-text\">&quot;exclude&quot;</code> properties</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"system\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"removeComments\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"preserveConstEnums\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"outFile\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"../../built/local/tsc.js\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"src/**/*\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"node_modules\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"**/*.spec.ts\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h2>Details</h2>\n<p>The <code class=\"language-text\">&quot;compilerOptions&quot;</code> property can be omitted, in which case the compiler’s defaults are used. See our full list of supported <a href=\"./Compiler%20Options.md\">Compiler Options</a>.</p>\n<p>The <code class=\"language-text\">&quot;files&quot;</code> property takes a list of relative or absolute file paths.\nThe <code class=\"language-text\">&quot;include&quot;</code> and <code class=\"language-text\">&quot;exclude&quot;</code> properties take a list of glob-like file patterns.\nThe supported glob wildcards are:</p>\n<ul>\n<li><code class=\"language-text\">*</code> matches zero or more characters (excluding directory separators)</li>\n<li><code class=\"language-text\">?</code> matches any one character (excluding directory separators)</li>\n<li><code class=\"language-text\">**/</code> recursively matches any subdirectory</li>\n</ul>\n<p>If a segment of a glob pattern includes only <code class=\"language-text\">*</code> or <code class=\"language-text\">.*</code>, then only files with supported extensions are included (e.g. <code class=\"language-text\">.ts</code>, <code class=\"language-text\">.tsx</code>, and <code class=\"language-text\">.d.ts</code> by default with <code class=\"language-text\">.js</code> and <code class=\"language-text\">.jsx</code> if <code class=\"language-text\">allowJs</code> is set to true).</p>\n<p>If the <code class=\"language-text\">&quot;files&quot;</code> and <code class=\"language-text\">&quot;include&quot;</code> are both left unspecified, the compiler defaults to including all TypeScript (<code class=\"language-text\">.ts</code>, <code class=\"language-text\">.d.ts</code> and <code class=\"language-text\">.tsx</code>) files in the containing directory and subdirectories except those excluded using the <code class=\"language-text\">&quot;exclude&quot;</code> property. JS files (<code class=\"language-text\">.js</code> and <code class=\"language-text\">.jsx</code>) are also included if <code class=\"language-text\">allowJs</code> is set to true.\nIf the <code class=\"language-text\">&quot;files&quot;</code> or <code class=\"language-text\">&quot;include&quot;</code> properties are specified, the compiler will instead include the union of the files included by those two properties.\nFiles in the directory specified using the <code class=\"language-text\">&quot;outDir&quot;</code> compiler option are excluded as long as <code class=\"language-text\">&quot;exclude&quot;</code> property is not specified.</p>\n<p>Files included using <code class=\"language-text\">&quot;include&quot;</code> can be filtered using the <code class=\"language-text\">&quot;exclude&quot;</code> property.\nHowever, files included explicitly using the <code class=\"language-text\">&quot;files&quot;</code> property are always included regardless of <code class=\"language-text\">&quot;exclude&quot;</code>.\nThe <code class=\"language-text\">&quot;exclude&quot;</code> property defaults to excluding the <code class=\"language-text\">node_modules</code>, <code class=\"language-text\">bower_components</code>, <code class=\"language-text\">jspm_packages</code> and <code class=\"language-text\">&lt;outDir&gt;</code> directories when not specified.</p>\n<p>Any files that are referenced by files included via the <code class=\"language-text\">&quot;files&quot;</code> or <code class=\"language-text\">&quot;include&quot;</code> properties are also included.\nSimilarly, if a file <code class=\"language-text\">B.ts</code> is referenced by another file <code class=\"language-text\">A.ts</code>, then <code class=\"language-text\">B.ts</code> cannot be excluded unless the referencing file <code class=\"language-text\">A.ts</code> is also specified in the <code class=\"language-text\">&quot;exclude&quot;</code> list.</p>\n<p>Please note that the compiler does not include files that can be possible outputs; e.g. if the input includes <code class=\"language-text\">index.ts</code>, then <code class=\"language-text\">index.d.ts</code> and <code class=\"language-text\">index.js</code> are excluded.\nIn general, having files that differ only in extension next to each other is not recommended.</p>\n<p>A <code class=\"language-text\">tsconfig.json</code> file is permitted to be completely empty, which compiles all files included by default (as described above) with the default compiler options.</p>\n<p>Compiler options specified on the command line override those specified in the <code class=\"language-text\">tsconfig.json</code> file.</p>\n<h2><code class=\"language-text\">@types</code>, <code class=\"language-text\">typeRoots</code> and <code class=\"language-text\">types</code></h2>\n<p>By default all <em>visible</em> ”<code class=\"language-text\">@types</code>” packages are included in your compilation.\nPackages in <code class=\"language-text\">node_modules/@types</code> of any enclosing folder are considered <em>visible</em>;\nspecifically, that means packages within <code class=\"language-text\">./node_modules/@types/</code>,  <code class=\"language-text\">../node_modules/@types/</code>, <code class=\"language-text\">../../node_modules/@types/</code>, and so on.</p>\n<p>If <code class=\"language-text\">typeRoots</code> is specified, <em>only</em> packages under <code class=\"language-text\">typeRoots</code> will be included.\nFor example:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n   <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token property\">\"typeRoots\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./typings\"</span><span class=\"token punctuation\">]</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This config file will include <em>all</em> packages under <code class=\"language-text\">./typings</code>, and no packages from <code class=\"language-text\">./node_modules/@types</code>.</p>\n<p>If <code class=\"language-text\">types</code> is specified, only packages listed will be included.\nFor instance:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n   <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token property\">\"types\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lodash\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"express\"</span><span class=\"token punctuation\">]</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This <code class=\"language-text\">tsconfig.json</code> file will <em>only</em> include  <code class=\"language-text\">./node_modules/@types/node</code>, <code class=\"language-text\">./node_modules/@types/lodash</code> and <code class=\"language-text\">./node_modules/@types/express</code>.\nOther packages under <code class=\"language-text\">node_modules/@types/*</code> will not be included.</p>\n<p>A types package is a folder with a file called <code class=\"language-text\">index.d.ts</code> or a folder with a <code class=\"language-text\">package.json</code> that has a <code class=\"language-text\">types</code> field.</p>\n<p>Specify <code class=\"language-text\">&quot;types&quot;: []</code> to disable automatic inclusion of <code class=\"language-text\">@types</code> packages.</p>\n<p>Keep in mind that automatic inclusion is only important if you’re using files with global declarations (as opposed to files declared as modules).\nIf you use an <code class=\"language-text\">import &quot;foo&quot;</code> statement, for instance, TypeScript may still look through <code class=\"language-text\">node_modules</code> &#x26; <code class=\"language-text\">node_modules/@types</code> folders to find the <code class=\"language-text\">foo</code> package.</p>\n<h2>Configuration inheritance with <code class=\"language-text\">extends</code></h2>\n<p>A <code class=\"language-text\">tsconfig.json</code> file can inherit configurations from another file using the <code class=\"language-text\">extends</code> property.</p>\n<p>The <code class=\"language-text\">extends</code> is a top-level property in <code class=\"language-text\">tsconfig.json</code> (alongside <code class=\"language-text\">compilerOptions</code>, <code class=\"language-text\">files</code>, <code class=\"language-text\">include</code>, and <code class=\"language-text\">exclude</code>).\n<code class=\"language-text\">extends</code>’ value is a string containing a path to another configuration file to inherit from.</p>\n<p>The configuration from the base file are loaded first, then overridden by those  in the inheriting config file.\nIf a circularity is encountered, we report an error.</p>\n<p><code class=\"language-text\">files</code>, <code class=\"language-text\">include</code> and <code class=\"language-text\">exclude</code> from the inheriting config file <em>overwrite</em> those from the base config file.</p>\n<p>All relative paths found in the configuration file will be resolved relative to the configuration file they originated in.</p>\n<p>For example:</p>\n<p><code class=\"language-text\">configs/base.json</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strictNullChecks\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">tsconfig.json</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./configs/base\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"files\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"main.ts\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"supplemental.ts\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">tsconfig.nostrictnull.json</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./tsconfig\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"strictNullChecks\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2><code class=\"language-text\">compileOnSave</code></h2>\n<p>Setting a top-level property <code class=\"language-text\">compileOnSave</code> signals to the IDE to generate all files for a given tsconfig.json upon saving.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n   <span class=\"token property\">\"compileOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n   <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token property\">\"noImplicitAny\"</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This feature is currently supported in Visual Studio 2015 with TypeScript 1.8.4 and above, and <a href=\"https://github.com/TypeStrong/atom-typescript#compile-on-save\">atom-typescript</a> plugin.</p>\n<h2>Schema</h2>\n<p>Schema can be found at: <a href=\"http://json.schemastore.org/tsconfig\">http://json.schemastore.org/tsconfig</a></p>\n<p>{% endraw %}</p>","frontmatter":{"permalink":"/docs/handbook/tsconfig-json.html"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/handbook/tsconfig-json.html","isOldHandbook":true}}}